// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file cpp.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AvailableCppModelsRequest, AvailableCppModelsResponse, CppAppendRequest, CppAppendResponse, CppConfigRequest, CppConfigResponse, CppEditHistoryStatusRequest, CppEditHistoryStatusResponse, CursorPredictionConfigRequest, CursorPredictionConfigResponse, EditHistoryAppendChangesRequest, EditHistoryAppendChangesResponse, GetCppEditClassificationRequest, GetCppEditClassificationResponse, IntentPredictionRequest, IntentPredictionResponse, IsCursorPredictionEnabledRequest, IsCursorPredictionEnabledResponse, MarkCppRequest, MarkCppResponse, RecordCppFateRequest, RecordCppFateResponse, StreamCppRequest, StreamCppResponse, StreamHoldCppRequest, StreamHoldCppResponse, StreamNextCursorPredictionRequest, StreamNextCursorPredictionResponse } from "./cpp_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service aiserver.v1.CppService
 */
export const CppService = {
  typeName: "aiserver.v1.CppService",
  methods: {
    /**
     * @generated from rpc aiserver.v1.CppService.MarkCppForEval
     */
    markCppForEval: {
      name: "MarkCppForEval",
      I: MarkCppRequest,
      O: MarkCppResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.CppService.StreamHoldCpp
     */
    streamHoldCpp: {
      name: "StreamHoldCpp",
      I: StreamHoldCppRequest,
      O: StreamHoldCppResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.CppService.AvailableModels
     */
    availableModels: {
      name: "AvailableModels",
      I: AvailableCppModelsRequest,
      O: AvailableCppModelsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.CppService.RecordCppFate
     */
    recordCppFate: {
      name: "RecordCppFate",
      I: RecordCppFateRequest,
      O: RecordCppFateResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service aiserver.v1.AiService
 */
export const AiService = {
  typeName: "aiserver.v1.AiService",
  methods: {
    /**
     * @generated from rpc aiserver.v1.AiService.IntentPrediction
     */
    intentPrediction: {
      name: "IntentPrediction",
      I: IntentPredictionRequest,
      O: IntentPredictionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamCpp
     */
    streamCpp: {
      name: "StreamCpp",
      I: StreamCppRequest,
      O: StreamCppResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.CppConfig
     */
    cppConfig: {
      name: "CppConfig",
      I: CppConfigRequest,
      O: CppConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.CppEditHistoryStatus
     */
    cppEditHistoryStatus: {
      name: "CppEditHistoryStatus",
      I: CppEditHistoryStatusRequest,
      O: CppEditHistoryStatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.CppAppend
     */
    cppAppend: {
      name: "CppAppend",
      I: CppAppendRequest,
      O: CppAppendResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.StreamNextCursorPrediction
     */
    streamNextCursorPrediction: {
      name: "StreamNextCursorPrediction",
      I: StreamNextCursorPredictionRequest,
      O: StreamNextCursorPredictionResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.IsCursorPredictionEnabled
     */
    isCursorPredictionEnabled: {
      name: "IsCursorPredictionEnabled",
      I: IsCursorPredictionEnabledRequest,
      O: IsCursorPredictionEnabledResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.GetCppEditClassification
     */
    getCppEditClassification: {
      name: "GetCppEditClassification",
      I: GetCppEditClassificationRequest,
      O: GetCppEditClassificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc aiserver.v1.AiService.CppEditHistoryAppend
     */
    cppEditHistoryAppend: {
      name: "CppEditHistoryAppend",
      I: EditHistoryAppendChangesRequest,
      O: EditHistoryAppendChangesResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service aiserver.v1.CursorPredictionService
 */
export const CursorPredictionService = {
  typeName: "aiserver.v1.CursorPredictionService",
  methods: {
    /**
     * @generated from rpc aiserver.v1.CursorPredictionService.CursorPredictionConfig
     */
    cursorPredictionConfig: {
      name: "CursorPredictionConfig",
      I: CursorPredictionConfigRequest,
      O: CursorPredictionConfigResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

