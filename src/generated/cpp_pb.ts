// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file cpp.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @version: 1.3.6~1.3.7
 * @author: wisdgod <nav@wisdgod.com>
 * @license: MIT OR Apache-2.0
 *
 * aiserver.v1.EmbeddingModel
 *
 * @generated from enum aiserver.v1.EmbeddingModel
 */
export enum EmbeddingModel {
  /**
   * @generated from enum value: EMBEDDING_MODEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EMBEDDING_MODEL_VOYAGE_CODE_2 = 1;
   */
  VOYAGE_CODE_2 = 1,

  /**
   * @generated from enum value: EMBEDDING_MODEL_TEXT_EMBEDDINGS_LARGE_3 = 2;
   */
  TEXT_EMBEDDINGS_LARGE_3 = 2,

  /**
   * @generated from enum value: EMBEDDING_MODEL_QWEN_1_5B_CUSTOM = 3;
   */
  QWEN_1_5B_CUSTOM = 3,

  /**
   * @generated from enum value: EMBEDDING_MODEL_MOCK_CHUNKER_ERROR = 4;
   */
  MOCK_CHUNKER_ERROR = 4,

  /**
   * @generated from enum value: EMBEDDING_MODEL_QWEN_1_5B_0618_CUSTOM = 5;
   */
  QWEN_1_5B_0618_CUSTOM = 5,

  /**
   * @generated from enum value: EMBEDDING_MODEL_QWEN_1_5B_0618_FP8_MM_CUSTOM = 6;
   */
  QWEN_1_5B_0618_FP8_MM_CUSTOM = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(EmbeddingModel)
proto3.util.setEnumType(EmbeddingModel, "aiserver.v1.EmbeddingModel", [
  { no: 0, name: "EMBEDDING_MODEL_UNSPECIFIED" },
  { no: 1, name: "EMBEDDING_MODEL_VOYAGE_CODE_2" },
  { no: 2, name: "EMBEDDING_MODEL_TEXT_EMBEDDINGS_LARGE_3" },
  { no: 3, name: "EMBEDDING_MODEL_QWEN_1_5B_CUSTOM" },
  { no: 4, name: "EMBEDDING_MODEL_MOCK_CHUNKER_ERROR" },
  { no: 5, name: "EMBEDDING_MODEL_QWEN_1_5B_0618_CUSTOM" },
  { no: 6, name: "EMBEDDING_MODEL_QWEN_1_5B_0618_FP8_MM_CUSTOM" },
]);

/**
 * aiserver.v1.CppFate
 *
 * @generated from enum aiserver.v1.CppFate
 */
export enum CppFate {
  /**
   * @generated from enum value: CPP_FATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CPP_FATE_ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * @generated from enum value: CPP_FATE_REJECT = 2;
   */
  REJECT = 2,

  /**
   * @generated from enum value: CPP_FATE_PARTIAL_ACCEPT = 3;
   */
  PARTIAL_ACCEPT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CppFate)
proto3.util.setEnumType(CppFate, "aiserver.v1.CppFate", [
  { no: 0, name: "CPP_FATE_UNSPECIFIED" },
  { no: 1, name: "CPP_FATE_ACCEPT" },
  { no: 2, name: "CPP_FATE_REJECT" },
  { no: 3, name: "CPP_FATE_PARTIAL_ACCEPT" },
]);

/**
 * aiserver.v1.CppSource
 *
 * @generated from enum aiserver.v1.CppSource
 */
export enum CppSource {
  /**
   * @generated from enum value: CPP_SOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CPP_SOURCE_LINE_CHANGE = 1;
   */
  LINE_CHANGE = 1,

  /**
   * @generated from enum value: CPP_SOURCE_TYPING = 2;
   */
  TYPING = 2,

  /**
   * @generated from enum value: CPP_SOURCE_OPTION_HOLD = 3;
   */
  OPTION_HOLD = 3,

  /**
   * @generated from enum value: CPP_SOURCE_LINTER_ERRORS = 4;
   */
  LINTER_ERRORS = 4,

  /**
   * @generated from enum value: CPP_SOURCE_PARAMETER_HINTS = 5;
   */
  PARAMETER_HINTS = 5,

  /**
   * @generated from enum value: CPP_SOURCE_CURSOR_PREDICTION = 6;
   */
  CURSOR_PREDICTION = 6,

  /**
   * @generated from enum value: CPP_SOURCE_MANUAL_TRIGGER = 7;
   */
  MANUAL_TRIGGER = 7,

  /**
   * @generated from enum value: CPP_SOURCE_EDITOR_CHANGE = 8;
   */
  EDITOR_CHANGE = 8,

  /**
   * @generated from enum value: CPP_SOURCE_LSP_SUGGESTIONS = 9;
   */
  LSP_SUGGESTIONS = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(CppSource)
proto3.util.setEnumType(CppSource, "aiserver.v1.CppSource", [
  { no: 0, name: "CPP_SOURCE_UNSPECIFIED" },
  { no: 1, name: "CPP_SOURCE_LINE_CHANGE" },
  { no: 2, name: "CPP_SOURCE_TYPING" },
  { no: 3, name: "CPP_SOURCE_OPTION_HOLD" },
  { no: 4, name: "CPP_SOURCE_LINTER_ERRORS" },
  { no: 5, name: "CPP_SOURCE_PARAMETER_HINTS" },
  { no: 6, name: "CPP_SOURCE_CURSOR_PREDICTION" },
  { no: 7, name: "CPP_SOURCE_MANUAL_TRIGGER" },
  { no: 8, name: "CPP_SOURCE_EDITOR_CHANGE" },
  { no: 9, name: "CPP_SOURCE_LSP_SUGGESTIONS" },
]);

/**
 * aiserver.v1.DatabaseProvider
 *
 * @generated from enum aiserver.v1.DatabaseProvider
 */
export enum DatabaseProvider {
  /**
   * @generated from enum value: DATABASE_PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATABASE_PROVIDER_AURORA = 1;
   */
  AURORA = 1,

  /**
   * @generated from enum value: DATABASE_PROVIDER_PLANETSCALE = 2;
   */
  PLANETSCALE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DatabaseProvider)
proto3.util.setEnumType(DatabaseProvider, "aiserver.v1.DatabaseProvider", [
  { no: 0, name: "DATABASE_PROVIDER_UNSPECIFIED" },
  { no: 1, name: "DATABASE_PROVIDER_AURORA" },
  { no: 2, name: "DATABASE_PROVIDER_PLANETSCALE" },
]);

/**
 * aiserver.v1.ClientSideToolV2
 *
 * @generated from enum aiserver.v1.ClientSideToolV2
 */
export enum ClientSideToolV2 {
  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_READ_SEMSEARCH_FILES = 1;
   */
  READ_SEMSEARCH_FILES = 1,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_RIPGREP_SEARCH = 3;
   */
  RIPGREP_SEARCH = 3,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_READ_FILE = 5;
   */
  READ_FILE = 5,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_LIST_DIR = 6;
   */
  LIST_DIR = 6,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_EDIT_FILE = 7;
   */
  EDIT_FILE = 7,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_FILE_SEARCH = 8;
   */
  FILE_SEARCH = 8,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_SEMANTIC_SEARCH_FULL = 9;
   */
  SEMANTIC_SEARCH_FULL = 9,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_DELETE_FILE = 11;
   */
  DELETE_FILE = 11,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_REAPPLY = 12;
   */
  REAPPLY = 12,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_RUN_TERMINAL_COMMAND_V2 = 15;
   */
  RUN_TERMINAL_COMMAND_V2 = 15,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_FETCH_RULES = 16;
   */
  FETCH_RULES = 16,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_WEB_SEARCH = 18;
   */
  WEB_SEARCH = 18,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_MCP = 19;
   */
  MCP = 19,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_SEARCH_SYMBOLS = 23;
   */
  SEARCH_SYMBOLS = 23,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_BACKGROUND_COMPOSER_FOLLOWUP = 24;
   */
  BACKGROUND_COMPOSER_FOLLOWUP = 24,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_KNOWLEDGE_BASE = 25;
   */
  KNOWLEDGE_BASE = 25,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_FETCH_PULL_REQUEST = 26;
   */
  FETCH_PULL_REQUEST = 26,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_DEEP_SEARCH = 27;
   */
  DEEP_SEARCH = 27,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_CREATE_DIAGRAM = 28;
   */
  CREATE_DIAGRAM = 28,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_FIX_LINTS = 29;
   */
  FIX_LINTS = 29,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_READ_LINTS = 30;
   */
  READ_LINTS = 30,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_GO_TO_DEFINITION = 31;
   */
  GO_TO_DEFINITION = 31,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_TASK = 32;
   */
  TASK = 32,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_AWAIT_TASK = 33;
   */
  AWAIT_TASK = 33,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_TODO_READ = 34;
   */
  TODO_READ = 34,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_TODO_WRITE = 35;
   */
  TODO_WRITE = 35,

  /**
   * @generated from enum value: CLIENT_SIDE_TOOL_V2_EDIT_FILE_V2 = 38;
   */
  EDIT_FILE_V2 = 38,
}
// Retrieve enum metadata with: proto3.getEnumType(ClientSideToolV2)
proto3.util.setEnumType(ClientSideToolV2, "aiserver.v1.ClientSideToolV2", [
  { no: 0, name: "CLIENT_SIDE_TOOL_V2_UNSPECIFIED" },
  { no: 1, name: "CLIENT_SIDE_TOOL_V2_READ_SEMSEARCH_FILES" },
  { no: 3, name: "CLIENT_SIDE_TOOL_V2_RIPGREP_SEARCH" },
  { no: 5, name: "CLIENT_SIDE_TOOL_V2_READ_FILE" },
  { no: 6, name: "CLIENT_SIDE_TOOL_V2_LIST_DIR" },
  { no: 7, name: "CLIENT_SIDE_TOOL_V2_EDIT_FILE" },
  { no: 8, name: "CLIENT_SIDE_TOOL_V2_FILE_SEARCH" },
  { no: 9, name: "CLIENT_SIDE_TOOL_V2_SEMANTIC_SEARCH_FULL" },
  { no: 11, name: "CLIENT_SIDE_TOOL_V2_DELETE_FILE" },
  { no: 12, name: "CLIENT_SIDE_TOOL_V2_REAPPLY" },
  { no: 15, name: "CLIENT_SIDE_TOOL_V2_RUN_TERMINAL_COMMAND_V2" },
  { no: 16, name: "CLIENT_SIDE_TOOL_V2_FETCH_RULES" },
  { no: 18, name: "CLIENT_SIDE_TOOL_V2_WEB_SEARCH" },
  { no: 19, name: "CLIENT_SIDE_TOOL_V2_MCP" },
  { no: 23, name: "CLIENT_SIDE_TOOL_V2_SEARCH_SYMBOLS" },
  { no: 24, name: "CLIENT_SIDE_TOOL_V2_BACKGROUND_COMPOSER_FOLLOWUP" },
  { no: 25, name: "CLIENT_SIDE_TOOL_V2_KNOWLEDGE_BASE" },
  { no: 26, name: "CLIENT_SIDE_TOOL_V2_FETCH_PULL_REQUEST" },
  { no: 27, name: "CLIENT_SIDE_TOOL_V2_DEEP_SEARCH" },
  { no: 28, name: "CLIENT_SIDE_TOOL_V2_CREATE_DIAGRAM" },
  { no: 29, name: "CLIENT_SIDE_TOOL_V2_FIX_LINTS" },
  { no: 30, name: "CLIENT_SIDE_TOOL_V2_READ_LINTS" },
  { no: 31, name: "CLIENT_SIDE_TOOL_V2_GO_TO_DEFINITION" },
  { no: 32, name: "CLIENT_SIDE_TOOL_V2_TASK" },
  { no: 33, name: "CLIENT_SIDE_TOOL_V2_AWAIT_TASK" },
  { no: 34, name: "CLIENT_SIDE_TOOL_V2_TODO_READ" },
  { no: 35, name: "CLIENT_SIDE_TOOL_V2_TODO_WRITE" },
  { no: 38, name: "CLIENT_SIDE_TOOL_V2_EDIT_FILE_V2" },
]);

/**
 * aiserver.v1.RunTerminalCommandEndedReason
 *
 * @generated from enum aiserver.v1.RunTerminalCommandEndedReason
 */
export enum RunTerminalCommandEndedReason {
  /**
   * @generated from enum value: RUN_TERMINAL_COMMAND_ENDED_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_COMPLETED = 1;
   */
  EXECUTION_COMPLETED = 1,

  /**
   * @generated from enum value: RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_ABORTED = 2;
   */
  EXECUTION_ABORTED = 2,

  /**
   * @generated from enum value: RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_FAILED = 3;
   */
  EXECUTION_FAILED = 3,

  /**
   * @generated from enum value: RUN_TERMINAL_COMMAND_ENDED_REASON_ERROR_OCCURRED_CHECKING_REASON = 4;
   */
  ERROR_OCCURRED_CHECKING_REASON = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(RunTerminalCommandEndedReason)
proto3.util.setEnumType(RunTerminalCommandEndedReason, "aiserver.v1.RunTerminalCommandEndedReason", [
  { no: 0, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_UNSPECIFIED" },
  { no: 1, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_COMPLETED" },
  { no: 2, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_ABORTED" },
  { no: 3, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_FAILED" },
  { no: 4, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_ERROR_OCCURRED_CHECKING_REASON" },
]);

/**
 * aiserver.v1.SubagentType
 *
 * @generated from enum aiserver.v1.SubagentType
 */
export enum SubagentType {
  /**
   * @generated from enum value: SUBAGENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SUBAGENT_TYPE_DEEP_SEARCH = 1;
   */
  DEEP_SEARCH = 1,

  /**
   * @generated from enum value: SUBAGENT_TYPE_FIX_LINTS = 2;
   */
  FIX_LINTS = 2,

  /**
   * @generated from enum value: SUBAGENT_TYPE_TASK = 3;
   */
  TASK = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SubagentType)
proto3.util.setEnumType(SubagentType, "aiserver.v1.SubagentType", [
  { no: 0, name: "SUBAGENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "SUBAGENT_TYPE_DEEP_SEARCH" },
  { no: 2, name: "SUBAGENT_TYPE_FIX_LINTS" },
  { no: 3, name: "SUBAGENT_TYPE_TASK" },
]);

/**
 * aiserver.v1.CursorPosition
 *
 * @generated from message aiserver.v1.CursorPosition
 */
export class CursorPosition extends Message<CursorPosition> {
  /**
   * @generated from field: int32 line = 1;
   */
  line = 0;

  /**
   * @generated from field: int32 column = 2;
   */
  column = 0;

  constructor(data?: PartialMessage<CursorPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CursorPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CursorPosition {
    return new CursorPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CursorPosition {
    return new CursorPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CursorPosition {
    return new CursorPosition().fromJsonString(jsonString, options);
  }

  static equals(a: CursorPosition | PlainMessage<CursorPosition> | undefined, b: CursorPosition | PlainMessage<CursorPosition> | undefined): boolean {
    return proto3.util.equals(CursorPosition, a, b);
  }
}

/**
 * aiserver.v1.SelectionWithOrientation
 *
 * @generated from message aiserver.v1.SelectionWithOrientation
 */
export class SelectionWithOrientation extends Message<SelectionWithOrientation> {
  /**
   * @generated from field: int32 selection_start_line_number = 1;
   */
  selectionStartLineNumber = 0;

  /**
   * @generated from field: int32 selection_start_column = 2;
   */
  selectionStartColumn = 0;

  /**
   * @generated from field: int32 position_line_number = 3;
   */
  positionLineNumber = 0;

  /**
   * @generated from field: int32 position_column = 4;
   */
  positionColumn = 0;

  constructor(data?: PartialMessage<SelectionWithOrientation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SelectionWithOrientation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "selection_start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "selection_start_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "position_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "position_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectionWithOrientation {
    return new SelectionWithOrientation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectionWithOrientation {
    return new SelectionWithOrientation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectionWithOrientation {
    return new SelectionWithOrientation().fromJsonString(jsonString, options);
  }

  static equals(a: SelectionWithOrientation | PlainMessage<SelectionWithOrientation> | undefined, b: SelectionWithOrientation | PlainMessage<SelectionWithOrientation> | undefined): boolean {
    return proto3.util.equals(SelectionWithOrientation, a, b);
  }
}

/**
 * aiserver.v1.SimplestRange
 *
 * @generated from message aiserver.v1.SimplestRange
 */
export class SimplestRange extends Message<SimplestRange> {
  /**
   * @generated from field: int32 start_line = 1;
   */
  startLine = 0;

  /**
   * @generated from field: int32 end_line_inclusive = 2;
   */
  endLineInclusive = 0;

  constructor(data?: PartialMessage<SimplestRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SimplestRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimplestRange {
    return new SimplestRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimplestRange {
    return new SimplestRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimplestRange {
    return new SimplestRange().fromJsonString(jsonString, options);
  }

  static equals(a: SimplestRange | PlainMessage<SimplestRange> | undefined, b: SimplestRange | PlainMessage<SimplestRange> | undefined): boolean {
    return proto3.util.equals(SimplestRange, a, b);
  }
}

/**
 * aiserver.v1.GitDiff
 *
 * @generated from message aiserver.v1.GitDiff
 */
export class GitDiff extends Message<GitDiff> {
  /**
   * @generated from field: repeated aiserver.v1.FileDiff diffs = 1;
   */
  diffs: FileDiff[] = [];

  /**
   * @generated from field: aiserver.v1.GitDiff.DiffType diff_type = 2;
   */
  diffType = GitDiff_DiffType.UNSPECIFIED;

  constructor(data?: PartialMessage<GitDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GitDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "diffs", kind: "message", T: FileDiff, repeated: true },
    { no: 2, name: "diff_type", kind: "enum", T: proto3.getEnumType(GitDiff_DiffType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitDiff {
    return new GitDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitDiff {
    return new GitDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitDiff {
    return new GitDiff().fromJsonString(jsonString, options);
  }

  static equals(a: GitDiff | PlainMessage<GitDiff> | undefined, b: GitDiff | PlainMessage<GitDiff> | undefined): boolean {
    return proto3.util.equals(GitDiff, a, b);
  }
}

/**
 * aiserver.v1.GitDiff.DiffType
 *
 * @generated from enum aiserver.v1.GitDiff.DiffType
 */
export enum GitDiff_DiffType {
  /**
   * @generated from enum value: DIFF_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DIFF_TYPE_DIFF_TO_HEAD = 1;
   */
  DIFF_TO_HEAD = 1,

  /**
   * @generated from enum value: DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN = 2;
   */
  DIFF_FROM_BRANCH_TO_MAIN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GitDiff_DiffType)
proto3.util.setEnumType(GitDiff_DiffType, "aiserver.v1.GitDiff.DiffType", [
  { no: 0, name: "DIFF_TYPE_UNSPECIFIED" },
  { no: 1, name: "DIFF_TYPE_DIFF_TO_HEAD" },
  { no: 2, name: "DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN" },
]);

/**
 * aiserver.v1.FileDiff
 *
 * @generated from message aiserver.v1.FileDiff
 */
export class FileDiff extends Message<FileDiff> {
  /**
   * @generated from field: int32 added = 4;
   */
  added = 0;

  /**
   * @generated from field: int32 removed = 5;
   */
  removed = 0;

  /**
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * @generated from field: string to = 2;
   */
  to = "";

  /**
   * @generated from field: repeated aiserver.v1.FileDiff.Chunk chunks = 3;
   */
  chunks: FileDiff_Chunk[] = [];

  /**
   * @generated from field: optional string before_file_contents = 6;
   */
  beforeFileContents?: string;

  /**
   * @generated from field: optional string after_file_contents = 7;
   */
  afterFileContents?: string;

  constructor(data?: PartialMessage<FileDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FileDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "added", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "removed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chunks", kind: "message", T: FileDiff_Chunk, repeated: true },
    { no: 6, name: "before_file_contents", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "after_file_contents", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileDiff {
    return new FileDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileDiff {
    return new FileDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileDiff {
    return new FileDiff().fromJsonString(jsonString, options);
  }

  static equals(a: FileDiff | PlainMessage<FileDiff> | undefined, b: FileDiff | PlainMessage<FileDiff> | undefined): boolean {
    return proto3.util.equals(FileDiff, a, b);
  }
}

/**
 * aiserver.v1.FileDiff.Chunk
 *
 * @generated from message aiserver.v1.FileDiff.Chunk
 */
export class FileDiff_Chunk extends Message<FileDiff_Chunk> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: repeated string lines = 2;
   */
  lines: string[] = [];

  /**
   * @generated from field: int32 old_start = 3;
   */
  oldStart = 0;

  /**
   * @generated from field: int32 old_lines = 4;
   */
  oldLines = 0;

  /**
   * @generated from field: int32 new_start = 5;
   */
  newStart = 0;

  /**
   * @generated from field: int32 new_lines = 6;
   */
  newLines = 0;

  constructor(data?: PartialMessage<FileDiff_Chunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FileDiff.Chunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "old_start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "old_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "new_start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "new_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileDiff_Chunk {
    return new FileDiff_Chunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileDiff_Chunk {
    return new FileDiff_Chunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileDiff_Chunk {
    return new FileDiff_Chunk().fromJsonString(jsonString, options);
  }

  static equals(a: FileDiff_Chunk | PlainMessage<FileDiff_Chunk> | undefined, b: FileDiff_Chunk | PlainMessage<FileDiff_Chunk> | undefined): boolean {
    return proto3.util.equals(FileDiff_Chunk, a, b);
  }
}

/**
 * aiserver.v1.SimpleRange
 *
 * @generated from message aiserver.v1.SimpleRange
 */
export class SimpleRange extends Message<SimpleRange> {
  /**
   * @generated from field: int32 start_line_number = 1;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 start_column = 2;
   */
  startColumn = 0;

  /**
   * @generated from field: int32 end_line_number_inclusive = 3;
   */
  endLineNumberInclusive = 0;

  /**
   * @generated from field: int32 end_column = 4;
   */
  endColumn = 0;

  constructor(data?: PartialMessage<SimpleRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SimpleRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "start_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_line_number_inclusive", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleRange {
    return new SimpleRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleRange {
    return new SimpleRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleRange {
    return new SimpleRange().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleRange | PlainMessage<SimpleRange> | undefined, b: SimpleRange | PlainMessage<SimpleRange> | undefined): boolean {
    return proto3.util.equals(SimpleRange, a, b);
  }
}

/**
 * aiserver.v1.LineRange
 *
 * @generated from message aiserver.v1.LineRange
 */
export class LineRange extends Message<LineRange> {
  /**
   * @generated from field: int32 start_line_number = 1;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 end_line_number_inclusive = 2;
   */
  endLineNumberInclusive = 0;

  constructor(data?: PartialMessage<LineRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LineRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_line_number_inclusive", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LineRange {
    return new LineRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LineRange {
    return new LineRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LineRange {
    return new LineRange().fromJsonString(jsonString, options);
  }

  static equals(a: LineRange | PlainMessage<LineRange> | undefined, b: LineRange | PlainMessage<LineRange> | undefined): boolean {
    return proto3.util.equals(LineRange, a, b);
  }
}

/**
 * aiserver.v1.CursorRange
 *
 * @generated from message aiserver.v1.CursorRange
 */
export class CursorRange extends Message<CursorRange> {
  /**
   * @generated from field: aiserver.v1.CursorPosition start_position = 1;
   */
  startPosition?: CursorPosition;

  /**
   * @generated from field: aiserver.v1.CursorPosition end_position = 2;
   */
  endPosition?: CursorPosition;

  constructor(data?: PartialMessage<CursorRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CursorRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_position", kind: "message", T: CursorPosition },
    { no: 2, name: "end_position", kind: "message", T: CursorPosition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CursorRange {
    return new CursorRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CursorRange {
    return new CursorRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CursorRange {
    return new CursorRange().fromJsonString(jsonString, options);
  }

  static equals(a: CursorRange | PlainMessage<CursorRange> | undefined, b: CursorRange | PlainMessage<CursorRange> | undefined): boolean {
    return proto3.util.equals(CursorRange, a, b);
  }
}

/**
 * aiserver.v1.DetailedLine
 *
 * @generated from message aiserver.v1.DetailedLine
 */
export class DetailedLine extends Message<DetailedLine> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: float line_number = 2;
   */
  lineNumber = 0;

  /**
   * @generated from field: bool is_signature = 3;
   */
  isSignature = false;

  constructor(data?: PartialMessage<DetailedLine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DetailedLine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line_number", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "is_signature", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DetailedLine {
    return new DetailedLine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DetailedLine {
    return new DetailedLine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DetailedLine {
    return new DetailedLine().fromJsonString(jsonString, options);
  }

  static equals(a: DetailedLine | PlainMessage<DetailedLine> | undefined, b: DetailedLine | PlainMessage<DetailedLine> | undefined): boolean {
    return proto3.util.equals(DetailedLine, a, b);
  }
}

/**
 * aiserver.v1.CodeBlock
 *
 * @generated from message aiserver.v1.CodeBlock
 */
export class CodeBlock extends Message<CodeBlock> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: optional string file_contents = 2;
   */
  fileContents?: string;

  /**
   * @generated from field: optional int32 file_contents_length = 9;
   */
  fileContentsLength?: number;

  /**
   * @generated from field: aiserver.v1.CursorRange range = 3;
   */
  range?: CursorRange;

  /**
   * @generated from field: string contents = 4;
   */
  contents = "";

  /**
   * @generated from field: aiserver.v1.CodeBlock.Signatures signatures = 5;
   */
  signatures?: CodeBlock_Signatures;

  /**
   * @generated from field: optional string override_contents = 6;
   */
  overrideContents?: string;

  /**
   * @generated from field: optional string original_contents = 7;
   */
  originalContents?: string;

  /**
   * @generated from field: repeated aiserver.v1.DetailedLine detailed_lines = 8;
   */
  detailedLines: DetailedLine[] = [];

  /**
   * @generated from field: aiserver.v1.FileGit file_git_context = 10;
   */
  fileGitContext?: FileGit;

  constructor(data?: PartialMessage<CodeBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CodeBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_contents", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "file_contents_length", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "range", kind: "message", T: CursorRange },
    { no: 4, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "signatures", kind: "message", T: CodeBlock_Signatures },
    { no: 6, name: "override_contents", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "original_contents", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "detailed_lines", kind: "message", T: DetailedLine, repeated: true },
    { no: 10, name: "file_git_context", kind: "message", T: FileGit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeBlock {
    return new CodeBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeBlock {
    return new CodeBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeBlock {
    return new CodeBlock().fromJsonString(jsonString, options);
  }

  static equals(a: CodeBlock | PlainMessage<CodeBlock> | undefined, b: CodeBlock | PlainMessage<CodeBlock> | undefined): boolean {
    return proto3.util.equals(CodeBlock, a, b);
  }
}

/**
 * aiserver.v1.CodeBlock.Signatures
 *
 * @generated from message aiserver.v1.CodeBlock.Signatures
 */
export class CodeBlock_Signatures extends Message<CodeBlock_Signatures> {
  /**
   * @generated from field: repeated aiserver.v1.CursorRange ranges = 1;
   */
  ranges: CursorRange[] = [];

  constructor(data?: PartialMessage<CodeBlock_Signatures>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CodeBlock.Signatures";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ranges", kind: "message", T: CursorRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeBlock_Signatures {
    return new CodeBlock_Signatures().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeBlock_Signatures {
    return new CodeBlock_Signatures().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeBlock_Signatures {
    return new CodeBlock_Signatures().fromJsonString(jsonString, options);
  }

  static equals(a: CodeBlock_Signatures | PlainMessage<CodeBlock_Signatures> | undefined, b: CodeBlock_Signatures | PlainMessage<CodeBlock_Signatures> | undefined): boolean {
    return proto3.util.equals(CodeBlock_Signatures, a, b);
  }
}

/**
 * aiserver.v1.GitCommit
 *
 * @generated from message aiserver.v1.GitCommit
 */
export class GitCommit extends Message<GitCommit> {
  /**
   * @generated from field: string commit = 1;
   */
  commit = "";

  /**
   * @generated from field: string author = 2;
   */
  author = "";

  /**
   * @generated from field: string date = 3;
   */
  date = "";

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<GitCommit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GitCommit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitCommit {
    return new GitCommit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitCommit {
    return new GitCommit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitCommit {
    return new GitCommit().fromJsonString(jsonString, options);
  }

  static equals(a: GitCommit | PlainMessage<GitCommit> | undefined, b: GitCommit | PlainMessage<GitCommit> | undefined): boolean {
    return proto3.util.equals(GitCommit, a, b);
  }
}

/**
 * aiserver.v1.FileGit
 *
 * @generated from message aiserver.v1.FileGit
 */
export class FileGit extends Message<FileGit> {
  /**
   * @generated from field: repeated aiserver.v1.GitCommit commits = 1;
   */
  commits: GitCommit[] = [];

  constructor(data?: PartialMessage<FileGit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FileGit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commits", kind: "message", T: GitCommit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileGit {
    return new FileGit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileGit {
    return new FileGit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileGit {
    return new FileGit().fromJsonString(jsonString, options);
  }

  static equals(a: FileGit | PlainMessage<FileGit> | undefined, b: FileGit | PlainMessage<FileGit> | undefined): boolean {
    return proto3.util.equals(FileGit, a, b);
  }
}

/**
 * aiserver.v1.File
 *
 * @generated from message aiserver.v1.File
 */
export class File extends Message<File> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string contents = 2;
   */
  contents = "";

  /**
   * @generated from field: aiserver.v1.FileGit file_git_context = 3;
   */
  fileGitContext?: FileGit;

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_git_context", kind: "message", T: FileGit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * aiserver.v1.Diagnostic
 *
 * @generated from message aiserver.v1.Diagnostic
 */
export class Diagnostic extends Message<Diagnostic> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: aiserver.v1.CursorRange range = 2;
   */
  range?: CursorRange;

  /**
   * @generated from field: aiserver.v1.Diagnostic.DiagnosticSeverity severity = 3;
   */
  severity = Diagnostic_DiagnosticSeverity.UNSPECIFIED;

  /**
   * @generated from field: repeated aiserver.v1.Diagnostic.RelatedInformation related_information = 4;
   */
  relatedInformation: Diagnostic_RelatedInformation[] = [];

  constructor(data?: PartialMessage<Diagnostic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.Diagnostic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: CursorRange },
    { no: 3, name: "severity", kind: "enum", T: proto3.getEnumType(Diagnostic_DiagnosticSeverity) },
    { no: 4, name: "related_information", kind: "message", T: Diagnostic_RelatedInformation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Diagnostic {
    return new Diagnostic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Diagnostic {
    return new Diagnostic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Diagnostic {
    return new Diagnostic().fromJsonString(jsonString, options);
  }

  static equals(a: Diagnostic | PlainMessage<Diagnostic> | undefined, b: Diagnostic | PlainMessage<Diagnostic> | undefined): boolean {
    return proto3.util.equals(Diagnostic, a, b);
  }
}

/**
 * aiserver.v1.Diagnostic.DiagnosticSeverity
 *
 * @generated from enum aiserver.v1.Diagnostic.DiagnosticSeverity
 */
export enum Diagnostic_DiagnosticSeverity {
  /**
   * @generated from enum value: DIAGNOSTIC_SEVERITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DIAGNOSTIC_SEVERITY_ERROR = 1;
   */
  ERROR = 1,

  /**
   * @generated from enum value: DIAGNOSTIC_SEVERITY_WARNING = 2;
   */
  WARNING = 2,

  /**
   * @generated from enum value: DIAGNOSTIC_SEVERITY_INFORMATION = 3;
   */
  INFORMATION = 3,

  /**
   * @generated from enum value: DIAGNOSTIC_SEVERITY_HINT = 4;
   */
  HINT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Diagnostic_DiagnosticSeverity)
proto3.util.setEnumType(Diagnostic_DiagnosticSeverity, "aiserver.v1.Diagnostic.DiagnosticSeverity", [
  { no: 0, name: "DIAGNOSTIC_SEVERITY_UNSPECIFIED" },
  { no: 1, name: "DIAGNOSTIC_SEVERITY_ERROR" },
  { no: 2, name: "DIAGNOSTIC_SEVERITY_WARNING" },
  { no: 3, name: "DIAGNOSTIC_SEVERITY_INFORMATION" },
  { no: 4, name: "DIAGNOSTIC_SEVERITY_HINT" },
]);

/**
 * aiserver.v1.Diagnostic.RelatedInformation
 *
 * @generated from message aiserver.v1.Diagnostic.RelatedInformation
 */
export class Diagnostic_RelatedInformation extends Message<Diagnostic_RelatedInformation> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: aiserver.v1.CursorRange range = 2;
   */
  range?: CursorRange;

  constructor(data?: PartialMessage<Diagnostic_RelatedInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.Diagnostic.RelatedInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: CursorRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Diagnostic_RelatedInformation {
    return new Diagnostic_RelatedInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Diagnostic_RelatedInformation {
    return new Diagnostic_RelatedInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Diagnostic_RelatedInformation {
    return new Diagnostic_RelatedInformation().fromJsonString(jsonString, options);
  }

  static equals(a: Diagnostic_RelatedInformation | PlainMessage<Diagnostic_RelatedInformation> | undefined, b: Diagnostic_RelatedInformation | PlainMessage<Diagnostic_RelatedInformation> | undefined): boolean {
    return proto3.util.equals(Diagnostic_RelatedInformation, a, b);
  }
}

/**
 * aiserver.v1.BM25Chunk
 *
 * @generated from message aiserver.v1.BM25Chunk
 */
export class BM25Chunk extends Message<BM25Chunk> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: aiserver.v1.SimplestRange range = 2;
   */
  range?: SimplestRange;

  /**
   * @generated from field: int32 score = 3;
   */
  score = 0;

  /**
   * @generated from field: string relative_path = 4;
   */
  relativePath = "";

  constructor(data?: PartialMessage<BM25Chunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BM25Chunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: SimplestRange },
    { no: 3, name: "score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BM25Chunk {
    return new BM25Chunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BM25Chunk {
    return new BM25Chunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BM25Chunk {
    return new BM25Chunk().fromJsonString(jsonString, options);
  }

  static equals(a: BM25Chunk | PlainMessage<BM25Chunk> | undefined, b: BM25Chunk | PlainMessage<BM25Chunk> | undefined): boolean {
    return proto3.util.equals(BM25Chunk, a, b);
  }
}

/**
 * aiserver.v1.CurrentFileInfo
 *
 * @generated from message aiserver.v1.CurrentFileInfo
 */
export class CurrentFileInfo extends Message<CurrentFileInfo> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string contents = 2;
   */
  contents = "";

  /**
   * @generated from field: bool rely_on_filesync = 18;
   */
  relyOnFilesync = false;

  /**
   * @generated from field: optional string sha_256_hash = 17;
   */
  sha256Hash?: string;

  /**
   * @generated from field: repeated aiserver.v1.CurrentFileInfo.NotebookCell cells = 16;
   */
  cells: CurrentFileInfo_NotebookCell[] = [];

  /**
   * @generated from field: repeated aiserver.v1.BM25Chunk top_chunks = 10;
   */
  topChunks: BM25Chunk[] = [];

  /**
   * @generated from field: int32 contents_start_at_line = 9;
   */
  contentsStartAtLine = 0;

  /**
   * @generated from field: aiserver.v1.CursorPosition cursor_position = 3;
   */
  cursorPosition?: CursorPosition;

  /**
   * @generated from field: repeated aiserver.v1.DataframeInfo dataframes = 4;
   */
  dataframes: DataframeInfo[] = [];

  /**
   * @generated from field: int32 total_number_of_lines = 8;
   */
  totalNumberOfLines = 0;

  /**
   * @generated from field: string language_id = 5;
   */
  languageId = "";

  /**
   * @generated from field: aiserver.v1.CursorRange selection = 6;
   */
  selection?: CursorRange;

  /**
   * @generated from field: optional int32 alternative_version_id = 11;
   */
  alternativeVersionId?: number;

  /**
   * @generated from field: repeated aiserver.v1.Diagnostic diagnostics = 7;
   */
  diagnostics: Diagnostic[] = [];

  /**
   * @generated from field: optional int32 file_version = 14;
   */
  fileVersion?: number;

  /**
   * @generated from field: repeated int32 cell_start_lines = 15;
   */
  cellStartLines: number[] = [];

  /**
   * @generated from field: string workspace_root_path = 19;
   */
  workspaceRootPath = "";

  /**
   * @generated from field: optional string line_ending = 20;
   */
  lineEnding?: string;

  constructor(data?: PartialMessage<CurrentFileInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CurrentFileInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "rely_on_filesync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "sha_256_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "cells", kind: "message", T: CurrentFileInfo_NotebookCell, repeated: true },
    { no: 10, name: "top_chunks", kind: "message", T: BM25Chunk, repeated: true },
    { no: 9, name: "contents_start_at_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor_position", kind: "message", T: CursorPosition },
    { no: 4, name: "dataframes", kind: "message", T: DataframeInfo, repeated: true },
    { no: 8, name: "total_number_of_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "language_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "selection", kind: "message", T: CursorRange },
    { no: 11, name: "alternative_version_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "diagnostics", kind: "message", T: Diagnostic, repeated: true },
    { no: 14, name: "file_version", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 15, name: "cell_start_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 19, name: "workspace_root_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "line_ending", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentFileInfo {
    return new CurrentFileInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentFileInfo {
    return new CurrentFileInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentFileInfo {
    return new CurrentFileInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentFileInfo | PlainMessage<CurrentFileInfo> | undefined, b: CurrentFileInfo | PlainMessage<CurrentFileInfo> | undefined): boolean {
    return proto3.util.equals(CurrentFileInfo, a, b);
  }
}

/**
 * aiserver.v1.CurrentFileInfo.NotebookCell
 *
 * @generated from message aiserver.v1.CurrentFileInfo.NotebookCell
 */
export class CurrentFileInfo_NotebookCell extends Message<CurrentFileInfo_NotebookCell> {
  constructor(data?: PartialMessage<CurrentFileInfo_NotebookCell>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CurrentFileInfo.NotebookCell";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentFileInfo_NotebookCell {
    return new CurrentFileInfo_NotebookCell().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentFileInfo_NotebookCell {
    return new CurrentFileInfo_NotebookCell().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentFileInfo_NotebookCell {
    return new CurrentFileInfo_NotebookCell().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentFileInfo_NotebookCell | PlainMessage<CurrentFileInfo_NotebookCell> | undefined, b: CurrentFileInfo_NotebookCell | PlainMessage<CurrentFileInfo_NotebookCell> | undefined): boolean {
    return proto3.util.equals(CurrentFileInfo_NotebookCell, a, b);
  }
}

/**
 * aiserver.v1.AzureState
 *
 * @generated from message aiserver.v1.AzureState
 */
export class AzureState extends Message<AzureState> {
  /**
   * @generated from field: string api_key = 1;
   */
  apiKey = "";

  /**
   * @generated from field: string base_url = 2;
   */
  baseUrl = "";

  /**
   * @generated from field: string deployment = 3;
   */
  deployment = "";

  /**
   * @generated from field: bool use_azure = 4;
   */
  useAzure = false;

  constructor(data?: PartialMessage<AzureState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AzureState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "use_azure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AzureState {
    return new AzureState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AzureState {
    return new AzureState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AzureState {
    return new AzureState().fromJsonString(jsonString, options);
  }

  static equals(a: AzureState | PlainMessage<AzureState> | undefined, b: AzureState | PlainMessage<AzureState> | undefined): boolean {
    return proto3.util.equals(AzureState, a, b);
  }
}

/**
 * aiserver.v1.BedrockState
 *
 * @generated from message aiserver.v1.BedrockState
 */
export class BedrockState extends Message<BedrockState> {
  /**
   * @generated from field: string access_key = 1;
   */
  accessKey = "";

  /**
   * @generated from field: string secret_key = 2;
   */
  secretKey = "";

  /**
   * @generated from field: string region = 3;
   */
  region = "";

  /**
   * @generated from field: bool use_bedrock = 4;
   */
  useBedrock = false;

  /**
   * @generated from field: string session_token = 5;
   */
  sessionToken = "";

  constructor(data?: PartialMessage<BedrockState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BedrockState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "use_bedrock", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BedrockState {
    return new BedrockState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BedrockState {
    return new BedrockState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BedrockState {
    return new BedrockState().fromJsonString(jsonString, options);
  }

  static equals(a: BedrockState | PlainMessage<BedrockState> | undefined, b: BedrockState | PlainMessage<BedrockState> | undefined): boolean {
    return proto3.util.equals(BedrockState, a, b);
  }
}

/**
 * aiserver.v1.ModelDetails
 *
 * @generated from message aiserver.v1.ModelDetails
 */
export class ModelDetails extends Message<ModelDetails> {
  /**
   * @generated from field: optional string model_name = 1;
   */
  modelName?: string;

  /**
   * @generated from field: optional string api_key = 2;
   */
  apiKey?: string;

  /**
   * @generated from field: optional bool enable_ghost_mode = 3;
   */
  enableGhostMode?: boolean;

  /**
   * @generated from field: optional aiserver.v1.AzureState azure_state = 4;
   */
  azureState?: AzureState;

  /**
   * @generated from field: optional bool enable_slow_pool = 5;
   */
  enableSlowPool?: boolean;

  /**
   * @generated from field: optional string openai_api_base_url = 6;
   */
  openaiApiBaseUrl?: string;

  /**
   * @generated from field: optional aiserver.v1.BedrockState bedrock_state = 7;
   */
  bedrockState?: BedrockState;

  /**
   * @generated from field: optional bool max_mode = 8;
   */
  maxMode?: boolean;

  constructor(data?: PartialMessage<ModelDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ModelDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "api_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "enable_ghost_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "azure_state", kind: "message", T: AzureState, opt: true },
    { no: 5, name: "enable_slow_pool", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "openai_api_base_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "bedrock_state", kind: "message", T: BedrockState, opt: true },
    { no: 8, name: "max_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelDetails {
    return new ModelDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelDetails {
    return new ModelDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelDetails {
    return new ModelDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ModelDetails | PlainMessage<ModelDetails> | undefined, b: ModelDetails | PlainMessage<ModelDetails> | undefined): boolean {
    return proto3.util.equals(ModelDetails, a, b);
  }
}

/**
 * aiserver.v1.DataframeInfo
 *
 * @generated from message aiserver.v1.DataframeInfo
 */
export class DataframeInfo extends Message<DataframeInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string shape = 2;
   */
  shape = "";

  /**
   * @generated from field: int32 data_dimensionality = 3;
   */
  dataDimensionality = 0;

  /**
   * @generated from field: repeated aiserver.v1.DataframeInfo.Column columns = 6;
   */
  columns: DataframeInfo_Column[] = [];

  /**
   * @generated from field: int32 row_count = 7;
   */
  rowCount = 0;

  /**
   * @generated from field: string index_column = 8;
   */
  indexColumn = "";

  constructor(data?: PartialMessage<DataframeInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DataframeInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shape", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data_dimensionality", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "columns", kind: "message", T: DataframeInfo_Column, repeated: true },
    { no: 7, name: "row_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "index_column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataframeInfo {
    return new DataframeInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataframeInfo {
    return new DataframeInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataframeInfo {
    return new DataframeInfo().fromJsonString(jsonString, options);
  }

  static equals(a: DataframeInfo | PlainMessage<DataframeInfo> | undefined, b: DataframeInfo | PlainMessage<DataframeInfo> | undefined): boolean {
    return proto3.util.equals(DataframeInfo, a, b);
  }
}

/**
 * aiserver.v1.DataframeInfo.Column
 *
 * @generated from message aiserver.v1.DataframeInfo.Column
 */
export class DataframeInfo_Column extends Message<DataframeInfo_Column> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<DataframeInfo_Column>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DataframeInfo.Column";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataframeInfo_Column {
    return new DataframeInfo_Column().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataframeInfo_Column {
    return new DataframeInfo_Column().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataframeInfo_Column {
    return new DataframeInfo_Column().fromJsonString(jsonString, options);
  }

  static equals(a: DataframeInfo_Column | PlainMessage<DataframeInfo_Column> | undefined, b: DataframeInfo_Column | PlainMessage<DataframeInfo_Column> | undefined): boolean {
    return proto3.util.equals(DataframeInfo_Column, a, b);
  }
}

/**
 * aiserver.v1.LinterError
 *
 * @generated from message aiserver.v1.LinterError
 */
export class LinterError extends Message<LinterError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: aiserver.v1.CursorRange range = 2;
   */
  range?: CursorRange;

  /**
   * @generated from field: optional string source = 3;
   */
  source?: string;

  /**
   * @generated from field: repeated aiserver.v1.Diagnostic.RelatedInformation related_information = 4;
   */
  relatedInformation: Diagnostic_RelatedInformation[] = [];

  /**
   * @generated from field: optional aiserver.v1.Diagnostic.DiagnosticSeverity severity = 5;
   */
  severity?: Diagnostic_DiagnosticSeverity;

  constructor(data?: PartialMessage<LinterError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LinterError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: CursorRange },
    { no: 3, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "related_information", kind: "message", T: Diagnostic_RelatedInformation, repeated: true },
    { no: 5, name: "severity", kind: "enum", T: proto3.getEnumType(Diagnostic_DiagnosticSeverity), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinterError {
    return new LinterError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinterError {
    return new LinterError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinterError {
    return new LinterError().fromJsonString(jsonString, options);
  }

  static equals(a: LinterError | PlainMessage<LinterError> | undefined, b: LinterError | PlainMessage<LinterError> | undefined): boolean {
    return proto3.util.equals(LinterError, a, b);
  }
}

/**
 * aiserver.v1.LinterErrors
 *
 * @generated from message aiserver.v1.LinterErrors
 */
export class LinterErrors extends Message<LinterErrors> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated aiserver.v1.LinterError errors = 2;
   */
  errors: LinterError[] = [];

  /**
   * @generated from field: string file_contents = 3;
   */
  fileContents = "";

  constructor(data?: PartialMessage<LinterErrors>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LinterErrors";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "errors", kind: "message", T: LinterError, repeated: true },
    { no: 3, name: "file_contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinterErrors {
    return new LinterErrors().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinterErrors {
    return new LinterErrors().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinterErrors {
    return new LinterErrors().fromJsonString(jsonString, options);
  }

  static equals(a: LinterErrors | PlainMessage<LinterErrors> | undefined, b: LinterErrors | PlainMessage<LinterErrors> | undefined): boolean {
    return proto3.util.equals(LinterErrors, a, b);
  }
}

/**
 * aiserver.v1.LinterErrorsWithoutFileContents
 *
 * @generated from message aiserver.v1.LinterErrorsWithoutFileContents
 */
export class LinterErrorsWithoutFileContents extends Message<LinterErrorsWithoutFileContents> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated aiserver.v1.LinterError errors = 2;
   */
  errors: LinterError[] = [];

  constructor(data?: PartialMessage<LinterErrorsWithoutFileContents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LinterErrorsWithoutFileContents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "errors", kind: "message", T: LinterError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinterErrorsWithoutFileContents {
    return new LinterErrorsWithoutFileContents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinterErrorsWithoutFileContents {
    return new LinterErrorsWithoutFileContents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinterErrorsWithoutFileContents {
    return new LinterErrorsWithoutFileContents().fromJsonString(jsonString, options);
  }

  static equals(a: LinterErrorsWithoutFileContents | PlainMessage<LinterErrorsWithoutFileContents> | undefined, b: LinterErrorsWithoutFileContents | PlainMessage<LinterErrorsWithoutFileContents> | undefined): boolean {
    return proto3.util.equals(LinterErrorsWithoutFileContents, a, b);
  }
}

/**
 * aiserver.v1.CursorRule
 *
 * @generated from message aiserver.v1.CursorRule
 */
export class CursorRule extends Message<CursorRule> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: optional string body = 3;
   */
  body?: string;

  /**
   * @generated from field: optional bool is_from_glob = 4;
   */
  isFromGlob?: boolean;

  /**
   * @generated from field: optional bool always_apply = 5;
   */
  alwaysApply?: boolean;

  /**
   * @generated from field: optional bool attach_to_background_agents = 6;
   */
  attachToBackgroundAgents?: boolean;

  constructor(data?: PartialMessage<CursorRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CursorRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "is_from_glob", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "always_apply", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "attach_to_background_agents", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CursorRule {
    return new CursorRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CursorRule {
    return new CursorRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CursorRule {
    return new CursorRule().fromJsonString(jsonString, options);
  }

  static equals(a: CursorRule | PlainMessage<CursorRule> | undefined, b: CursorRule | PlainMessage<CursorRule> | undefined): boolean {
    return proto3.util.equals(CursorRule, a, b);
  }
}

/**
 * aiserver.v1.ProjectLayout
 *
 * @generated from message aiserver.v1.ProjectLayout
 */
export class ProjectLayout extends Message<ProjectLayout> {
  /**
   * @generated from field: string root_path = 1;
   */
  rootPath = "";

  /**
   * @generated from field: aiserver.v1.ProjectLayoutDirectoryContent content = 2;
   */
  content?: ProjectLayoutDirectoryContent;

  constructor(data?: PartialMessage<ProjectLayout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ProjectLayout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "root_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "message", T: ProjectLayoutDirectoryContent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectLayout {
    return new ProjectLayout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectLayout {
    return new ProjectLayout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectLayout {
    return new ProjectLayout().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectLayout | PlainMessage<ProjectLayout> | undefined, b: ProjectLayout | PlainMessage<ProjectLayout> | undefined): boolean {
    return proto3.util.equals(ProjectLayout, a, b);
  }
}

/**
 * aiserver.v1.ProjectLayoutDirectoryContent
 *
 * @generated from message aiserver.v1.ProjectLayoutDirectoryContent
 */
export class ProjectLayoutDirectoryContent extends Message<ProjectLayoutDirectoryContent> {
  /**
   * @generated from field: repeated aiserver.v1.ProjectLayoutDirectory directories = 1;
   */
  directories: ProjectLayoutDirectory[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ProjectLayoutFile files = 2;
   */
  files: ProjectLayoutFile[] = [];

  /**
   * @generated from field: optional int32 total_files = 3;
   */
  totalFiles?: number;

  /**
   * @generated from field: optional int32 total_subfolders = 4;
   */
  totalSubfolders?: number;

  /**
   * @generated from field: repeated aiserver.v1.ProjectLayoutFile hidden_files = 5;
   */
  hiddenFiles: ProjectLayoutFile[] = [];

  constructor(data?: PartialMessage<ProjectLayoutDirectoryContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ProjectLayoutDirectoryContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "directories", kind: "message", T: ProjectLayoutDirectory, repeated: true },
    { no: 2, name: "files", kind: "message", T: ProjectLayoutFile, repeated: true },
    { no: 3, name: "total_files", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "total_subfolders", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "hidden_files", kind: "message", T: ProjectLayoutFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectLayoutDirectoryContent {
    return new ProjectLayoutDirectoryContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectLayoutDirectoryContent {
    return new ProjectLayoutDirectoryContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectLayoutDirectoryContent {
    return new ProjectLayoutDirectoryContent().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectLayoutDirectoryContent | PlainMessage<ProjectLayoutDirectoryContent> | undefined, b: ProjectLayoutDirectoryContent | PlainMessage<ProjectLayoutDirectoryContent> | undefined): boolean {
    return proto3.util.equals(ProjectLayoutDirectoryContent, a, b);
  }
}

/**
 * aiserver.v1.ProjectLayoutDirectory
 *
 * @generated from message aiserver.v1.ProjectLayoutDirectory
 */
export class ProjectLayoutDirectory extends Message<ProjectLayoutDirectory> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: aiserver.v1.ProjectLayoutDirectoryContent content = 2;
   */
  content?: ProjectLayoutDirectoryContent;

  constructor(data?: PartialMessage<ProjectLayoutDirectory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ProjectLayoutDirectory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "message", T: ProjectLayoutDirectoryContent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectLayoutDirectory {
    return new ProjectLayoutDirectory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectLayoutDirectory {
    return new ProjectLayoutDirectory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectLayoutDirectory {
    return new ProjectLayoutDirectory().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectLayoutDirectory | PlainMessage<ProjectLayoutDirectory> | undefined, b: ProjectLayoutDirectory | PlainMessage<ProjectLayoutDirectory> | undefined): boolean {
    return proto3.util.equals(ProjectLayoutDirectory, a, b);
  }
}

/**
 * aiserver.v1.ProjectLayoutFile
 *
 * @generated from message aiserver.v1.ProjectLayoutFile
 */
export class ProjectLayoutFile extends Message<ProjectLayoutFile> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ProjectLayoutFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ProjectLayoutFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectLayoutFile {
    return new ProjectLayoutFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectLayoutFile {
    return new ProjectLayoutFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectLayoutFile {
    return new ProjectLayoutFile().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectLayoutFile | PlainMessage<ProjectLayoutFile> | undefined, b: ProjectLayoutFile | PlainMessage<ProjectLayoutFile> | undefined): boolean {
    return proto3.util.equals(ProjectLayoutFile, a, b);
  }
}

/**
 * aiserver.v1.ImageProto
 *
 * @generated from message aiserver.v1.ImageProto
 */
export class ImageProto extends Message<ImageProto> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: aiserver.v1.ImageProto.Dimension dimension = 2;
   */
  dimension?: ImageProto_Dimension;

  /**
   * @generated from field: string uuid = 3;
   */
  uuid = "";

  /**
   * @generated from field: optional string task_specific_description = 4;
   */
  taskSpecificDescription?: string;

  constructor(data?: PartialMessage<ImageProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ImageProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "dimension", kind: "message", T: ImageProto_Dimension },
    { no: 3, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "task_specific_description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImageProto {
    return new ImageProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImageProto {
    return new ImageProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImageProto {
    return new ImageProto().fromJsonString(jsonString, options);
  }

  static equals(a: ImageProto | PlainMessage<ImageProto> | undefined, b: ImageProto | PlainMessage<ImageProto> | undefined): boolean {
    return proto3.util.equals(ImageProto, a, b);
  }
}

/**
 * aiserver.v1.ImageProto.Dimension
 *
 * @generated from message aiserver.v1.ImageProto.Dimension
 */
export class ImageProto_Dimension extends Message<ImageProto_Dimension> {
  /**
   * @generated from field: int32 width = 1;
   */
  width = 0;

  /**
   * @generated from field: int32 height = 2;
   */
  height = 0;

  constructor(data?: PartialMessage<ImageProto_Dimension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ImageProto.Dimension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImageProto_Dimension {
    return new ImageProto_Dimension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImageProto_Dimension {
    return new ImageProto_Dimension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImageProto_Dimension {
    return new ImageProto_Dimension().fromJsonString(jsonString, options);
  }

  static equals(a: ImageProto_Dimension | PlainMessage<ImageProto_Dimension> | undefined, b: ImageProto_Dimension | PlainMessage<ImageProto_Dimension> | undefined): boolean {
    return proto3.util.equals(ImageProto_Dimension, a, b);
  }
}

/**
 * aiserver.v1.ComposerExternalLink
 *
 * @generated from message aiserver.v1.ComposerExternalLink
 */
export class ComposerExternalLink extends Message<ComposerExternalLink> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  constructor(data?: PartialMessage<ComposerExternalLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerExternalLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerExternalLink {
    return new ComposerExternalLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerExternalLink {
    return new ComposerExternalLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerExternalLink {
    return new ComposerExternalLink().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerExternalLink | PlainMessage<ComposerExternalLink> | undefined, b: ComposerExternalLink | PlainMessage<ComposerExternalLink> | undefined): boolean {
    return proto3.util.equals(ComposerExternalLink, a, b);
  }
}

/**
 * aiserver.v1.CodeChunk
 *
 * @generated from message aiserver.v1.CodeChunk
 */
export class CodeChunk extends Message<CodeChunk> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: int32 start_line_number = 2;
   */
  startLineNumber = 0;

  /**
   * @generated from field: repeated string lines = 3;
   */
  lines: string[] = [];

  /**
   * @generated from field: optional aiserver.v1.CodeChunk.SummarizationStrategy summarization_strategy = 4;
   */
  summarizationStrategy?: CodeChunk_SummarizationStrategy;

  /**
   * @generated from field: string language_identifier = 5;
   */
  languageIdentifier = "";

  /**
   * @generated from field: optional aiserver.v1.CodeChunk.Intent intent = 6;
   */
  intent?: CodeChunk_Intent;

  /**
   * @generated from field: optional bool is_final_version = 7;
   */
  isFinalVersion?: boolean;

  /**
   * @generated from field: optional bool is_first_version = 8;
   */
  isFirstVersion?: boolean;

  constructor(data?: PartialMessage<CodeChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CodeChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "summarization_strategy", kind: "enum", T: proto3.getEnumType(CodeChunk_SummarizationStrategy), opt: true },
    { no: 5, name: "language_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "intent", kind: "enum", T: proto3.getEnumType(CodeChunk_Intent), opt: true },
    { no: 7, name: "is_final_version", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "is_first_version", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeChunk {
    return new CodeChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeChunk {
    return new CodeChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeChunk {
    return new CodeChunk().fromJsonString(jsonString, options);
  }

  static equals(a: CodeChunk | PlainMessage<CodeChunk> | undefined, b: CodeChunk | PlainMessage<CodeChunk> | undefined): boolean {
    return proto3.util.equals(CodeChunk, a, b);
  }
}

/**
 * aiserver.v1.CodeChunk.Intent
 *
 * @generated from enum aiserver.v1.CodeChunk.Intent
 */
export enum CodeChunk_Intent {
  /**
   * @generated from enum value: INTENT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTENT_COMPOSER_FILE = 1;
   */
  COMPOSER_FILE = 1,

  /**
   * @generated from enum value: INTENT_COMPRESSED_COMPOSER_FILE = 2;
   */
  COMPRESSED_COMPOSER_FILE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CodeChunk_Intent)
proto3.util.setEnumType(CodeChunk_Intent, "aiserver.v1.CodeChunk.Intent", [
  { no: 0, name: "INTENT_UNSPECIFIED" },
  { no: 1, name: "INTENT_COMPOSER_FILE" },
  { no: 2, name: "INTENT_COMPRESSED_COMPOSER_FILE" },
]);

/**
 * aiserver.v1.CodeChunk.SummarizationStrategy
 *
 * @generated from enum aiserver.v1.CodeChunk.SummarizationStrategy
 */
export enum CodeChunk_SummarizationStrategy {
  /**
   * @generated from enum value: SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED = 0;
   */
  NONE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SUMMARIZATION_STRATEGY_SUMMARIZED = 1;
   */
  SUMMARIZED = 1,

  /**
   * @generated from enum value: SUMMARIZATION_STRATEGY_EMBEDDED = 2;
   */
  EMBEDDED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CodeChunk_SummarizationStrategy)
proto3.util.setEnumType(CodeChunk_SummarizationStrategy, "aiserver.v1.CodeChunk.SummarizationStrategy", [
  { no: 0, name: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED" },
  { no: 1, name: "SUMMARIZATION_STRATEGY_SUMMARIZED" },
  { no: 2, name: "SUMMARIZATION_STRATEGY_EMBEDDED" },
]);

/**
 * aiserver.v1.RCPCallFrame
 *
 * @generated from message aiserver.v1.RCPCallFrame
 */
export class RCPCallFrame extends Message<RCPCallFrame> {
  /**
   * @generated from field: optional string function_name = 1;
   */
  functionName?: string;

  /**
   * @generated from field: optional string url = 2;
   */
  url?: string;

  /**
   * @generated from field: optional int32 line_number = 3;
   */
  lineNumber?: number;

  /**
   * @generated from field: optional int32 column_number = 4;
   */
  columnNumber?: number;

  constructor(data?: PartialMessage<RCPCallFrame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RCPCallFrame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "function_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "column_number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RCPCallFrame {
    return new RCPCallFrame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RCPCallFrame {
    return new RCPCallFrame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RCPCallFrame {
    return new RCPCallFrame().fromJsonString(jsonString, options);
  }

  static equals(a: RCPCallFrame | PlainMessage<RCPCallFrame> | undefined, b: RCPCallFrame | PlainMessage<RCPCallFrame> | undefined): boolean {
    return proto3.util.equals(RCPCallFrame, a, b);
  }
}

/**
 * aiserver.v1.RCPStackTrace
 *
 * @generated from message aiserver.v1.RCPStackTrace
 */
export class RCPStackTrace extends Message<RCPStackTrace> {
  /**
   * @generated from field: repeated aiserver.v1.RCPCallFrame call_frames = 1;
   */
  callFrames: RCPCallFrame[] = [];

  /**
   * @generated from field: optional string raw_stack_trace = 2;
   */
  rawStackTrace?: string;

  constructor(data?: PartialMessage<RCPStackTrace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RCPStackTrace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_frames", kind: "message", T: RCPCallFrame, repeated: true },
    { no: 2, name: "raw_stack_trace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RCPStackTrace {
    return new RCPStackTrace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RCPStackTrace {
    return new RCPStackTrace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RCPStackTrace {
    return new RCPStackTrace().fromJsonString(jsonString, options);
  }

  static equals(a: RCPStackTrace | PlainMessage<RCPStackTrace> | undefined, b: RCPStackTrace | PlainMessage<RCPStackTrace> | undefined): boolean {
    return proto3.util.equals(RCPStackTrace, a, b);
  }
}

/**
 * aiserver.v1.RCPLogEntry
 *
 * @generated from message aiserver.v1.RCPLogEntry
 */
export class RCPLogEntry extends Message<RCPLogEntry> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: double timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string level = 3;
   */
  level = "";

  /**
   * @generated from field: string client_name = 4;
   */
  clientName = "";

  /**
   * @generated from field: string session_id = 5;
   */
  sessionId = "";

  /**
   * @generated from field: optional aiserver.v1.RCPStackTrace stack_trace = 6;
   */
  stackTrace?: RCPStackTrace;

  /**
   * @generated from field: optional string object_data_json = 7;
   */
  objectDataJson?: string;

  constructor(data?: PartialMessage<RCPLogEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RCPLogEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "level", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "client_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "stack_trace", kind: "message", T: RCPStackTrace, opt: true },
    { no: 7, name: "object_data_json", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RCPLogEntry {
    return new RCPLogEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RCPLogEntry {
    return new RCPLogEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RCPLogEntry {
    return new RCPLogEntry().fromJsonString(jsonString, options);
  }

  static equals(a: RCPLogEntry | PlainMessage<RCPLogEntry> | undefined, b: RCPLogEntry | PlainMessage<RCPLogEntry> | undefined): boolean {
    return proto3.util.equals(RCPLogEntry, a, b);
  }
}

/**
 * aiserver.v1.RCPUIElementPicked
 *
 * @generated from message aiserver.v1.RCPUIElementPicked
 */
export class RCPUIElementPicked extends Message<RCPUIElementPicked> {
  /**
   * @generated from field: string element = 1;
   */
  element = "";

  /**
   * @generated from field: string xpath = 2;
   */
  xpath = "";

  /**
   * @generated from field: string text_content = 3;
   */
  textContent = "";

  /**
   * @generated from field: string extra = 4;
   */
  extra = "";

  /**
   * @generated from field: optional string component = 5;
   */
  component?: string;

  /**
   * @generated from field: optional string component_props_json = 6;
   */
  componentPropsJson?: string;

  constructor(data?: PartialMessage<RCPUIElementPicked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RCPUIElementPicked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "element", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "xpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "text_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extra", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "component", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "component_props_json", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RCPUIElementPicked {
    return new RCPUIElementPicked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RCPUIElementPicked {
    return new RCPUIElementPicked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RCPUIElementPicked {
    return new RCPUIElementPicked().fromJsonString(jsonString, options);
  }

  static equals(a: RCPUIElementPicked | PlainMessage<RCPUIElementPicked> | undefined, b: RCPUIElementPicked | PlainMessage<RCPUIElementPicked> | undefined): boolean {
    return proto3.util.equals(RCPUIElementPicked, a, b);
  }
}

/**
 * aiserver.v1.LspSubgraphPosition
 *
 * @generated from message aiserver.v1.LspSubgraphPosition
 */
export class LspSubgraphPosition extends Message<LspSubgraphPosition> {
  /**
   * @generated from field: int32 line = 1;
   */
  line = 0;

  /**
   * @generated from field: int32 character = 2;
   */
  character = 0;

  constructor(data?: PartialMessage<LspSubgraphPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LspSubgraphPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "character", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LspSubgraphPosition {
    return new LspSubgraphPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LspSubgraphPosition {
    return new LspSubgraphPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LspSubgraphPosition {
    return new LspSubgraphPosition().fromJsonString(jsonString, options);
  }

  static equals(a: LspSubgraphPosition | PlainMessage<LspSubgraphPosition> | undefined, b: LspSubgraphPosition | PlainMessage<LspSubgraphPosition> | undefined): boolean {
    return proto3.util.equals(LspSubgraphPosition, a, b);
  }
}

/**
 * aiserver.v1.LspSubgraphRange
 *
 * @generated from message aiserver.v1.LspSubgraphRange
 */
export class LspSubgraphRange extends Message<LspSubgraphRange> {
  /**
   * @generated from field: int32 start_line = 1;
   */
  startLine = 0;

  /**
   * @generated from field: int32 start_character = 2;
   */
  startCharacter = 0;

  /**
   * @generated from field: int32 end_line = 3;
   */
  endLine = 0;

  /**
   * @generated from field: int32 end_character = 4;
   */
  endCharacter = 0;

  constructor(data?: PartialMessage<LspSubgraphRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LspSubgraphRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "start_character", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end_character", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LspSubgraphRange {
    return new LspSubgraphRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LspSubgraphRange {
    return new LspSubgraphRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LspSubgraphRange {
    return new LspSubgraphRange().fromJsonString(jsonString, options);
  }

  static equals(a: LspSubgraphRange | PlainMessage<LspSubgraphRange> | undefined, b: LspSubgraphRange | PlainMessage<LspSubgraphRange> | undefined): boolean {
    return proto3.util.equals(LspSubgraphRange, a, b);
  }
}

/**
 * aiserver.v1.LspSubgraphContextItem
 *
 * @generated from message aiserver.v1.LspSubgraphContextItem
 */
export class LspSubgraphContextItem extends Message<LspSubgraphContextItem> {
  /**
   * @generated from field: optional string uri = 1;
   */
  uri?: string;

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  /**
   * @generated from field: optional aiserver.v1.LspSubgraphRange range = 4;
   */
  range?: LspSubgraphRange;

  constructor(data?: PartialMessage<LspSubgraphContextItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LspSubgraphContextItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "range", kind: "message", T: LspSubgraphRange, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LspSubgraphContextItem {
    return new LspSubgraphContextItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LspSubgraphContextItem {
    return new LspSubgraphContextItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LspSubgraphContextItem {
    return new LspSubgraphContextItem().fromJsonString(jsonString, options);
  }

  static equals(a: LspSubgraphContextItem | PlainMessage<LspSubgraphContextItem> | undefined, b: LspSubgraphContextItem | PlainMessage<LspSubgraphContextItem> | undefined): boolean {
    return proto3.util.equals(LspSubgraphContextItem, a, b);
  }
}

/**
 * aiserver.v1.LspSubgraphFullContext
 *
 * @generated from message aiserver.v1.LspSubgraphFullContext
 */
export class LspSubgraphFullContext extends Message<LspSubgraphFullContext> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * @generated from field: string symbol_name = 2;
   */
  symbolName = "";

  /**
   * @generated from field: repeated aiserver.v1.LspSubgraphPosition positions = 3;
   */
  positions: LspSubgraphPosition[] = [];

  /**
   * @generated from field: repeated aiserver.v1.LspSubgraphContextItem context_items = 4;
   */
  contextItems: LspSubgraphContextItem[] = [];

  /**
   * @generated from field: float score = 5;
   */
  score = 0;

  constructor(data?: PartialMessage<LspSubgraphFullContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LspSubgraphFullContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "positions", kind: "message", T: LspSubgraphPosition, repeated: true },
    { no: 4, name: "context_items", kind: "message", T: LspSubgraphContextItem, repeated: true },
    { no: 5, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LspSubgraphFullContext {
    return new LspSubgraphFullContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LspSubgraphFullContext {
    return new LspSubgraphFullContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LspSubgraphFullContext {
    return new LspSubgraphFullContext().fromJsonString(jsonString, options);
  }

  static equals(a: LspSubgraphFullContext | PlainMessage<LspSubgraphFullContext> | undefined, b: LspSubgraphFullContext | PlainMessage<LspSubgraphFullContext> | undefined): boolean {
    return proto3.util.equals(LspSubgraphFullContext, a, b);
  }
}

/**
 * aiserver.v1.FilesyncUpdateWithModelVersion
 *
 * @generated from message aiserver.v1.FilesyncUpdateWithModelVersion
 */
export class FilesyncUpdateWithModelVersion extends Message<FilesyncUpdateWithModelVersion> {
  /**
   * @generated from field: int32 model_version = 1;
   */
  modelVersion = 0;

  /**
   * @generated from field: string relative_workspace_path = 2;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated aiserver.v1.SingleUpdateRequest updates = 3;
   */
  updates: SingleUpdateRequest[] = [];

  /**
   * @generated from field: int32 expected_file_length = 4;
   */
  expectedFileLength = 0;

  constructor(data?: PartialMessage<FilesyncUpdateWithModelVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FilesyncUpdateWithModelVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updates", kind: "message", T: SingleUpdateRequest, repeated: true },
    { no: 4, name: "expected_file_length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilesyncUpdateWithModelVersion {
    return new FilesyncUpdateWithModelVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilesyncUpdateWithModelVersion {
    return new FilesyncUpdateWithModelVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilesyncUpdateWithModelVersion {
    return new FilesyncUpdateWithModelVersion().fromJsonString(jsonString, options);
  }

  static equals(a: FilesyncUpdateWithModelVersion | PlainMessage<FilesyncUpdateWithModelVersion> | undefined, b: FilesyncUpdateWithModelVersion | PlainMessage<FilesyncUpdateWithModelVersion> | undefined): boolean {
    return proto3.util.equals(FilesyncUpdateWithModelVersion, a, b);
  }
}

/**
 * aiserver.v1.SingleUpdateRequest
 *
 * @generated from message aiserver.v1.SingleUpdateRequest
 */
export class SingleUpdateRequest extends Message<SingleUpdateRequest> {
  /**
   * @generated from field: int32 start_position = 1;
   */
  startPosition = 0;

  /**
   * @generated from field: int32 end_position = 2;
   */
  endPosition = 0;

  /**
   * @generated from field: int32 change_length = 3;
   */
  changeLength = 0;

  /**
   * @generated from field: string replaced_string = 4;
   */
  replacedString = "";

  /**
   * @generated from field: aiserver.v1.SimpleRange range = 5;
   */
  range?: SimpleRange;

  constructor(data?: PartialMessage<SingleUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SingleUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "change_length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "replaced_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "range", kind: "message", T: SimpleRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SingleUpdateRequest {
    return new SingleUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SingleUpdateRequest {
    return new SingleUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SingleUpdateRequest {
    return new SingleUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SingleUpdateRequest | PlainMessage<SingleUpdateRequest> | undefined, b: SingleUpdateRequest | PlainMessage<SingleUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SingleUpdateRequest, a, b);
  }
}

/**
 * aiserver.v1.BugLocation
 *
 * @generated from message aiserver.v1.BugLocation
 */
export class BugLocation extends Message<BugLocation> {
  /**
   * @generated from field: string file = 1;
   */
  file = "";

  /**
   * @generated from field: int32 start_line = 2;
   */
  startLine = 0;

  /**
   * @generated from field: int32 end_line = 3;
   */
  endLine = 0;

  /**
   * @generated from field: repeated string code_lines = 4;
   */
  codeLines: string[] = [];

  constructor(data?: PartialMessage<BugLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "code_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugLocation {
    return new BugLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugLocation {
    return new BugLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugLocation {
    return new BugLocation().fromJsonString(jsonString, options);
  }

  static equals(a: BugLocation | PlainMessage<BugLocation> | undefined, b: BugLocation | PlainMessage<BugLocation> | undefined): boolean {
    return proto3.util.equals(BugLocation, a, b);
  }
}

/**
 * aiserver.v1.BugReport
 *
 * @generated from message aiserver.v1.BugReport
 */
export class BugReport extends Message<BugReport> {
  /**
   * @generated from field: repeated aiserver.v1.BugLocation locations = 1;
   */
  locations: BugLocation[] = [];

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: optional float confidence = 4;
   */
  confidence?: number;

  /**
   * @generated from field: optional string category = 5;
   */
  category?: string;

  constructor(data?: PartialMessage<BugReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locations", kind: "message", T: BugLocation, repeated: true },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "confidence", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 5, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugReport {
    return new BugReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugReport {
    return new BugReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugReport {
    return new BugReport().fromJsonString(jsonString, options);
  }

  static equals(a: BugReport | PlainMessage<BugReport> | undefined, b: BugReport | PlainMessage<BugReport> | undefined): boolean {
    return proto3.util.equals(BugReport, a, b);
  }
}

/**
 * aiserver.v1.BugReports
 *
 * @generated from message aiserver.v1.BugReports
 */
export class BugReports extends Message<BugReports> {
  /**
   * @generated from field: repeated aiserver.v1.BugReport bug_reports = 1;
   */
  bugReports: BugReport[] = [];

  constructor(data?: PartialMessage<BugReports>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugReports";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_reports", kind: "message", T: BugReport, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugReports {
    return new BugReports().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugReports {
    return new BugReports().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugReports {
    return new BugReports().fromJsonString(jsonString, options);
  }

  static equals(a: BugReports | PlainMessage<BugReports> | undefined, b: BugReports | PlainMessage<BugReports> | undefined): boolean {
    return proto3.util.equals(BugReports, a, b);
  }
}

/**
 * aiserver.v1.CppIntentInfo
 *
 * @generated from message aiserver.v1.CppIntentInfo
 */
export class CppIntentInfo extends Message<CppIntentInfo> {
  /**
   * @generated from field: string source = 1;
   */
  source = "";

  constructor(data?: PartialMessage<CppIntentInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppIntentInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppIntentInfo {
    return new CppIntentInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppIntentInfo {
    return new CppIntentInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppIntentInfo {
    return new CppIntentInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CppIntentInfo | PlainMessage<CppIntentInfo> | undefined, b: CppIntentInfo | PlainMessage<CppIntentInfo> | undefined): boolean {
    return proto3.util.equals(CppIntentInfo, a, b);
  }
}

/**
 * aiserver.v1.LspSuggestion
 *
 * @generated from message aiserver.v1.LspSuggestion
 */
export class LspSuggestion extends Message<LspSuggestion> {
  /**
   * @generated from field: string label = 1;
   */
  label = "";

  constructor(data?: PartialMessage<LspSuggestion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LspSuggestion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LspSuggestion {
    return new LspSuggestion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LspSuggestion {
    return new LspSuggestion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LspSuggestion {
    return new LspSuggestion().fromJsonString(jsonString, options);
  }

  static equals(a: LspSuggestion | PlainMessage<LspSuggestion> | undefined, b: LspSuggestion | PlainMessage<LspSuggestion> | undefined): boolean {
    return proto3.util.equals(LspSuggestion, a, b);
  }
}

/**
 * aiserver.v1.LspSuggestedItems
 *
 * @generated from message aiserver.v1.LspSuggestedItems
 */
export class LspSuggestedItems extends Message<LspSuggestedItems> {
  /**
   * @generated from field: repeated aiserver.v1.LspSuggestion suggestions = 1;
   */
  suggestions: LspSuggestion[] = [];

  constructor(data?: PartialMessage<LspSuggestedItems>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LspSuggestedItems";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestions", kind: "message", T: LspSuggestion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LspSuggestedItems {
    return new LspSuggestedItems().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LspSuggestedItems {
    return new LspSuggestedItems().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LspSuggestedItems {
    return new LspSuggestedItems().fromJsonString(jsonString, options);
  }

  static equals(a: LspSuggestedItems | PlainMessage<LspSuggestedItems> | undefined, b: LspSuggestedItems | PlainMessage<LspSuggestedItems> | undefined): boolean {
    return proto3.util.equals(LspSuggestedItems, a, b);
  }
}

/**
 * aiserver.v1.StreamCppRequest
 *
 * @generated from message aiserver.v1.StreamCppRequest
 */
export class StreamCppRequest extends Message<StreamCppRequest> {
  /**
   * @generated from field: aiserver.v1.CurrentFileInfo current_file = 1;
   */
  currentFile?: CurrentFileInfo;

  /**
   * @generated from field: repeated string diff_history = 2;
   */
  diffHistory: string[] = [];

  /**
   * @generated from field: optional string model_name = 3;
   */
  modelName?: string;

  /**
   * @generated from field: optional aiserver.v1.LinterErrors linter_errors = 4;
   */
  linterErrors?: LinterErrors;

  /**
   * @generated from field: repeated aiserver.v1.CppContextItem context_items = 13;
   */
  contextItems: CppContextItem[] = [];

  /**
   * @generated from field: repeated string diff_history_keys = 5;
   */
  diffHistoryKeys: string[] = [];

  /**
   * @generated from field: optional bool give_debug_output = 6;
   */
  giveDebugOutput?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.CppFileDiffHistory file_diff_histories = 7;
   */
  fileDiffHistories: CppFileDiffHistory[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CppFileDiffHistory merged_diff_histories = 8;
   */
  mergedDiffHistories: CppFileDiffHistory[] = [];

  /**
   * @generated from field: repeated aiserver.v1.BlockDiffPatch block_diff_patches = 9;
   */
  blockDiffPatches: BlockDiffPatch[] = [];

  /**
   * @generated from field: optional bool is_nightly = 10;
   */
  isNightly?: boolean;

  /**
   * @generated from field: optional bool is_debug = 11;
   */
  isDebug?: boolean;

  /**
   * @generated from field: optional bool immediately_ack = 12;
   */
  immediatelyAck?: boolean;

  /**
   * @generated from field: optional bool enable_more_context = 17;
   */
  enableMoreContext?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.CppParameterHint parameter_hints = 14;
   */
  parameterHints: CppParameterHint[] = [];

  /**
   * @generated from field: repeated aiserver.v1.LspSubgraphFullContext lsp_contexts = 15;
   */
  lspContexts: LspSubgraphFullContext[] = [];

  /**
   * @generated from field: optional aiserver.v1.CppIntentInfo cpp_intent_info = 16;
   */
  cppIntentInfo?: CppIntentInfo;

  /**
   * @generated from field: optional string workspace_id = 18;
   */
  workspaceId?: string;

  /**
   * @generated from field: repeated aiserver.v1.AdditionalFile additional_files = 19;
   */
  additionalFiles: AdditionalFile[] = [];

  /**
   * @generated from field: optional aiserver.v1.StreamCppRequest.ControlToken control_token = 20;
   */
  controlToken?: StreamCppRequest_ControlToken;

  /**
   * @generated from field: optional double client_time = 21;
   */
  clientTime?: number;

  /**
   * @generated from field: repeated aiserver.v1.FilesyncUpdateWithModelVersion filesync_updates = 22;
   */
  filesyncUpdates: FilesyncUpdateWithModelVersion[] = [];

  /**
   * @generated from field: double time_since_request_start = 23;
   */
  timeSinceRequestStart = 0;

  /**
   * @generated from field: double time_at_request_send = 24;
   */
  timeAtRequestSend = 0;

  /**
   * @generated from field: optional double client_timezone_offset = 25;
   */
  clientTimezoneOffset?: number;

  /**
   * @generated from field: optional aiserver.v1.LspSuggestedItems lsp_suggested_items = 26;
   */
  lspSuggestedItems?: LspSuggestedItems;

  /**
   * @generated from field: optional bool supports_cpt = 27;
   */
  supportsCpt?: boolean;

  /**
   * @generated from field: optional bool supports_crlf_cpt = 28;
   */
  supportsCrlfCpt?: boolean;

  constructor(data?: PartialMessage<StreamCppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamCppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_file", kind: "message", T: CurrentFileInfo },
    { no: 2, name: "diff_history", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "linter_errors", kind: "message", T: LinterErrors, opt: true },
    { no: 13, name: "context_items", kind: "message", T: CppContextItem, repeated: true },
    { no: 5, name: "diff_history_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "give_debug_output", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "file_diff_histories", kind: "message", T: CppFileDiffHistory, repeated: true },
    { no: 8, name: "merged_diff_histories", kind: "message", T: CppFileDiffHistory, repeated: true },
    { no: 9, name: "block_diff_patches", kind: "message", T: BlockDiffPatch, repeated: true },
    { no: 10, name: "is_nightly", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "is_debug", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "immediately_ack", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 17, name: "enable_more_context", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 14, name: "parameter_hints", kind: "message", T: CppParameterHint, repeated: true },
    { no: 15, name: "lsp_contexts", kind: "message", T: LspSubgraphFullContext, repeated: true },
    { no: 16, name: "cpp_intent_info", kind: "message", T: CppIntentInfo, opt: true },
    { no: 18, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 19, name: "additional_files", kind: "message", T: AdditionalFile, repeated: true },
    { no: 20, name: "control_token", kind: "enum", T: proto3.getEnumType(StreamCppRequest_ControlToken), opt: true },
    { no: 21, name: "client_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 22, name: "filesync_updates", kind: "message", T: FilesyncUpdateWithModelVersion, repeated: true },
    { no: 23, name: "time_since_request_start", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 24, name: "time_at_request_send", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 25, name: "client_timezone_offset", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 26, name: "lsp_suggested_items", kind: "message", T: LspSuggestedItems, opt: true },
    { no: 27, name: "supports_cpt", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 28, name: "supports_crlf_cpt", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamCppRequest {
    return new StreamCppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamCppRequest {
    return new StreamCppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamCppRequest {
    return new StreamCppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamCppRequest | PlainMessage<StreamCppRequest> | undefined, b: StreamCppRequest | PlainMessage<StreamCppRequest> | undefined): boolean {
    return proto3.util.equals(StreamCppRequest, a, b);
  }
}

/**
 * aiserver.v1.StreamCppRequest.ControlToken
 *
 * @generated from enum aiserver.v1.StreamCppRequest.ControlToken
 */
export enum StreamCppRequest_ControlToken {
  /**
   * @generated from enum value: CONTROL_TOKEN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CONTROL_TOKEN_QUIET = 1;
   */
  QUIET = 1,

  /**
   * @generated from enum value: CONTROL_TOKEN_LOUD = 2;
   */
  LOUD = 2,

  /**
   * @generated from enum value: CONTROL_TOKEN_OP = 3;
   */
  OP = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(StreamCppRequest_ControlToken)
proto3.util.setEnumType(StreamCppRequest_ControlToken, "aiserver.v1.StreamCppRequest.ControlToken", [
  { no: 0, name: "CONTROL_TOKEN_UNSPECIFIED" },
  { no: 1, name: "CONTROL_TOKEN_QUIET" },
  { no: 2, name: "CONTROL_TOKEN_LOUD" },
  { no: 3, name: "CONTROL_TOKEN_OP" },
]);

/**
 * aiserver.v1.StreamCppResponse
 *
 * @generated from message aiserver.v1.StreamCppResponse
 */
export class StreamCppResponse extends Message<StreamCppResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: optional int32 suggestion_start_line = 2;
   */
  suggestionStartLine?: number;

  /**
   * @generated from field: optional int32 suggestion_confidence = 3;
   */
  suggestionConfidence?: number;

  /**
   * @generated from field: optional bool done_stream = 4;
   */
  doneStream?: boolean;

  /**
   * @generated from field: optional string debug_model_output = 5;
   */
  debugModelOutput?: string;

  /**
   * @generated from field: optional string debug_model_input = 6;
   */
  debugModelInput?: string;

  /**
   * @generated from field: optional string debug_stream_time = 7;
   */
  debugStreamTime?: string;

  /**
   * @generated from field: optional string debug_total_time = 8;
   */
  debugTotalTime?: string;

  /**
   * @generated from field: optional string debug_ttft_time = 9;
   */
  debugTtftTime?: string;

  /**
   * @generated from field: optional string debug_server_timing = 10;
   */
  debugServerTiming?: string;

  /**
   * @generated from field: optional aiserver.v1.LineRange range_to_replace = 11;
   */
  rangeToReplace?: LineRange;

  /**
   * @generated from field: optional aiserver.v1.StreamCppResponse.CursorPredictionTarget cursor_prediction_target = 12;
   */
  cursorPredictionTarget?: StreamCppResponse_CursorPredictionTarget;

  /**
   * @generated from field: optional bool done_edit = 13;
   */
  doneEdit?: boolean;

  /**
   * @generated from field: optional aiserver.v1.StreamCppResponse.ModelInfo model_info = 14;
   */
  modelInfo?: StreamCppResponse_ModelInfo;

  /**
   * @generated from field: optional bool begin_edit = 15;
   */
  beginEdit?: boolean;

  /**
   * @generated from field: optional bool should_remove_leading_eol = 16;
   */
  shouldRemoveLeadingEol?: boolean;

  /**
   * @generated from field: optional string binding_id = 17;
   */
  bindingId?: string;

  constructor(data?: PartialMessage<StreamCppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamCppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "suggestion_start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "suggestion_confidence", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "done_stream", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "debug_model_output", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "debug_model_input", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "debug_stream_time", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "debug_total_time", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "debug_ttft_time", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "debug_server_timing", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "range_to_replace", kind: "message", T: LineRange, opt: true },
    { no: 12, name: "cursor_prediction_target", kind: "message", T: StreamCppResponse_CursorPredictionTarget, opt: true },
    { no: 13, name: "done_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 14, name: "model_info", kind: "message", T: StreamCppResponse_ModelInfo, opt: true },
    { no: 15, name: "begin_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 16, name: "should_remove_leading_eol", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 17, name: "binding_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamCppResponse {
    return new StreamCppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamCppResponse {
    return new StreamCppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamCppResponse {
    return new StreamCppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamCppResponse | PlainMessage<StreamCppResponse> | undefined, b: StreamCppResponse | PlainMessage<StreamCppResponse> | undefined): boolean {
    return proto3.util.equals(StreamCppResponse, a, b);
  }
}

/**
 * aiserver.v1.StreamCppResponse.CursorPredictionTarget
 *
 * @generated from message aiserver.v1.StreamCppResponse.CursorPredictionTarget
 */
export class StreamCppResponse_CursorPredictionTarget extends Message<StreamCppResponse_CursorPredictionTarget> {
  /**
   * @generated from field: string relative_path = 1;
   */
  relativePath = "";

  /**
   * @generated from field: int32 line_number_one_indexed = 2;
   */
  lineNumberOneIndexed = 0;

  /**
   * @generated from field: string expected_content = 3;
   */
  expectedContent = "";

  /**
   * @generated from field: bool should_retrigger_cpp = 4;
   */
  shouldRetriggerCpp = false;

  constructor(data?: PartialMessage<StreamCppResponse_CursorPredictionTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamCppResponse.CursorPredictionTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line_number_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "expected_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "should_retrigger_cpp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamCppResponse_CursorPredictionTarget {
    return new StreamCppResponse_CursorPredictionTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamCppResponse_CursorPredictionTarget {
    return new StreamCppResponse_CursorPredictionTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamCppResponse_CursorPredictionTarget {
    return new StreamCppResponse_CursorPredictionTarget().fromJsonString(jsonString, options);
  }

  static equals(a: StreamCppResponse_CursorPredictionTarget | PlainMessage<StreamCppResponse_CursorPredictionTarget> | undefined, b: StreamCppResponse_CursorPredictionTarget | PlainMessage<StreamCppResponse_CursorPredictionTarget> | undefined): boolean {
    return proto3.util.equals(StreamCppResponse_CursorPredictionTarget, a, b);
  }
}

/**
 * aiserver.v1.StreamCppResponse.ModelInfo
 *
 * @generated from message aiserver.v1.StreamCppResponse.ModelInfo
 */
export class StreamCppResponse_ModelInfo extends Message<StreamCppResponse_ModelInfo> {
  /**
   * @generated from field: bool is_fused_cursor_prediction_model = 1;
   */
  isFusedCursorPredictionModel = false;

  /**
   * @generated from field: bool is_multidiff_model = 2;
   */
  isMultidiffModel = false;

  constructor(data?: PartialMessage<StreamCppResponse_ModelInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamCppResponse.ModelInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_fused_cursor_prediction_model", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "is_multidiff_model", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamCppResponse_ModelInfo {
    return new StreamCppResponse_ModelInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamCppResponse_ModelInfo {
    return new StreamCppResponse_ModelInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamCppResponse_ModelInfo {
    return new StreamCppResponse_ModelInfo().fromJsonString(jsonString, options);
  }

  static equals(a: StreamCppResponse_ModelInfo | PlainMessage<StreamCppResponse_ModelInfo> | undefined, b: StreamCppResponse_ModelInfo | PlainMessage<StreamCppResponse_ModelInfo> | undefined): boolean {
    return proto3.util.equals(StreamCppResponse_ModelInfo, a, b);
  }
}

/**
 * aiserver.v1.CppConfigRequest
 *
 * @generated from message aiserver.v1.CppConfigRequest
 */
export class CppConfigRequest extends Message<CppConfigRequest> {
  /**
   * @generated from field: optional bool is_nightly = 1;
   */
  isNightly?: boolean;

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: optional bool supports_cpt = 3;
   */
  supportsCpt?: boolean;

  constructor(data?: PartialMessage<CppConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_nightly", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supports_cpt", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppConfigRequest {
    return new CppConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppConfigRequest {
    return new CppConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppConfigRequest {
    return new CppConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CppConfigRequest | PlainMessage<CppConfigRequest> | undefined, b: CppConfigRequest | PlainMessage<CppConfigRequest> | undefined): boolean {
    return proto3.util.equals(CppConfigRequest, a, b);
  }
}

/**
 * aiserver.v1.CppConfigResponse
 *
 * @generated from message aiserver.v1.CppConfigResponse
 */
export class CppConfigResponse extends Message<CppConfigResponse> {
  /**
   * @generated from field: optional int32 above_radius = 1;
   */
  aboveRadius?: number;

  /**
   * @generated from field: optional int32 below_radius = 2;
   */
  belowRadius?: number;

  /**
   * @generated from field: optional aiserver.v1.CppConfigResponse.MergeBehavior merge_behavior = 4;
   */
  mergeBehavior?: CppConfigResponse_MergeBehavior;

  /**
   * @generated from field: optional bool is_on = 5;
   */
  isOn?: boolean;

  /**
   * @generated from field: optional bool is_ghost_text = 6;
   */
  isGhostText?: boolean;

  /**
   * @generated from field: optional bool should_let_user_enable_cpp_even_if_not_pro = 7;
   */
  shouldLetUserEnableCppEvenIfNotPro?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.CppConfigResponse.Heuristic heuristics = 8;
   */
  heuristics: CppConfigResponse_Heuristic[] = [];

  /**
   * @generated from field: repeated string exclude_recently_viewed_files_patterns = 9;
   */
  excludeRecentlyViewedFilesPatterns: string[] = [];

  /**
   * @generated from field: bool enable_rvf_tracking = 10;
   */
  enableRvfTracking = false;

  /**
   * @generated from field: int32 global_debounce_duration_millis = 11;
   */
  globalDebounceDurationMillis = 0;

  /**
   * @generated from field: int32 client_debounce_duration_millis = 12;
   */
  clientDebounceDurationMillis = 0;

  /**
   * @generated from field: string cpp_url = 13;
   */
  cppUrl = "";

  /**
   * @generated from field: bool use_whitespace_diff_history = 14;
   */
  useWhitespaceDiffHistory = false;

  /**
   * @generated from field: aiserver.v1.CppConfigResponse.ImportPredictionConfig import_prediction_config = 15;
   */
  importPredictionConfig?: CppConfigResponse_ImportPredictionConfig;

  /**
   * @generated from field: bool enable_filesync_debounce_skipping = 16;
   */
  enableFilesyncDebounceSkipping = false;

  /**
   * @generated from field: float check_filesync_hash_percent = 17;
   */
  checkFilesyncHashPercent = 0;

  /**
   * @generated from field: string geo_cpp_backend_url = 18;
   */
  geoCppBackendUrl = "";

  /**
   * @generated from field: optional aiserver.v1.CppConfigResponse.RecentlyRejectedEditThresholds recently_rejected_edit_thresholds = 19;
   */
  recentlyRejectedEditThresholds?: CppConfigResponse_RecentlyRejectedEditThresholds;

  /**
   * @generated from field: bool is_fused_cursor_prediction_model = 20;
   */
  isFusedCursorPredictionModel = false;

  /**
   * @generated from field: bool include_unchanged_lines = 21;
   */
  includeUnchangedLines = false;

  /**
   * @generated from field: bool should_fetch_rvf_text = 22;
   */
  shouldFetchRvfText = false;

  /**
   * @generated from field: optional int32 max_number_of_cleared_suggestions_since_last_accept = 23;
   */
  maxNumberOfClearedSuggestionsSinceLastAccept?: number;

  /**
   * @generated from field: optional aiserver.v1.CppConfigResponse.SuggestionHintConfig suggestion_hint_config = 24;
   */
  suggestionHintConfig?: CppConfigResponse_SuggestionHintConfig;

  constructor(data?: PartialMessage<CppConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "above_radius", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "below_radius", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "merge_behavior", kind: "message", T: CppConfigResponse_MergeBehavior, opt: true },
    { no: 5, name: "is_on", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "is_ghost_text", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "should_let_user_enable_cpp_even_if_not_pro", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "heuristics", kind: "enum", T: proto3.getEnumType(CppConfigResponse_Heuristic), repeated: true },
    { no: 9, name: "exclude_recently_viewed_files_patterns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "enable_rvf_tracking", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "global_debounce_duration_millis", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "client_debounce_duration_millis", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "cpp_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "use_whitespace_diff_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "import_prediction_config", kind: "message", T: CppConfigResponse_ImportPredictionConfig },
    { no: 16, name: "enable_filesync_debounce_skipping", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "check_filesync_hash_percent", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 18, name: "geo_cpp_backend_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "recently_rejected_edit_thresholds", kind: "message", T: CppConfigResponse_RecentlyRejectedEditThresholds, opt: true },
    { no: 20, name: "is_fused_cursor_prediction_model", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "include_unchanged_lines", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "should_fetch_rvf_text", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "max_number_of_cleared_suggestions_since_last_accept", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 24, name: "suggestion_hint_config", kind: "message", T: CppConfigResponse_SuggestionHintConfig, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppConfigResponse {
    return new CppConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppConfigResponse {
    return new CppConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppConfigResponse {
    return new CppConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CppConfigResponse | PlainMessage<CppConfigResponse> | undefined, b: CppConfigResponse | PlainMessage<CppConfigResponse> | undefined): boolean {
    return proto3.util.equals(CppConfigResponse, a, b);
  }
}

/**
 * aiserver.v1.CppConfigResponse.Heuristic
 *
 * @generated from enum aiserver.v1.CppConfigResponse.Heuristic
 */
export enum CppConfigResponse_Heuristic {
  /**
   * @generated from enum value: HEURISTIC_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: HEURISTIC_LOTS_OF_ADDED_TEXT = 1;
   */
  LOTS_OF_ADDED_TEXT = 1,

  /**
   * @generated from enum value: HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION = 2;
   */
  DUPLICATING_LINE_AFTER_SUGGESTION = 2,

  /**
   * @generated from enum value: HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION = 3;
   */
  DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION = 3,

  /**
   * @generated from enum value: HEURISTIC_REVERTING_USER_CHANGE = 4;
   */
  REVERTING_USER_CHANGE = 4,

  /**
   * @generated from enum value: HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED = 5;
   */
  OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED = 5,

  /**
   * @generated from enum value: HEURISTIC_SUGGESTING_RECENTLY_REJECTED_EDIT = 6;
   */
  SUGGESTING_RECENTLY_REJECTED_EDIT = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(CppConfigResponse_Heuristic)
proto3.util.setEnumType(CppConfigResponse_Heuristic, "aiserver.v1.CppConfigResponse.Heuristic", [
  { no: 0, name: "HEURISTIC_UNSPECIFIED" },
  { no: 1, name: "HEURISTIC_LOTS_OF_ADDED_TEXT" },
  { no: 2, name: "HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION" },
  { no: 3, name: "HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION" },
  { no: 4, name: "HEURISTIC_REVERTING_USER_CHANGE" },
  { no: 5, name: "HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED" },
  { no: 6, name: "HEURISTIC_SUGGESTING_RECENTLY_REJECTED_EDIT" },
]);

/**
 * aiserver.v1.CppConfigResponse.ImportPredictionConfig
 *
 * @generated from message aiserver.v1.CppConfigResponse.ImportPredictionConfig
 */
export class CppConfigResponse_ImportPredictionConfig extends Message<CppConfigResponse_ImportPredictionConfig> {
  /**
   * @generated from field: bool is_disabled_by_backend = 1;
   */
  isDisabledByBackend = false;

  /**
   * @generated from field: bool should_turn_on_automatically = 2;
   */
  shouldTurnOnAutomatically = false;

  /**
   * @generated from field: bool python_enabled = 3;
   */
  pythonEnabled = false;

  constructor(data?: PartialMessage<CppConfigResponse_ImportPredictionConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppConfigResponse.ImportPredictionConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_disabled_by_backend", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "should_turn_on_automatically", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "python_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppConfigResponse_ImportPredictionConfig {
    return new CppConfigResponse_ImportPredictionConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppConfigResponse_ImportPredictionConfig {
    return new CppConfigResponse_ImportPredictionConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppConfigResponse_ImportPredictionConfig {
    return new CppConfigResponse_ImportPredictionConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CppConfigResponse_ImportPredictionConfig | PlainMessage<CppConfigResponse_ImportPredictionConfig> | undefined, b: CppConfigResponse_ImportPredictionConfig | PlainMessage<CppConfigResponse_ImportPredictionConfig> | undefined): boolean {
    return proto3.util.equals(CppConfigResponse_ImportPredictionConfig, a, b);
  }
}

/**
 * aiserver.v1.CppConfigResponse.MergeBehavior
 *
 * @generated from message aiserver.v1.CppConfigResponse.MergeBehavior
 */
export class CppConfigResponse_MergeBehavior extends Message<CppConfigResponse_MergeBehavior> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: optional int32 limit = 2;
   */
  limit?: number;

  /**
   * @generated from field: optional int32 radius = 3;
   */
  radius?: number;

  constructor(data?: PartialMessage<CppConfigResponse_MergeBehavior>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppConfigResponse.MergeBehavior";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "radius", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppConfigResponse_MergeBehavior {
    return new CppConfigResponse_MergeBehavior().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppConfigResponse_MergeBehavior {
    return new CppConfigResponse_MergeBehavior().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppConfigResponse_MergeBehavior {
    return new CppConfigResponse_MergeBehavior().fromJsonString(jsonString, options);
  }

  static equals(a: CppConfigResponse_MergeBehavior | PlainMessage<CppConfigResponse_MergeBehavior> | undefined, b: CppConfigResponse_MergeBehavior | PlainMessage<CppConfigResponse_MergeBehavior> | undefined): boolean {
    return proto3.util.equals(CppConfigResponse_MergeBehavior, a, b);
  }
}

/**
 * aiserver.v1.CppConfigResponse.RecentlyRejectedEditThresholds
 *
 * @generated from message aiserver.v1.CppConfigResponse.RecentlyRejectedEditThresholds
 */
export class CppConfigResponse_RecentlyRejectedEditThresholds extends Message<CppConfigResponse_RecentlyRejectedEditThresholds> {
  /**
   * @generated from field: int32 hard_reject_threshold = 1;
   */
  hardRejectThreshold = 0;

  /**
   * @generated from field: int32 soft_reject_threshold = 2;
   */
  softRejectThreshold = 0;

  constructor(data?: PartialMessage<CppConfigResponse_RecentlyRejectedEditThresholds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppConfigResponse.RecentlyRejectedEditThresholds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hard_reject_threshold", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "soft_reject_threshold", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppConfigResponse_RecentlyRejectedEditThresholds {
    return new CppConfigResponse_RecentlyRejectedEditThresholds().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppConfigResponse_RecentlyRejectedEditThresholds {
    return new CppConfigResponse_RecentlyRejectedEditThresholds().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppConfigResponse_RecentlyRejectedEditThresholds {
    return new CppConfigResponse_RecentlyRejectedEditThresholds().fromJsonString(jsonString, options);
  }

  static equals(a: CppConfigResponse_RecentlyRejectedEditThresholds | PlainMessage<CppConfigResponse_RecentlyRejectedEditThresholds> | undefined, b: CppConfigResponse_RecentlyRejectedEditThresholds | PlainMessage<CppConfigResponse_RecentlyRejectedEditThresholds> | undefined): boolean {
    return proto3.util.equals(CppConfigResponse_RecentlyRejectedEditThresholds, a, b);
  }
}

/**
 * aiserver.v1.CppConfigResponse.SuggestionHintConfig
 *
 * @generated from message aiserver.v1.CppConfigResponse.SuggestionHintConfig
 */
export class CppConfigResponse_SuggestionHintConfig extends Message<CppConfigResponse_SuggestionHintConfig> {
  /**
   * @generated from field: repeated string important_lsp_extensions = 1;
   */
  importantLspExtensions: string[] = [];

  /**
   * @generated from field: repeated string enabled_for_path_extensions = 2;
   */
  enabledForPathExtensions: string[] = [];

  constructor(data?: PartialMessage<CppConfigResponse_SuggestionHintConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppConfigResponse.SuggestionHintConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "important_lsp_extensions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "enabled_for_path_extensions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppConfigResponse_SuggestionHintConfig {
    return new CppConfigResponse_SuggestionHintConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppConfigResponse_SuggestionHintConfig {
    return new CppConfigResponse_SuggestionHintConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppConfigResponse_SuggestionHintConfig {
    return new CppConfigResponse_SuggestionHintConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CppConfigResponse_SuggestionHintConfig | PlainMessage<CppConfigResponse_SuggestionHintConfig> | undefined, b: CppConfigResponse_SuggestionHintConfig | PlainMessage<CppConfigResponse_SuggestionHintConfig> | undefined): boolean {
    return proto3.util.equals(CppConfigResponse_SuggestionHintConfig, a, b);
  }
}

/**
 * aiserver.v1.SuggestedEdit
 *
 * @generated from message aiserver.v1.SuggestedEdit
 */
export class SuggestedEdit extends Message<SuggestedEdit> {
  /**
   * @generated from field: aiserver.v1.SimpleRange edit_range = 1;
   */
  editRange?: SimpleRange;

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<SuggestedEdit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SuggestedEdit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "edit_range", kind: "message", T: SimpleRange },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedEdit {
    return new SuggestedEdit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedEdit {
    return new SuggestedEdit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedEdit {
    return new SuggestedEdit().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedEdit | PlainMessage<SuggestedEdit> | undefined, b: SuggestedEdit | PlainMessage<SuggestedEdit> | undefined): boolean {
    return proto3.util.equals(SuggestedEdit, a, b);
  }
}

/**
 * aiserver.v1.GetCppEditClassificationRequest
 *
 * @generated from message aiserver.v1.GetCppEditClassificationRequest
 */
export class GetCppEditClassificationRequest extends Message<GetCppEditClassificationRequest> {
  /**
   * @generated from field: aiserver.v1.StreamCppRequest cpp_request = 1;
   */
  cppRequest?: StreamCppRequest;

  /**
   * @generated from field: repeated aiserver.v1.SuggestedEdit suggested_edits = 25;
   */
  suggestedEdits: SuggestedEdit[] = [];

  /**
   * @generated from field: bool marker_touches_green = 26;
   */
  markerTouchesGreen = false;

  /**
   * @generated from field: string current_file_contents_for_linter_errors = 27;
   */
  currentFileContentsForLinterErrors = "";

  constructor(data?: PartialMessage<GetCppEditClassificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetCppEditClassificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpp_request", kind: "message", T: StreamCppRequest },
    { no: 25, name: "suggested_edits", kind: "message", T: SuggestedEdit, repeated: true },
    { no: 26, name: "marker_touches_green", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 27, name: "current_file_contents_for_linter_errors", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCppEditClassificationRequest {
    return new GetCppEditClassificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCppEditClassificationRequest {
    return new GetCppEditClassificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCppEditClassificationRequest {
    return new GetCppEditClassificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCppEditClassificationRequest | PlainMessage<GetCppEditClassificationRequest> | undefined, b: GetCppEditClassificationRequest | PlainMessage<GetCppEditClassificationRequest> | undefined): boolean {
    return proto3.util.equals(GetCppEditClassificationRequest, a, b);
  }
}

/**
 * aiserver.v1.GetCppEditClassificationResponse
 *
 * @generated from message aiserver.v1.GetCppEditClassificationResponse
 */
export class GetCppEditClassificationResponse extends Message<GetCppEditClassificationResponse> {
  /**
   * @generated from field: repeated aiserver.v1.GetCppEditClassificationResponse.ScoredEdit scored_edits = 1;
   */
  scoredEdits: GetCppEditClassificationResponse_ScoredEdit[] = [];

  /**
   * @generated from field: aiserver.v1.GetCppEditClassificationResponse.ScoredEdit noop_edit = 2;
   */
  noopEdit?: GetCppEditClassificationResponse_ScoredEdit;

  /**
   * @generated from field: optional bool should_noop = 3;
   */
  shouldNoop?: boolean;

  /**
   * @generated from field: aiserver.v1.GetCppEditClassificationResponse.ScoredEdit generation_edit = 4;
   */
  generationEdit?: GetCppEditClassificationResponse_ScoredEdit;

  constructor(data?: PartialMessage<GetCppEditClassificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetCppEditClassificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scored_edits", kind: "message", T: GetCppEditClassificationResponse_ScoredEdit, repeated: true },
    { no: 2, name: "noop_edit", kind: "message", T: GetCppEditClassificationResponse_ScoredEdit },
    { no: 3, name: "should_noop", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "generation_edit", kind: "message", T: GetCppEditClassificationResponse_ScoredEdit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCppEditClassificationResponse {
    return new GetCppEditClassificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCppEditClassificationResponse {
    return new GetCppEditClassificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCppEditClassificationResponse {
    return new GetCppEditClassificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCppEditClassificationResponse | PlainMessage<GetCppEditClassificationResponse> | undefined, b: GetCppEditClassificationResponse | PlainMessage<GetCppEditClassificationResponse> | undefined): boolean {
    return proto3.util.equals(GetCppEditClassificationResponse, a, b);
  }
}

/**
 * aiserver.v1.GetCppEditClassificationResponse.LogProbs
 *
 * @generated from message aiserver.v1.GetCppEditClassificationResponse.LogProbs
 */
export class GetCppEditClassificationResponse_LogProbs extends Message<GetCppEditClassificationResponse_LogProbs> {
  /**
   * @generated from field: repeated string tokens = 1;
   */
  tokens: string[] = [];

  /**
   * @generated from field: repeated double token_logprobs = 2;
   */
  tokenLogprobs: number[] = [];

  constructor(data?: PartialMessage<GetCppEditClassificationResponse_LogProbs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetCppEditClassificationResponse.LogProbs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "token_logprobs", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCppEditClassificationResponse_LogProbs {
    return new GetCppEditClassificationResponse_LogProbs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCppEditClassificationResponse_LogProbs {
    return new GetCppEditClassificationResponse_LogProbs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCppEditClassificationResponse_LogProbs {
    return new GetCppEditClassificationResponse_LogProbs().fromJsonString(jsonString, options);
  }

  static equals(a: GetCppEditClassificationResponse_LogProbs | PlainMessage<GetCppEditClassificationResponse_LogProbs> | undefined, b: GetCppEditClassificationResponse_LogProbs | PlainMessage<GetCppEditClassificationResponse_LogProbs> | undefined): boolean {
    return proto3.util.equals(GetCppEditClassificationResponse_LogProbs, a, b);
  }
}

/**
 * aiserver.v1.GetCppEditClassificationResponse.ScoredEdit
 *
 * @generated from message aiserver.v1.GetCppEditClassificationResponse.ScoredEdit
 */
export class GetCppEditClassificationResponse_ScoredEdit extends Message<GetCppEditClassificationResponse_ScoredEdit> {
  /**
   * @generated from field: aiserver.v1.SuggestedEdit edit = 1;
   */
  edit?: SuggestedEdit;

  /**
   * @generated from field: aiserver.v1.GetCppEditClassificationResponse.LogProbs log_probs = 2;
   */
  logProbs?: GetCppEditClassificationResponse_LogProbs;

  constructor(data?: PartialMessage<GetCppEditClassificationResponse_ScoredEdit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetCppEditClassificationResponse.ScoredEdit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "edit", kind: "message", T: SuggestedEdit },
    { no: 2, name: "log_probs", kind: "message", T: GetCppEditClassificationResponse_LogProbs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCppEditClassificationResponse_ScoredEdit {
    return new GetCppEditClassificationResponse_ScoredEdit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCppEditClassificationResponse_ScoredEdit {
    return new GetCppEditClassificationResponse_ScoredEdit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCppEditClassificationResponse_ScoredEdit {
    return new GetCppEditClassificationResponse_ScoredEdit().fromJsonString(jsonString, options);
  }

  static equals(a: GetCppEditClassificationResponse_ScoredEdit | PlainMessage<GetCppEditClassificationResponse_ScoredEdit> | undefined, b: GetCppEditClassificationResponse_ScoredEdit | PlainMessage<GetCppEditClassificationResponse_ScoredEdit> | undefined): boolean {
    return proto3.util.equals(GetCppEditClassificationResponse_ScoredEdit, a, b);
  }
}

/**
 * aiserver.v1.AdditionalFile
 *
 * @generated from message aiserver.v1.AdditionalFile
 */
export class AdditionalFile extends Message<AdditionalFile> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: bool is_open = 2;
   */
  isOpen = false;

  /**
   * @generated from field: repeated string visible_range_content = 3;
   */
  visibleRangeContent: string[] = [];

  /**
   * @generated from field: optional double last_viewed_at = 4;
   */
  lastViewedAt?: number;

  /**
   * @generated from field: repeated int32 start_line_number_one_indexed = 5;
   */
  startLineNumberOneIndexed: number[] = [];

  /**
   * @generated from field: repeated aiserver.v1.LineRange visible_ranges = 6;
   */
  visibleRanges: LineRange[] = [];

  constructor(data?: PartialMessage<AdditionalFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AdditionalFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_open", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "visible_range_content", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "last_viewed_at", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 5, name: "start_line_number_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 6, name: "visible_ranges", kind: "message", T: LineRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdditionalFile {
    return new AdditionalFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdditionalFile {
    return new AdditionalFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdditionalFile {
    return new AdditionalFile().fromJsonString(jsonString, options);
  }

  static equals(a: AdditionalFile | PlainMessage<AdditionalFile> | undefined, b: AdditionalFile | PlainMessage<AdditionalFile> | undefined): boolean {
    return proto3.util.equals(AdditionalFile, a, b);
  }
}

/**
 * aiserver.v1.RecordCppFateRequest
 *
 * @generated from message aiserver.v1.RecordCppFateRequest
 */
export class RecordCppFateRequest extends Message<RecordCppFateRequest> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: float performance_now_time = 2;
   */
  performanceNowTime = 0;

  /**
   * @generated from field: aiserver.v1.CppFate fate = 3;
   */
  fate = CppFate.UNSPECIFIED;

  /**
   * @generated from field: string extension = 4;
   */
  extension = "";

  constructor(data?: PartialMessage<RecordCppFateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RecordCppFateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "performance_now_time", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "fate", kind: "enum", T: proto3.getEnumType(CppFate) },
    { no: 4, name: "extension", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordCppFateRequest {
    return new RecordCppFateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordCppFateRequest {
    return new RecordCppFateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordCppFateRequest {
    return new RecordCppFateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordCppFateRequest | PlainMessage<RecordCppFateRequest> | undefined, b: RecordCppFateRequest | PlainMessage<RecordCppFateRequest> | undefined): boolean {
    return proto3.util.equals(RecordCppFateRequest, a, b);
  }
}

/**
 * aiserver.v1.RecordCppFateResponse
 *
 * @generated from message aiserver.v1.RecordCppFateResponse
 */
export class RecordCppFateResponse extends Message<RecordCppFateResponse> {
  constructor(data?: PartialMessage<RecordCppFateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RecordCppFateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordCppFateResponse {
    return new RecordCppFateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordCppFateResponse {
    return new RecordCppFateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordCppFateResponse {
    return new RecordCppFateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RecordCppFateResponse | PlainMessage<RecordCppFateResponse> | undefined, b: RecordCppFateResponse | PlainMessage<RecordCppFateResponse> | undefined): boolean {
    return proto3.util.equals(RecordCppFateResponse, a, b);
  }
}

/**
 * aiserver.v1.AvailableCppModelsRequest
 *
 * @generated from message aiserver.v1.AvailableCppModelsRequest
 */
export class AvailableCppModelsRequest extends Message<AvailableCppModelsRequest> {
  constructor(data?: PartialMessage<AvailableCppModelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AvailableCppModelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableCppModelsRequest {
    return new AvailableCppModelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableCppModelsRequest {
    return new AvailableCppModelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableCppModelsRequest {
    return new AvailableCppModelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableCppModelsRequest | PlainMessage<AvailableCppModelsRequest> | undefined, b: AvailableCppModelsRequest | PlainMessage<AvailableCppModelsRequest> | undefined): boolean {
    return proto3.util.equals(AvailableCppModelsRequest, a, b);
  }
}

/**
 * aiserver.v1.AvailableCppModelsResponse
 *
 * @generated from message aiserver.v1.AvailableCppModelsResponse
 */
export class AvailableCppModelsResponse extends Message<AvailableCppModelsResponse> {
  /**
   * @generated from field: repeated string models = 1;
   */
  models: string[] = [];

  /**
   * @generated from field: optional string default_model = 2;
   */
  defaultModel?: string;

  constructor(data?: PartialMessage<AvailableCppModelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AvailableCppModelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "models", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "default_model", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableCppModelsResponse {
    return new AvailableCppModelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableCppModelsResponse {
    return new AvailableCppModelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableCppModelsResponse {
    return new AvailableCppModelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableCppModelsResponse | PlainMessage<AvailableCppModelsResponse> | undefined, b: AvailableCppModelsResponse | PlainMessage<AvailableCppModelsResponse> | undefined): boolean {
    return proto3.util.equals(AvailableCppModelsResponse, a, b);
  }
}

/**
 * aiserver.v1.StreamHoldCppRequest
 *
 * @generated from message aiserver.v1.StreamHoldCppRequest
 */
export class StreamHoldCppRequest extends Message<StreamHoldCppRequest> {
  /**
   * @generated from field: aiserver.v1.CurrentFileInfo current_file = 1;
   */
  currentFile?: CurrentFileInfo;

  /**
   * @generated from field: optional aiserver.v1.LinterErrors linter_errors = 4;
   */
  linterErrors?: LinterErrors;

  /**
   * @generated from field: repeated aiserver.v1.CppContextItem context_items = 13;
   */
  contextItems: CppContextItem[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CppFileDiffHistory file_diff_histories = 7;
   */
  fileDiffHistories: CppFileDiffHistory[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CppFileDiffHistory merged_diff_histories = 8;
   */
  mergedDiffHistories: CppFileDiffHistory[] = [];

  /**
   * @generated from field: repeated aiserver.v1.BlockDiffPatch block_diff_patches = 9;
   */
  blockDiffPatches: BlockDiffPatch[] = [];

  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 10;
   */
  modelDetails?: ModelDetails;

  constructor(data?: PartialMessage<StreamHoldCppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamHoldCppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_file", kind: "message", T: CurrentFileInfo },
    { no: 4, name: "linter_errors", kind: "message", T: LinterErrors, opt: true },
    { no: 13, name: "context_items", kind: "message", T: CppContextItem, repeated: true },
    { no: 7, name: "file_diff_histories", kind: "message", T: CppFileDiffHistory, repeated: true },
    { no: 8, name: "merged_diff_histories", kind: "message", T: CppFileDiffHistory, repeated: true },
    { no: 9, name: "block_diff_patches", kind: "message", T: BlockDiffPatch, repeated: true },
    { no: 10, name: "model_details", kind: "message", T: ModelDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamHoldCppRequest {
    return new StreamHoldCppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamHoldCppRequest {
    return new StreamHoldCppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamHoldCppRequest {
    return new StreamHoldCppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamHoldCppRequest | PlainMessage<StreamHoldCppRequest> | undefined, b: StreamHoldCppRequest | PlainMessage<StreamHoldCppRequest> | undefined): boolean {
    return proto3.util.equals(StreamHoldCppRequest, a, b);
  }
}

/**
 * aiserver.v1.StreamHoldCppResponse
 *
 * @generated from message aiserver.v1.StreamHoldCppResponse
 */
export class StreamHoldCppResponse extends Message<StreamHoldCppResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<StreamHoldCppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamHoldCppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamHoldCppResponse {
    return new StreamHoldCppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamHoldCppResponse {
    return new StreamHoldCppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamHoldCppResponse {
    return new StreamHoldCppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamHoldCppResponse | PlainMessage<StreamHoldCppResponse> | undefined, b: StreamHoldCppResponse | PlainMessage<StreamHoldCppResponse> | undefined): boolean {
    return proto3.util.equals(StreamHoldCppResponse, a, b);
  }
}

/**
 * aiserver.v1.CppFileDiffHistory
 *
 * @generated from message aiserver.v1.CppFileDiffHistory
 */
export class CppFileDiffHistory extends Message<CppFileDiffHistory> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName = "";

  /**
   * @generated from field: repeated string diff_history = 2;
   */
  diffHistory: string[] = [];

  /**
   * @generated from field: repeated double diff_history_timestamps = 3;
   */
  diffHistoryTimestamps: number[] = [];

  constructor(data?: PartialMessage<CppFileDiffHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppFileDiffHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "diff_history", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "diff_history_timestamps", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppFileDiffHistory {
    return new CppFileDiffHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppFileDiffHistory {
    return new CppFileDiffHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppFileDiffHistory {
    return new CppFileDiffHistory().fromJsonString(jsonString, options);
  }

  static equals(a: CppFileDiffHistory | PlainMessage<CppFileDiffHistory> | undefined, b: CppFileDiffHistory | PlainMessage<CppFileDiffHistory> | undefined): boolean {
    return proto3.util.equals(CppFileDiffHistory, a, b);
  }
}

/**
 * aiserver.v1.CppContextItem
 *
 * @generated from message aiserver.v1.CppContextItem
 */
export class CppContextItem extends Message<CppContextItem> {
  /**
   * @generated from field: string contents = 1;
   */
  contents = "";

  /**
   * @generated from field: optional string symbol = 2;
   */
  symbol?: string;

  /**
   * @generated from field: string relative_workspace_path = 3;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: float score = 4;
   */
  score = 0;

  constructor(data?: PartialMessage<CppContextItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppContextItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppContextItem {
    return new CppContextItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppContextItem {
    return new CppContextItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppContextItem {
    return new CppContextItem().fromJsonString(jsonString, options);
  }

  static equals(a: CppContextItem | PlainMessage<CppContextItem> | undefined, b: CppContextItem | PlainMessage<CppContextItem> | undefined): boolean {
    return proto3.util.equals(CppContextItem, a, b);
  }
}

/**
 * aiserver.v1.MarkCppRequest
 *
 * @generated from message aiserver.v1.MarkCppRequest
 */
export class MarkCppRequest extends Message<MarkCppRequest> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from field: aiserver.v1.MarkCppRequest.CppResponseTypes response_type = 3;
   */
  responseType = MarkCppRequest_CppResponseTypes.UNSPECIFIED;

  /**
   * @generated from field: optional string desired_completion = 4;
   */
  desiredCompletion?: string;

  /**
   * @generated from field: aiserver.v1.MarkCppRequest.RangeTransformation range_transformation = 5;
   */
  rangeTransformation?: MarkCppRequest_RangeTransformation;

  /**
   * @generated from field: string model_code_name = 10;
   */
  modelCodeName = "";

  /**
   * @generated from field: string model_openai_name = 11;
   */
  modelOpenaiName = "";

  /**
   * @generated from field: double current_performance_now_time = 12;
   */
  currentPerformanceNowTime = 0;

  /**
   * @generated from field: double session_performance_origin_time = 13;
   */
  sessionPerformanceOriginTime = 0;

  constructor(data?: PartialMessage<MarkCppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MarkCppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "response_type", kind: "enum", T: proto3.getEnumType(MarkCppRequest_CppResponseTypes) },
    { no: 4, name: "desired_completion", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "range_transformation", kind: "message", T: MarkCppRequest_RangeTransformation },
    { no: 10, name: "model_code_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "model_openai_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "current_performance_now_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "session_performance_origin_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkCppRequest {
    return new MarkCppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkCppRequest {
    return new MarkCppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkCppRequest {
    return new MarkCppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MarkCppRequest | PlainMessage<MarkCppRequest> | undefined, b: MarkCppRequest | PlainMessage<MarkCppRequest> | undefined): boolean {
    return proto3.util.equals(MarkCppRequest, a, b);
  }
}

/**
 * aiserver.v1.MarkCppRequest.CppResponseTypes
 *
 * @generated from enum aiserver.v1.MarkCppRequest.CppResponseTypes
 */
export enum MarkCppRequest_CppResponseTypes {
  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_GOOD = 1;
   */
  GOOD = 1,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_BAD = 2;
   */
  BAD = 2,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_BAD_CONTEXT = 3;
   */
  BAD_CONTEXT = 3,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_BAD_REASONING = 4;
   */
  BAD_REASONING = 4,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_BAD_STUPID_MISTAKE = 5;
   */
  BAD_STUPID_MISTAKE = 5,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_BAD_FORMATTING = 6;
   */
  BAD_FORMATTING = 6,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_BAD_RANGE = 7;
   */
  BAD_RANGE = 7,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_GOOD_PREDICTION = 8;
   */
  GOOD_PREDICTION = 8,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_BAD_FALSE_POSITIVE_TRIGGER = 9;
   */
  BAD_FALSE_POSITIVE_TRIGGER = 9,

  /**
   * @generated from enum value: CPP_RESPONSE_TYPES_BAD_FALSE_NEGATIVE_TRIGGER = 10;
   */
  BAD_FALSE_NEGATIVE_TRIGGER = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(MarkCppRequest_CppResponseTypes)
proto3.util.setEnumType(MarkCppRequest_CppResponseTypes, "aiserver.v1.MarkCppRequest.CppResponseTypes", [
  { no: 0, name: "CPP_RESPONSE_TYPES_UNSPECIFIED" },
  { no: 1, name: "CPP_RESPONSE_TYPES_GOOD" },
  { no: 2, name: "CPP_RESPONSE_TYPES_BAD" },
  { no: 3, name: "CPP_RESPONSE_TYPES_BAD_CONTEXT" },
  { no: 4, name: "CPP_RESPONSE_TYPES_BAD_REASONING" },
  { no: 5, name: "CPP_RESPONSE_TYPES_BAD_STUPID_MISTAKE" },
  { no: 6, name: "CPP_RESPONSE_TYPES_BAD_FORMATTING" },
  { no: 7, name: "CPP_RESPONSE_TYPES_BAD_RANGE" },
  { no: 8, name: "CPP_RESPONSE_TYPES_GOOD_PREDICTION" },
  { no: 9, name: "CPP_RESPONSE_TYPES_BAD_FALSE_POSITIVE_TRIGGER" },
  { no: 10, name: "CPP_RESPONSE_TYPES_BAD_FALSE_NEGATIVE_TRIGGER" },
]);

/**
 * aiserver.v1.MarkCppRequest.RangeTransformation
 *
 * @generated from message aiserver.v1.MarkCppRequest.RangeTransformation
 */
export class MarkCppRequest_RangeTransformation extends Message<MarkCppRequest_RangeTransformation> {
  /**
   * @generated from field: int32 start_line_number = 1;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 end_line_number = 2;
   */
  endLineNumber = 0;

  constructor(data?: PartialMessage<MarkCppRequest_RangeTransformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MarkCppRequest.RangeTransformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkCppRequest_RangeTransformation {
    return new MarkCppRequest_RangeTransformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkCppRequest_RangeTransformation {
    return new MarkCppRequest_RangeTransformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkCppRequest_RangeTransformation {
    return new MarkCppRequest_RangeTransformation().fromJsonString(jsonString, options);
  }

  static equals(a: MarkCppRequest_RangeTransformation | PlainMessage<MarkCppRequest_RangeTransformation> | undefined, b: MarkCppRequest_RangeTransformation | PlainMessage<MarkCppRequest_RangeTransformation> | undefined): boolean {
    return proto3.util.equals(MarkCppRequest_RangeTransformation, a, b);
  }
}

/**
 * aiserver.v1.CppParameterHint
 *
 * @generated from message aiserver.v1.CppParameterHint
 */
export class CppParameterHint extends Message<CppParameterHint> {
  /**
   * @generated from field: string label = 1;
   */
  label = "";

  /**
   * @generated from field: optional string documentation = 2;
   */
  documentation?: string;

  constructor(data?: PartialMessage<CppParameterHint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppParameterHint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "documentation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppParameterHint {
    return new CppParameterHint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppParameterHint {
    return new CppParameterHint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppParameterHint {
    return new CppParameterHint().fromJsonString(jsonString, options);
  }

  static equals(a: CppParameterHint | PlainMessage<CppParameterHint> | undefined, b: CppParameterHint | PlainMessage<CppParameterHint> | undefined): boolean {
    return proto3.util.equals(CppParameterHint, a, b);
  }
}

/**
 * aiserver.v1.MarkCppResponse
 *
 * @generated from message aiserver.v1.MarkCppResponse
 */
export class MarkCppResponse extends Message<MarkCppResponse> {
  constructor(data?: PartialMessage<MarkCppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MarkCppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkCppResponse {
    return new MarkCppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkCppResponse {
    return new MarkCppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkCppResponse {
    return new MarkCppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MarkCppResponse | PlainMessage<MarkCppResponse> | undefined, b: MarkCppResponse | PlainMessage<MarkCppResponse> | undefined): boolean {
    return proto3.util.equals(MarkCppResponse, a, b);
  }
}

/**
 * aiserver.v1.IRange
 *
 * @generated from message aiserver.v1.IRange
 */
export class IRange extends Message<IRange> {
  /**
   * @generated from field: int32 start_line_number = 1;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 start_column = 2;
   */
  startColumn = 0;

  /**
   * @generated from field: int32 end_line_number = 3;
   */
  endLineNumber = 0;

  /**
   * @generated from field: int32 end_column = 4;
   */
  endColumn = 0;

  constructor(data?: PartialMessage<IRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "start_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IRange {
    return new IRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IRange {
    return new IRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IRange {
    return new IRange().fromJsonString(jsonString, options);
  }

  static equals(a: IRange | PlainMessage<IRange> | undefined, b: IRange | PlainMessage<IRange> | undefined): boolean {
    return proto3.util.equals(IRange, a, b);
  }
}

/**
 * aiserver.v1.OneIndexedPosition
 *
 * @generated from message aiserver.v1.OneIndexedPosition
 */
export class OneIndexedPosition extends Message<OneIndexedPosition> {
  /**
   * @generated from field: int32 line_number_one_indexed = 1;
   */
  lineNumberOneIndexed = 0;

  /**
   * @generated from field: int32 column_one_indexed = 2;
   */
  columnOneIndexed = 0;

  constructor(data?: PartialMessage<OneIndexedPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.OneIndexedPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line_number_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "column_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneIndexedPosition {
    return new OneIndexedPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneIndexedPosition {
    return new OneIndexedPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneIndexedPosition {
    return new OneIndexedPosition().fromJsonString(jsonString, options);
  }

  static equals(a: OneIndexedPosition | PlainMessage<OneIndexedPosition> | undefined, b: OneIndexedPosition | PlainMessage<OneIndexedPosition> | undefined): boolean {
    return proto3.util.equals(OneIndexedPosition, a, b);
  }
}

/**
 * aiserver.v1.CursorSelection
 *
 * @generated from message aiserver.v1.CursorSelection
 */
export class CursorSelection extends Message<CursorSelection> {
  /**
   * @generated from field: int32 selection_start_line_number = 1;
   */
  selectionStartLineNumber = 0;

  /**
   * @generated from field: int32 selection_start_column = 2;
   */
  selectionStartColumn = 0;

  /**
   * @generated from field: int32 position_line_number = 3;
   */
  positionLineNumber = 0;

  /**
   * @generated from field: int32 position_column = 4;
   */
  positionColumn = 0;

  constructor(data?: PartialMessage<CursorSelection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CursorSelection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "selection_start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "selection_start_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "position_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "position_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CursorSelection {
    return new CursorSelection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CursorSelection {
    return new CursorSelection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CursorSelection {
    return new CursorSelection().fromJsonString(jsonString, options);
  }

  static equals(a: CursorSelection | PlainMessage<CursorSelection> | undefined, b: CursorSelection | PlainMessage<CursorSelection> | undefined): boolean {
    return proto3.util.equals(CursorSelection, a, b);
  }
}

/**
 * aiserver.v1.ModelChange
 *
 * @generated from message aiserver.v1.ModelChange
 */
export class ModelChange extends Message<ModelChange> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: aiserver.v1.IRange range = 2;
   */
  range?: IRange;

  /**
   * @generated from field: optional string final_model_hash = 3;
   */
  finalModelHash?: string;

  /**
   * @generated from field: optional int32 model_version_immediately_after_this_change = 4;
   */
  modelVersionImmediatelyAfterThisChange?: number;

  /**
   * @generated from field: optional double performance_now_timestamp = 5;
   */
  performanceNowTimestamp?: number;

  /**
   * @generated from field: optional bool is_undoing = 7;
   */
  isUndoing?: boolean;

  /**
   * @generated from field: optional bool is_redoing = 8;
   */
  isRedoing?: boolean;

  /**
   * @generated from field: bool model_is_attached_to_editor = 9;
   */
  modelIsAttachedToEditor = false;

  /**
   * @generated from field: bool model_is_attached_to_the_active_editor = 10;
   */
  modelIsAttachedToTheActiveEditor = false;

  /**
   * @generated from field: repeated aiserver.v1.CursorSelection cursor_selections = 11;
   */
  cursorSelections: CursorSelection[] = [];

  /**
   * @generated from field: int32 model_version_at_metadata_retrieval_time = 12;
   */
  modelVersionAtMetadataRetrievalTime = 0;

  /**
   * @generated from field: optional int64 global_index = 13;
   */
  globalIndex?: bigint;

  /**
   * @generated from field: optional double performance_now_flush_time = 14;
   */
  performanceNowFlushTime?: number;

  /**
   * @generated from field: optional int32 change_index = 15;
   */
  changeIndex?: number;

  /**
   * @generated from field: optional int32 flush_index = 16;
   */
  flushIndex?: number;

  /**
   * @generated from field: optional int32 global_index_v2 = 17;
   */
  globalIndexV2?: number;

  constructor(data?: PartialMessage<ModelChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ModelChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: IRange },
    { no: 3, name: "final_model_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "model_version_immediately_after_this_change", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "performance_now_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 7, name: "is_undoing", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "is_redoing", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "model_is_attached_to_editor", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "model_is_attached_to_the_active_editor", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "cursor_selections", kind: "message", T: CursorSelection, repeated: true },
    { no: 12, name: "model_version_at_metadata_retrieval_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "global_index", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 14, name: "performance_now_flush_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 15, name: "change_index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 16, name: "flush_index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 17, name: "global_index_v2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelChange {
    return new ModelChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelChange {
    return new ModelChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelChange {
    return new ModelChange().fromJsonString(jsonString, options);
  }

  static equals(a: ModelChange | PlainMessage<ModelChange> | undefined, b: ModelChange | PlainMessage<ModelChange> | undefined): boolean {
    return proto3.util.equals(ModelChange, a, b);
  }
}

/**
 * aiserver.v1.CurrentlyShownCppSuggestion
 *
 * @generated from message aiserver.v1.CurrentlyShownCppSuggestion
 */
export class CurrentlyShownCppSuggestion extends Message<CurrentlyShownCppSuggestion> {
  /**
   * @generated from field: int32 suggestion_id = 1;
   */
  suggestionId = 0;

  /**
   * @generated from field: string suggestion_text = 2;
   */
  suggestionText = "";

  /**
   * @generated from field: int32 model_version_when_the_change_is_first_indicated_to_the_user_but_not_shown_in_the_model = 3;
   */
  modelVersionWhenTheChangeIsFirstIndicatedToTheUserButNotShownInTheModel = 0;

  /**
   * @generated from field: optional aiserver.v1.IRange range_of_suggestion_in_current_model = 4;
   */
  rangeOfSuggestionInCurrentModel?: IRange;

  /**
   * @generated from field: string original_text = 5;
   */
  originalText = "";

  /**
   * @generated from field: optional string binding_id = 6;
   */
  bindingId?: string;

  constructor(data?: PartialMessage<CurrentlyShownCppSuggestion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CurrentlyShownCppSuggestion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "suggestion_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_version_when_the_change_is_first_indicated_to_the_user_but_not_shown_in_the_model", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "range_of_suggestion_in_current_model", kind: "message", T: IRange, opt: true },
    { no: 5, name: "original_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "binding_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentlyShownCppSuggestion {
    return new CurrentlyShownCppSuggestion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentlyShownCppSuggestion {
    return new CurrentlyShownCppSuggestion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentlyShownCppSuggestion {
    return new CurrentlyShownCppSuggestion().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentlyShownCppSuggestion | PlainMessage<CurrentlyShownCppSuggestion> | undefined, b: CurrentlyShownCppSuggestion | PlainMessage<CurrentlyShownCppSuggestion> | undefined): boolean {
    return proto3.util.equals(CurrentlyShownCppSuggestion, a, b);
  }
}

/**
 * aiserver.v1.CppAcceptEventNew
 *
 * @generated from message aiserver.v1.CppAcceptEventNew
 */
export class CppAcceptEventNew extends Message<CppAcceptEventNew> {
  /**
   * @generated from field: aiserver.v1.CurrentlyShownCppSuggestion cpp_suggestion = 1;
   */
  cppSuggestion?: CurrentlyShownCppSuggestion;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 7;
   */
  pointInTimeModel?: PointInTimeModel;

  constructor(data?: PartialMessage<CppAcceptEventNew>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppAcceptEventNew";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpp_suggestion", kind: "message", T: CurrentlyShownCppSuggestion },
    { no: 7, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppAcceptEventNew {
    return new CppAcceptEventNew().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppAcceptEventNew {
    return new CppAcceptEventNew().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppAcceptEventNew {
    return new CppAcceptEventNew().fromJsonString(jsonString, options);
  }

  static equals(a: CppAcceptEventNew | PlainMessage<CppAcceptEventNew> | undefined, b: CppAcceptEventNew | PlainMessage<CppAcceptEventNew> | undefined): boolean {
    return proto3.util.equals(CppAcceptEventNew, a, b);
  }
}

/**
 * aiserver.v1.RecoverableCppData
 *
 * @generated from message aiserver.v1.RecoverableCppData
 */
export class RecoverableCppData extends Message<RecoverableCppData> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: string suggestion_text = 2;
   */
  suggestionText = "";

  /**
   * @generated from field: aiserver.v1.IRange suggestion_range = 3;
   */
  suggestionRange?: IRange;

  /**
   * @generated from field: aiserver.v1.OneIndexedPosition position = 4;
   */
  position?: OneIndexedPosition;

  constructor(data?: PartialMessage<RecoverableCppData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RecoverableCppData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "suggestion_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "suggestion_range", kind: "message", T: IRange },
    { no: 4, name: "position", kind: "message", T: OneIndexedPosition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecoverableCppData {
    return new RecoverableCppData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecoverableCppData {
    return new RecoverableCppData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecoverableCppData {
    return new RecoverableCppData().fromJsonString(jsonString, options);
  }

  static equals(a: RecoverableCppData | PlainMessage<RecoverableCppData> | undefined, b: RecoverableCppData | PlainMessage<RecoverableCppData> | undefined): boolean {
    return proto3.util.equals(RecoverableCppData, a, b);
  }
}

/**
 * aiserver.v1.CppSuggestEvent
 *
 * @generated from message aiserver.v1.CppSuggestEvent
 */
export class CppSuggestEvent extends Message<CppSuggestEvent> {
  /**
   * @generated from field: aiserver.v1.CurrentlyShownCppSuggestion cpp_suggestion = 1;
   */
  cppSuggestion?: CurrentlyShownCppSuggestion;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 2;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: aiserver.v1.RecoverableCppData recoverable_cpp_data = 3;
   */
  recoverableCppData?: RecoverableCppData;

  constructor(data?: PartialMessage<CppSuggestEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppSuggestEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpp_suggestion", kind: "message", T: CurrentlyShownCppSuggestion },
    { no: 2, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 3, name: "recoverable_cpp_data", kind: "message", T: RecoverableCppData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppSuggestEvent {
    return new CppSuggestEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppSuggestEvent {
    return new CppSuggestEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppSuggestEvent {
    return new CppSuggestEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppSuggestEvent | PlainMessage<CppSuggestEvent> | undefined, b: CppSuggestEvent | PlainMessage<CppSuggestEvent> | undefined): boolean {
    return proto3.util.equals(CppSuggestEvent, a, b);
  }
}

/**
 * aiserver.v1.CppTriggerEvent
 *
 * @generated from message aiserver.v1.CppTriggerEvent
 */
export class CppTriggerEvent extends Message<CppTriggerEvent> {
  /**
   * @generated from field: string generation_uuid = 1;
   */
  generationUuid = "";

  /**
   * @generated from field: int32 model_version = 2;
   */
  modelVersion = 0;

  /**
   * @generated from field: aiserver.v1.OneIndexedPosition cursor_position = 3;
   */
  cursorPosition?: OneIndexedPosition;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 4;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: aiserver.v1.CppSource source = 5;
   */
  source = CppSource.UNSPECIFIED;

  constructor(data?: PartialMessage<CppTriggerEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppTriggerEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "generation_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor_position", kind: "message", T: OneIndexedPosition },
    { no: 4, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 5, name: "source", kind: "enum", T: proto3.getEnumType(CppSource) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppTriggerEvent {
    return new CppTriggerEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppTriggerEvent {
    return new CppTriggerEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppTriggerEvent {
    return new CppTriggerEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppTriggerEvent | PlainMessage<CppTriggerEvent> | undefined, b: CppTriggerEvent | PlainMessage<CppTriggerEvent> | undefined): boolean {
    return proto3.util.equals(CppTriggerEvent, a, b);
  }
}

/**
 * aiserver.v1.FinishedCppGenerationEvent
 *
 * @generated from message aiserver.v1.FinishedCppGenerationEvent
 */
export class FinishedCppGenerationEvent extends Message<FinishedCppGenerationEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: aiserver.v1.RecoverableCppData recoverable_cpp_data = 2;
   */
  recoverableCppData?: RecoverableCppData;

  constructor(data?: PartialMessage<FinishedCppGenerationEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FinishedCppGenerationEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "recoverable_cpp_data", kind: "message", T: RecoverableCppData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinishedCppGenerationEvent {
    return new FinishedCppGenerationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinishedCppGenerationEvent {
    return new FinishedCppGenerationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinishedCppGenerationEvent {
    return new FinishedCppGenerationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FinishedCppGenerationEvent | PlainMessage<FinishedCppGenerationEvent> | undefined, b: FinishedCppGenerationEvent | PlainMessage<FinishedCppGenerationEvent> | undefined): boolean {
    return proto3.util.equals(FinishedCppGenerationEvent, a, b);
  }
}

/**
 * aiserver.v1.CppRejectEventNew
 *
 * @generated from message aiserver.v1.CppRejectEventNew
 */
export class CppRejectEventNew extends Message<CppRejectEventNew> {
  /**
   * @generated from field: aiserver.v1.CurrentlyShownCppSuggestion cpp_suggestion = 1;
   */
  cppSuggestion?: CurrentlyShownCppSuggestion;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 7;
   */
  pointInTimeModel?: PointInTimeModel;

  constructor(data?: PartialMessage<CppRejectEventNew>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppRejectEventNew";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpp_suggestion", kind: "message", T: CurrentlyShownCppSuggestion },
    { no: 7, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppRejectEventNew {
    return new CppRejectEventNew().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppRejectEventNew {
    return new CppRejectEventNew().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppRejectEventNew {
    return new CppRejectEventNew().fromJsonString(jsonString, options);
  }

  static equals(a: CppRejectEventNew | PlainMessage<CppRejectEventNew> | undefined, b: CppRejectEventNew | PlainMessage<CppRejectEventNew> | undefined): boolean {
    return proto3.util.equals(CppRejectEventNew, a, b);
  }
}

/**
 * aiserver.v1.Edit
 *
 * @generated from message aiserver.v1.Edit
 */
export class Edit extends Message<Edit> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: aiserver.v1.IRange range = 2;
   */
  range?: IRange;

  constructor(data?: PartialMessage<Edit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.Edit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: IRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Edit {
    return new Edit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Edit {
    return new Edit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Edit {
    return new Edit().fromJsonString(jsonString, options);
  }

  static equals(a: Edit | PlainMessage<Edit> | undefined, b: Edit | PlainMessage<Edit> | undefined): boolean {
    return proto3.util.equals(Edit, a, b);
  }
}

/**
 * aiserver.v1.CppPartialAcceptEvent
 *
 * @generated from message aiserver.v1.CppPartialAcceptEvent
 */
export class CppPartialAcceptEvent extends Message<CppPartialAcceptEvent> {
  /**
   * @generated from field: aiserver.v1.CurrentlyShownCppSuggestion cpp_suggestion = 1;
   */
  cppSuggestion?: CurrentlyShownCppSuggestion;

  /**
   * @generated from field: aiserver.v1.Edit edit = 2;
   */
  edit?: Edit;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 3;
   */
  pointInTimeModel?: PointInTimeModel;

  constructor(data?: PartialMessage<CppPartialAcceptEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppPartialAcceptEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpp_suggestion", kind: "message", T: CurrentlyShownCppSuggestion },
    { no: 2, name: "edit", kind: "message", T: Edit },
    { no: 3, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppPartialAcceptEvent {
    return new CppPartialAcceptEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppPartialAcceptEvent {
    return new CppPartialAcceptEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppPartialAcceptEvent {
    return new CppPartialAcceptEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppPartialAcceptEvent | PlainMessage<CppPartialAcceptEvent> | undefined, b: CppPartialAcceptEvent | PlainMessage<CppPartialAcceptEvent> | undefined): boolean {
    return proto3.util.equals(CppPartialAcceptEvent, a, b);
  }
}

/**
 * aiserver.v1.CursorPrediction
 *
 * @generated from message aiserver.v1.CursorPrediction
 */
export class CursorPrediction extends Message<CursorPrediction> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: int32 prediction_id = 2;
   */
  predictionId = 0;

  /**
   * @generated from field: int32 line_number = 3;
   */
  lineNumber = 0;

  /**
   * @generated from field: aiserver.v1.CursorPrediction.CursorPredictionSource source = 4;
   */
  source = CursorPrediction_CursorPredictionSource.UNSPECIFIED;

  /**
   * @generated from field: optional string binding_id = 5;
   */
  bindingId?: string;

  constructor(data?: PartialMessage<CursorPrediction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CursorPrediction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prediction_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "source", kind: "enum", T: proto3.getEnumType(CursorPrediction_CursorPredictionSource) },
    { no: 5, name: "binding_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CursorPrediction {
    return new CursorPrediction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CursorPrediction {
    return new CursorPrediction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CursorPrediction {
    return new CursorPrediction().fromJsonString(jsonString, options);
  }

  static equals(a: CursorPrediction | PlainMessage<CursorPrediction> | undefined, b: CursorPrediction | PlainMessage<CursorPrediction> | undefined): boolean {
    return proto3.util.equals(CursorPrediction, a, b);
  }
}

/**
 * aiserver.v1.CursorPrediction.CursorPredictionSource
 *
 * @generated from enum aiserver.v1.CursorPrediction.CursorPredictionSource
 */
export enum CursorPrediction_CursorPredictionSource {
  /**
   * @generated from enum value: CURSOR_PREDICTION_SOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CURSOR_PREDICTION_SOURCE_ALWAYS_ON = 1;
   */
  ALWAYS_ON = 1,

  /**
   * @generated from enum value: CURSOR_PREDICTION_SOURCE_ACCEPT = 2;
   */
  ACCEPT = 2,

  /**
   * @generated from enum value: CURSOR_PREDICTION_SOURCE_UNDO = 3;
   */
  UNDO = 3,

  /**
   * @generated from enum value: CURSOR_PREDICTION_SOURCE_EDITOR_CHANGE = 4;
   */
  EDITOR_CHANGE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(CursorPrediction_CursorPredictionSource)
proto3.util.setEnumType(CursorPrediction_CursorPredictionSource, "aiserver.v1.CursorPrediction.CursorPredictionSource", [
  { no: 0, name: "CURSOR_PREDICTION_SOURCE_UNSPECIFIED" },
  { no: 1, name: "CURSOR_PREDICTION_SOURCE_ALWAYS_ON" },
  { no: 2, name: "CURSOR_PREDICTION_SOURCE_ACCEPT" },
  { no: 3, name: "CURSOR_PREDICTION_SOURCE_UNDO" },
  { no: 4, name: "CURSOR_PREDICTION_SOURCE_EDITOR_CHANGE" },
]);

/**
 * aiserver.v1.SuggestCursorPredictionEvent
 *
 * @generated from message aiserver.v1.SuggestCursorPredictionEvent
 */
export class SuggestCursorPredictionEvent extends Message<SuggestCursorPredictionEvent> {
  /**
   * @generated from field: aiserver.v1.CursorPrediction cursor_prediction = 1;
   */
  cursorPrediction?: CursorPrediction;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 2;
   */
  pointInTimeModel?: PointInTimeModel;

  constructor(data?: PartialMessage<SuggestCursorPredictionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SuggestCursorPredictionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor_prediction", kind: "message", T: CursorPrediction },
    { no: 2, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestCursorPredictionEvent {
    return new SuggestCursorPredictionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestCursorPredictionEvent {
    return new SuggestCursorPredictionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestCursorPredictionEvent {
    return new SuggestCursorPredictionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestCursorPredictionEvent | PlainMessage<SuggestCursorPredictionEvent> | undefined, b: SuggestCursorPredictionEvent | PlainMessage<SuggestCursorPredictionEvent> | undefined): boolean {
    return proto3.util.equals(SuggestCursorPredictionEvent, a, b);
  }
}

/**
 * aiserver.v1.AcceptCursorPredictionEvent
 *
 * @generated from message aiserver.v1.AcceptCursorPredictionEvent
 */
export class AcceptCursorPredictionEvent extends Message<AcceptCursorPredictionEvent> {
  /**
   * @generated from field: aiserver.v1.CursorPrediction cursor_prediction = 1;
   */
  cursorPrediction?: CursorPrediction;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 2;
   */
  pointInTimeModel?: PointInTimeModel;

  constructor(data?: PartialMessage<AcceptCursorPredictionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AcceptCursorPredictionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor_prediction", kind: "message", T: CursorPrediction },
    { no: 2, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptCursorPredictionEvent {
    return new AcceptCursorPredictionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptCursorPredictionEvent {
    return new AcceptCursorPredictionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptCursorPredictionEvent {
    return new AcceptCursorPredictionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptCursorPredictionEvent | PlainMessage<AcceptCursorPredictionEvent> | undefined, b: AcceptCursorPredictionEvent | PlainMessage<AcceptCursorPredictionEvent> | undefined): boolean {
    return proto3.util.equals(AcceptCursorPredictionEvent, a, b);
  }
}

/**
 * aiserver.v1.RejectCursorPredictionEvent
 *
 * @generated from message aiserver.v1.RejectCursorPredictionEvent
 */
export class RejectCursorPredictionEvent extends Message<RejectCursorPredictionEvent> {
  /**
   * @generated from field: aiserver.v1.CursorPrediction cursor_prediction = 1;
   */
  cursorPrediction?: CursorPrediction;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 2;
   */
  pointInTimeModel?: PointInTimeModel;

  constructor(data?: PartialMessage<RejectCursorPredictionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RejectCursorPredictionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor_prediction", kind: "message", T: CursorPrediction },
    { no: 2, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RejectCursorPredictionEvent {
    return new RejectCursorPredictionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RejectCursorPredictionEvent {
    return new RejectCursorPredictionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RejectCursorPredictionEvent {
    return new RejectCursorPredictionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: RejectCursorPredictionEvent | PlainMessage<RejectCursorPredictionEvent> | undefined, b: RejectCursorPredictionEvent | PlainMessage<RejectCursorPredictionEvent> | undefined): boolean {
    return proto3.util.equals(RejectCursorPredictionEvent, a, b);
  }
}

/**
 * aiserver.v1.MaybeDefinedPointInTimeModel
 *
 * @generated from message aiserver.v1.MaybeDefinedPointInTimeModel
 */
export class MaybeDefinedPointInTimeModel extends Message<MaybeDefinedPointInTimeModel> {
  /**
   * @generated from field: optional string model_uuid = 1;
   */
  modelUuid?: string;

  /**
   * @generated from field: int32 model_version = 2;
   */
  modelVersion = 0;

  /**
   * @generated from field: string relative_path = 3;
   */
  relativePath = "";

  /**
   * @generated from field: string model_id = 4;
   */
  modelId = "";

  constructor(data?: PartialMessage<MaybeDefinedPointInTimeModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MaybeDefinedPointInTimeModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "model_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaybeDefinedPointInTimeModel {
    return new MaybeDefinedPointInTimeModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaybeDefinedPointInTimeModel {
    return new MaybeDefinedPointInTimeModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaybeDefinedPointInTimeModel {
    return new MaybeDefinedPointInTimeModel().fromJsonString(jsonString, options);
  }

  static equals(a: MaybeDefinedPointInTimeModel | PlainMessage<MaybeDefinedPointInTimeModel> | undefined, b: MaybeDefinedPointInTimeModel | PlainMessage<MaybeDefinedPointInTimeModel> | undefined): boolean {
    return proto3.util.equals(MaybeDefinedPointInTimeModel, a, b);
  }
}

/**
 * aiserver.v1.PointInTimeModel
 *
 * @generated from message aiserver.v1.PointInTimeModel
 */
export class PointInTimeModel extends Message<PointInTimeModel> {
  /**
   * @generated from field: string model_uuid = 1;
   */
  modelUuid = "";

  /**
   * @generated from field: int32 model_version = 2;
   */
  modelVersion = 0;

  /**
   * @generated from field: string relative_path = 3;
   */
  relativePath = "";

  /**
   * @generated from field: string model_id = 4;
   */
  modelId = "";

  constructor(data?: PartialMessage<PointInTimeModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.PointInTimeModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PointInTimeModel {
    return new PointInTimeModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PointInTimeModel {
    return new PointInTimeModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PointInTimeModel {
    return new PointInTimeModel().fromJsonString(jsonString, options);
  }

  static equals(a: PointInTimeModel | PlainMessage<PointInTimeModel> | undefined, b: PointInTimeModel | PlainMessage<PointInTimeModel> | undefined): boolean {
    return proto3.util.equals(PointInTimeModel, a, b);
  }
}

/**
 * aiserver.v1.CppManualTriggerEventNew
 *
 * @generated from message aiserver.v1.CppManualTriggerEventNew
 */
export class CppManualTriggerEventNew extends Message<CppManualTriggerEventNew> {
  /**
   * @generated from field: int32 line_number_one_indexed = 1;
   */
  lineNumberOneIndexed = 0;

  /**
   * @generated from field: int32 column_number_one_indexed = 2;
   */
  columnNumberOneIndexed = 0;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 7;
   */
  pointInTimeModel?: PointInTimeModel;

  constructor(data?: PartialMessage<CppManualTriggerEventNew>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppManualTriggerEventNew";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line_number_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "column_number_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppManualTriggerEventNew {
    return new CppManualTriggerEventNew().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppManualTriggerEventNew {
    return new CppManualTriggerEventNew().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppManualTriggerEventNew {
    return new CppManualTriggerEventNew().fromJsonString(jsonString, options);
  }

  static equals(a: CppManualTriggerEventNew | PlainMessage<CppManualTriggerEventNew> | undefined, b: CppManualTriggerEventNew | PlainMessage<CppManualTriggerEventNew> | undefined): boolean {
    return proto3.util.equals(CppManualTriggerEventNew, a, b);
  }
}

/**
 * aiserver.v1.CppStoppedTrackingModelEvent
 *
 * @generated from message aiserver.v1.CppStoppedTrackingModelEvent
 */
export class CppStoppedTrackingModelEvent extends Message<CppStoppedTrackingModelEvent> {
  /**
   * @generated from field: string model_uuid = 1;
   */
  modelUuid = "";

  /**
   * @generated from field: string relative_path = 2;
   */
  relativePath = "";

  /**
   * @generated from field: aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason reason = 3;
   */
  reason = CppStoppedTrackingModelEvent_StoppedTrackingModelReason.UNSPECIFIED;

  constructor(data?: PartialMessage<CppStoppedTrackingModelEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppStoppedTrackingModelEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "enum", T: proto3.getEnumType(CppStoppedTrackingModelEvent_StoppedTrackingModelReason) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppStoppedTrackingModelEvent {
    return new CppStoppedTrackingModelEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppStoppedTrackingModelEvent {
    return new CppStoppedTrackingModelEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppStoppedTrackingModelEvent {
    return new CppStoppedTrackingModelEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppStoppedTrackingModelEvent | PlainMessage<CppStoppedTrackingModelEvent> | undefined, b: CppStoppedTrackingModelEvent | PlainMessage<CppStoppedTrackingModelEvent> | undefined): boolean {
    return proto3.util.equals(CppStoppedTrackingModelEvent, a, b);
  }
}

/**
 * aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason
 *
 * @generated from enum aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason
 */
export enum CppStoppedTrackingModelEvent_StoppedTrackingModelReason {
  /**
   * @generated from enum value: STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STOPPED_TRACKING_MODEL_REASON_FILE_TOO_BIG = 1;
   */
  FILE_TOO_BIG = 1,

  /**
   * @generated from enum value: STOPPED_TRACKING_MODEL_REASON_FILE_DISPOSED = 2;
   */
  FILE_DISPOSED = 2,

  /**
   * @generated from enum value: STOPPED_TRACKING_MODEL_REASON_CHANGE_TOO_BIG = 3;
   */
  CHANGE_TOO_BIG = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CppStoppedTrackingModelEvent_StoppedTrackingModelReason)
proto3.util.setEnumType(CppStoppedTrackingModelEvent_StoppedTrackingModelReason, "aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason", [
  { no: 0, name: "STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED" },
  { no: 1, name: "STOPPED_TRACKING_MODEL_REASON_FILE_TOO_BIG" },
  { no: 2, name: "STOPPED_TRACKING_MODEL_REASON_FILE_DISPOSED" },
  { no: 3, name: "STOPPED_TRACKING_MODEL_REASON_CHANGE_TOO_BIG" },
]);

/**
 * aiserver.v1.CppLinterErrorEvent
 *
 * @generated from message aiserver.v1.CppLinterErrorEvent
 */
export class CppLinterErrorEvent extends Message<CppLinterErrorEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: repeated aiserver.v1.LinterError added_errors = 2;
   */
  addedErrors: LinterError[] = [];

  /**
   * @generated from field: repeated aiserver.v1.LinterError removed_errors = 3;
   */
  removedErrors: LinterError[] = [];

  /**
   * @generated from field: repeated aiserver.v1.LinterError errors = 4;
   */
  errors: LinterError[] = [];

  constructor(data?: PartialMessage<CppLinterErrorEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppLinterErrorEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "added_errors", kind: "message", T: LinterError, repeated: true },
    { no: 3, name: "removed_errors", kind: "message", T: LinterError, repeated: true },
    { no: 4, name: "errors", kind: "message", T: LinterError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppLinterErrorEvent {
    return new CppLinterErrorEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppLinterErrorEvent {
    return new CppLinterErrorEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppLinterErrorEvent {
    return new CppLinterErrorEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppLinterErrorEvent | PlainMessage<CppLinterErrorEvent> | undefined, b: CppLinterErrorEvent | PlainMessage<CppLinterErrorEvent> | undefined): boolean {
    return proto3.util.equals(CppLinterErrorEvent, a, b);
  }
}

/**
 * aiserver.v1.CppDebouncedCursorMovementEvent
 *
 * @generated from message aiserver.v1.CppDebouncedCursorMovementEvent
 */
export class CppDebouncedCursorMovementEvent extends Message<CppDebouncedCursorMovementEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: aiserver.v1.OneIndexedPosition cursor_position = 2;
   */
  cursorPosition?: OneIndexedPosition;

  constructor(data?: PartialMessage<CppDebouncedCursorMovementEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppDebouncedCursorMovementEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "cursor_position", kind: "message", T: OneIndexedPosition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppDebouncedCursorMovementEvent {
    return new CppDebouncedCursorMovementEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppDebouncedCursorMovementEvent {
    return new CppDebouncedCursorMovementEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppDebouncedCursorMovementEvent {
    return new CppDebouncedCursorMovementEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppDebouncedCursorMovementEvent | PlainMessage<CppDebouncedCursorMovementEvent> | undefined, b: CppDebouncedCursorMovementEvent | PlainMessage<CppDebouncedCursorMovementEvent> | undefined): boolean {
    return proto3.util.equals(CppDebouncedCursorMovementEvent, a, b);
  }
}

/**
 * aiserver.v1.CppEditorChangedEvent
 *
 * @generated from message aiserver.v1.CppEditorChangedEvent
 */
export class CppEditorChangedEvent extends Message<CppEditorChangedEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: aiserver.v1.OneIndexedPosition cursor_position = 2;
   */
  cursorPosition?: OneIndexedPosition;

  /**
   * @generated from field: repeated aiserver.v1.IRange visible_ranges = 3;
   */
  visibleRanges: IRange[] = [];

  /**
   * @generated from field: string editor_id = 4;
   */
  editorId = "";

  constructor(data?: PartialMessage<CppEditorChangedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppEditorChangedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "cursor_position", kind: "message", T: OneIndexedPosition },
    { no: 3, name: "visible_ranges", kind: "message", T: IRange, repeated: true },
    { no: 4, name: "editor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppEditorChangedEvent {
    return new CppEditorChangedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppEditorChangedEvent {
    return new CppEditorChangedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppEditorChangedEvent {
    return new CppEditorChangedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppEditorChangedEvent | PlainMessage<CppEditorChangedEvent> | undefined, b: CppEditorChangedEvent | PlainMessage<CppEditorChangedEvent> | undefined): boolean {
    return proto3.util.equals(CppEditorChangedEvent, a, b);
  }
}

/**
 * aiserver.v1.CppCopyEvent
 *
 * @generated from message aiserver.v1.CppCopyEvent
 */
export class CppCopyEvent extends Message<CppCopyEvent> {
  /**
   * @generated from field: string clipboard_contents = 1;
   */
  clipboardContents = "";

  constructor(data?: PartialMessage<CppCopyEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppCopyEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clipboard_contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppCopyEvent {
    return new CppCopyEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppCopyEvent {
    return new CppCopyEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppCopyEvent {
    return new CppCopyEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppCopyEvent | PlainMessage<CppCopyEvent> | undefined, b: CppCopyEvent | PlainMessage<CppCopyEvent> | undefined): boolean {
    return proto3.util.equals(CppCopyEvent, a, b);
  }
}

/**
 * aiserver.v1.CppQuickActionCommand
 *
 * @generated from message aiserver.v1.CppQuickActionCommand
 */
export class CppQuickActionCommand extends Message<CppQuickActionCommand> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: repeated string arguments = 3;
   */
  arguments: string[] = [];

  constructor(data?: PartialMessage<CppQuickActionCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppQuickActionCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "arguments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppQuickActionCommand {
    return new CppQuickActionCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppQuickActionCommand {
    return new CppQuickActionCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppQuickActionCommand {
    return new CppQuickActionCommand().fromJsonString(jsonString, options);
  }

  static equals(a: CppQuickActionCommand | PlainMessage<CppQuickActionCommand> | undefined, b: CppQuickActionCommand | PlainMessage<CppQuickActionCommand> | undefined): boolean {
    return proto3.util.equals(CppQuickActionCommand, a, b);
  }
}

/**
 * aiserver.v1.CppQuickAction
 *
 * @generated from message aiserver.v1.CppQuickAction
 */
export class CppQuickAction extends Message<CppQuickAction> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: repeated aiserver.v1.CppQuickAction.Edit edits = 2;
   */
  edits: CppQuickAction_Edit[] = [];

  /**
   * @generated from field: optional bool is_preferred = 3;
   */
  isPreferred?: boolean;

  /**
   * @generated from field: aiserver.v1.CppQuickActionCommand command = 4;
   */
  command?: CppQuickActionCommand;

  constructor(data?: PartialMessage<CppQuickAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppQuickAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "edits", kind: "message", T: CppQuickAction_Edit, repeated: true },
    { no: 3, name: "is_preferred", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "command", kind: "message", T: CppQuickActionCommand },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppQuickAction {
    return new CppQuickAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppQuickAction {
    return new CppQuickAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppQuickAction {
    return new CppQuickAction().fromJsonString(jsonString, options);
  }

  static equals(a: CppQuickAction | PlainMessage<CppQuickAction> | undefined, b: CppQuickAction | PlainMessage<CppQuickAction> | undefined): boolean {
    return proto3.util.equals(CppQuickAction, a, b);
  }
}

/**
 * aiserver.v1.CppQuickAction.Edit
 *
 * @generated from message aiserver.v1.CppQuickAction.Edit
 */
export class CppQuickAction_Edit extends Message<CppQuickAction_Edit> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: aiserver.v1.IRange range = 2;
   */
  range?: IRange;

  constructor(data?: PartialMessage<CppQuickAction_Edit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppQuickAction.Edit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: IRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppQuickAction_Edit {
    return new CppQuickAction_Edit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppQuickAction_Edit {
    return new CppQuickAction_Edit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppQuickAction_Edit {
    return new CppQuickAction_Edit().fromJsonString(jsonString, options);
  }

  static equals(a: CppQuickAction_Edit | PlainMessage<CppQuickAction_Edit> | undefined, b: CppQuickAction_Edit | PlainMessage<CppQuickAction_Edit> | undefined): boolean {
    return proto3.util.equals(CppQuickAction_Edit, a, b);
  }
}

/**
 * aiserver.v1.CppChangeQuickActionEvent
 *
 * @generated from message aiserver.v1.CppChangeQuickActionEvent
 */
export class CppChangeQuickActionEvent extends Message<CppChangeQuickActionEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: repeated aiserver.v1.CppQuickAction added = 2;
   */
  added: CppQuickAction[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CppQuickAction removed = 3;
   */
  removed: CppQuickAction[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CppQuickAction actions = 4;
   */
  actions: CppQuickAction[] = [];

  constructor(data?: PartialMessage<CppChangeQuickActionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppChangeQuickActionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "added", kind: "message", T: CppQuickAction, repeated: true },
    { no: 3, name: "removed", kind: "message", T: CppQuickAction, repeated: true },
    { no: 4, name: "actions", kind: "message", T: CppQuickAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppChangeQuickActionEvent {
    return new CppChangeQuickActionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppChangeQuickActionEvent {
    return new CppChangeQuickActionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppChangeQuickActionEvent {
    return new CppChangeQuickActionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppChangeQuickActionEvent | PlainMessage<CppChangeQuickActionEvent> | undefined, b: CppChangeQuickActionEvent | PlainMessage<CppChangeQuickActionEvent> | undefined): boolean {
    return proto3.util.equals(CppChangeQuickActionEvent, a, b);
  }
}

/**
 * aiserver.v1.CppQuickActionFireEvent
 *
 * @generated from message aiserver.v1.CppQuickActionFireEvent
 */
export class CppQuickActionFireEvent extends Message<CppQuickActionFireEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from oneof aiserver.v1.CppQuickActionFireEvent.action_identifier
   */
  actionIdentifier: {
    /**
     * @generated from field: aiserver.v1.CppQuickActionCommand quick_action_command = 2;
     */
    value: CppQuickActionCommand;
    case: "quickActionCommand";
  } | {
    /**
     * @generated from field: aiserver.v1.CppQuickAction quick_action_event = 3;
     */
    value: CppQuickAction;
    case: "quickActionEvent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CppQuickActionFireEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppQuickActionFireEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "quick_action_command", kind: "message", T: CppQuickActionCommand, oneof: "action_identifier" },
    { no: 3, name: "quick_action_event", kind: "message", T: CppQuickAction, oneof: "action_identifier" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppQuickActionFireEvent {
    return new CppQuickActionFireEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppQuickActionFireEvent {
    return new CppQuickActionFireEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppQuickActionFireEvent {
    return new CppQuickActionFireEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppQuickActionFireEvent | PlainMessage<CppQuickActionFireEvent> | undefined, b: CppQuickActionFireEvent | PlainMessage<CppQuickActionFireEvent> | undefined): boolean {
    return proto3.util.equals(CppQuickActionFireEvent, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent
 *
 * @generated from message aiserver.v1.CmdKEvent
 */
export class CmdKEvent extends Message<CmdKEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: string request_id = 2;
   */
  requestId = "";

  /**
   * @generated from field: optional string prompt_bar_id = 20;
   */
  promptBarId?: string;

  /**
   * @generated from oneof aiserver.v1.CmdKEvent.event_type
   */
  eventType: {
    /**
     * @generated from field: aiserver.v1.CmdKEvent.SubmitPrompt submit_prompt = 3;
     */
    value: CmdKEvent_SubmitPrompt;
    case: "submitPrompt";
  } | {
    /**
     * @generated from field: aiserver.v1.CmdKEvent.EndOfGeneration end_of_generation = 4;
     */
    value: CmdKEvent_EndOfGeneration;
    case: "endOfGeneration";
  } | {
    /**
     * @generated from field: aiserver.v1.CmdKEvent.InterruptGeneration interrupt_generation = 5;
     */
    value: CmdKEvent_InterruptGeneration;
    case: "interruptGeneration";
  } | {
    /**
     * @generated from field: aiserver.v1.CmdKEvent.AcceptDiffs accept_all = 6;
     */
    value: CmdKEvent_AcceptDiffs;
    case: "acceptAll";
  } | {
    /**
     * @generated from field: aiserver.v1.CmdKEvent.RejectDiffs reject_all = 7;
     */
    value: CmdKEvent_RejectDiffs;
    case: "rejectAll";
  } | {
    /**
     * @generated from field: aiserver.v1.CmdKEvent.RejectPartialDiff reject_partial_diff = 8;
     */
    value: CmdKEvent_RejectPartialDiff;
    case: "rejectPartialDiff";
  } | {
    /**
     * @generated from field: aiserver.v1.CmdKEvent.AcceptPartialDiff accept_partial_diff = 9;
     */
    value: CmdKEvent_AcceptPartialDiff;
    case: "acceptPartialDiff";
  } | {
    /**
     * @generated from field: aiserver.v1.CmdKEvent.AfterReject after_reject = 10;
     */
    value: CmdKEvent_AfterReject;
    case: "afterReject";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CmdKEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "prompt_bar_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "submit_prompt", kind: "message", T: CmdKEvent_SubmitPrompt, oneof: "event_type" },
    { no: 4, name: "end_of_generation", kind: "message", T: CmdKEvent_EndOfGeneration, oneof: "event_type" },
    { no: 5, name: "interrupt_generation", kind: "message", T: CmdKEvent_InterruptGeneration, oneof: "event_type" },
    { no: 6, name: "accept_all", kind: "message", T: CmdKEvent_AcceptDiffs, oneof: "event_type" },
    { no: 7, name: "reject_all", kind: "message", T: CmdKEvent_RejectDiffs, oneof: "event_type" },
    { no: 8, name: "reject_partial_diff", kind: "message", T: CmdKEvent_RejectPartialDiff, oneof: "event_type" },
    { no: 9, name: "accept_partial_diff", kind: "message", T: CmdKEvent_AcceptPartialDiff, oneof: "event_type" },
    { no: 10, name: "after_reject", kind: "message", T: CmdKEvent_AfterReject, oneof: "event_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent {
    return new CmdKEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent {
    return new CmdKEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent {
    return new CmdKEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent | PlainMessage<CmdKEvent> | undefined, b: CmdKEvent | PlainMessage<CmdKEvent> | undefined): boolean {
    return proto3.util.equals(CmdKEvent, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent.SubmitPrompt
 *
 * @generated from message aiserver.v1.CmdKEvent.SubmitPrompt
 */
export class CmdKEvent_SubmitPrompt extends Message<CmdKEvent_SubmitPrompt> {
  /**
   * @generated from field: aiserver.v1.IRange original_range = 1;
   */
  originalRange?: IRange;

  /**
   * @generated from field: string original_text = 2;
   */
  originalText = "";

  /**
   * @generated from field: string prompt = 3;
   */
  prompt = "";

  constructor(data?: PartialMessage<CmdKEvent_SubmitPrompt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent.SubmitPrompt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_range", kind: "message", T: IRange },
    { no: 2, name: "original_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent_SubmitPrompt {
    return new CmdKEvent_SubmitPrompt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent_SubmitPrompt {
    return new CmdKEvent_SubmitPrompt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent_SubmitPrompt {
    return new CmdKEvent_SubmitPrompt().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent_SubmitPrompt | PlainMessage<CmdKEvent_SubmitPrompt> | undefined, b: CmdKEvent_SubmitPrompt | PlainMessage<CmdKEvent_SubmitPrompt> | undefined): boolean {
    return proto3.util.equals(CmdKEvent_SubmitPrompt, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent.EndOfGeneration
 *
 * @generated from message aiserver.v1.CmdKEvent.EndOfGeneration
 */
export class CmdKEvent_EndOfGeneration extends Message<CmdKEvent_EndOfGeneration> {
  constructor(data?: PartialMessage<CmdKEvent_EndOfGeneration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent.EndOfGeneration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent_EndOfGeneration {
    return new CmdKEvent_EndOfGeneration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent_EndOfGeneration {
    return new CmdKEvent_EndOfGeneration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent_EndOfGeneration {
    return new CmdKEvent_EndOfGeneration().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent_EndOfGeneration | PlainMessage<CmdKEvent_EndOfGeneration> | undefined, b: CmdKEvent_EndOfGeneration | PlainMessage<CmdKEvent_EndOfGeneration> | undefined): boolean {
    return proto3.util.equals(CmdKEvent_EndOfGeneration, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent.InterruptGeneration
 *
 * @generated from message aiserver.v1.CmdKEvent.InterruptGeneration
 */
export class CmdKEvent_InterruptGeneration extends Message<CmdKEvent_InterruptGeneration> {
  constructor(data?: PartialMessage<CmdKEvent_InterruptGeneration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent.InterruptGeneration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent_InterruptGeneration {
    return new CmdKEvent_InterruptGeneration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent_InterruptGeneration {
    return new CmdKEvent_InterruptGeneration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent_InterruptGeneration {
    return new CmdKEvent_InterruptGeneration().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent_InterruptGeneration | PlainMessage<CmdKEvent_InterruptGeneration> | undefined, b: CmdKEvent_InterruptGeneration | PlainMessage<CmdKEvent_InterruptGeneration> | undefined): boolean {
    return proto3.util.equals(CmdKEvent_InterruptGeneration, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent.AcceptDiffs
 *
 * @generated from message aiserver.v1.CmdKEvent.AcceptDiffs
 */
export class CmdKEvent_AcceptDiffs extends Message<CmdKEvent_AcceptDiffs> {
  constructor(data?: PartialMessage<CmdKEvent_AcceptDiffs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent.AcceptDiffs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent_AcceptDiffs {
    return new CmdKEvent_AcceptDiffs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent_AcceptDiffs {
    return new CmdKEvent_AcceptDiffs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent_AcceptDiffs {
    return new CmdKEvent_AcceptDiffs().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent_AcceptDiffs | PlainMessage<CmdKEvent_AcceptDiffs> | undefined, b: CmdKEvent_AcceptDiffs | PlainMessage<CmdKEvent_AcceptDiffs> | undefined): boolean {
    return proto3.util.equals(CmdKEvent_AcceptDiffs, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent.RejectDiffs
 *
 * @generated from message aiserver.v1.CmdKEvent.RejectDiffs
 */
export class CmdKEvent_RejectDiffs extends Message<CmdKEvent_RejectDiffs> {
  /**
   * @generated from field: optional string actor_request_id = 1;
   */
  actorRequestId?: string;

  /**
   * @generated from field: optional bool silent = 2;
   */
  silent?: boolean;

  constructor(data?: PartialMessage<CmdKEvent_RejectDiffs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent.RejectDiffs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_request_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "silent", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent_RejectDiffs {
    return new CmdKEvent_RejectDiffs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent_RejectDiffs {
    return new CmdKEvent_RejectDiffs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent_RejectDiffs {
    return new CmdKEvent_RejectDiffs().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent_RejectDiffs | PlainMessage<CmdKEvent_RejectDiffs> | undefined, b: CmdKEvent_RejectDiffs | PlainMessage<CmdKEvent_RejectDiffs> | undefined): boolean {
    return proto3.util.equals(CmdKEvent_RejectDiffs, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent.AcceptPartialDiff
 *
 * @generated from message aiserver.v1.CmdKEvent.AcceptPartialDiff
 */
export class CmdKEvent_AcceptPartialDiff extends Message<CmdKEvent_AcceptPartialDiff> {
  /**
   * @generated from field: aiserver.v1.IRange green_range = 1;
   */
  greenRange?: IRange;

  /**
   * @generated from field: repeated string green_lines = 2;
   */
  greenLines: string[] = [];

  /**
   * @generated from field: repeated string red_lines = 3;
   */
  redLines: string[] = [];

  constructor(data?: PartialMessage<CmdKEvent_AcceptPartialDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent.AcceptPartialDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "green_range", kind: "message", T: IRange },
    { no: 2, name: "green_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "red_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent_AcceptPartialDiff {
    return new CmdKEvent_AcceptPartialDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent_AcceptPartialDiff {
    return new CmdKEvent_AcceptPartialDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent_AcceptPartialDiff {
    return new CmdKEvent_AcceptPartialDiff().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent_AcceptPartialDiff | PlainMessage<CmdKEvent_AcceptPartialDiff> | undefined, b: CmdKEvent_AcceptPartialDiff | PlainMessage<CmdKEvent_AcceptPartialDiff> | undefined): boolean {
    return proto3.util.equals(CmdKEvent_AcceptPartialDiff, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent.RejectPartialDiff
 *
 * @generated from message aiserver.v1.CmdKEvent.RejectPartialDiff
 */
export class CmdKEvent_RejectPartialDiff extends Message<CmdKEvent_RejectPartialDiff> {
  /**
   * @generated from field: aiserver.v1.IRange green_range = 1;
   */
  greenRange?: IRange;

  /**
   * @generated from field: repeated string green_lines = 2;
   */
  greenLines: string[] = [];

  /**
   * @generated from field: repeated string red_lines = 3;
   */
  redLines: string[] = [];

  constructor(data?: PartialMessage<CmdKEvent_RejectPartialDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent.RejectPartialDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "green_range", kind: "message", T: IRange },
    { no: 2, name: "green_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "red_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent_RejectPartialDiff {
    return new CmdKEvent_RejectPartialDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent_RejectPartialDiff {
    return new CmdKEvent_RejectPartialDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent_RejectPartialDiff {
    return new CmdKEvent_RejectPartialDiff().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent_RejectPartialDiff | PlainMessage<CmdKEvent_RejectPartialDiff> | undefined, b: CmdKEvent_RejectPartialDiff | PlainMessage<CmdKEvent_RejectPartialDiff> | undefined): boolean {
    return proto3.util.equals(CmdKEvent_RejectPartialDiff, a, b);
  }
}

/**
 * aiserver.v1.CmdKEvent.AfterReject
 *
 * @generated from message aiserver.v1.CmdKEvent.AfterReject
 */
export class CmdKEvent_AfterReject extends Message<CmdKEvent_AfterReject> {
  constructor(data?: PartialMessage<CmdKEvent_AfterReject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CmdKEvent.AfterReject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmdKEvent_AfterReject {
    return new CmdKEvent_AfterReject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmdKEvent_AfterReject {
    return new CmdKEvent_AfterReject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmdKEvent_AfterReject {
    return new CmdKEvent_AfterReject().fromJsonString(jsonString, options);
  }

  static equals(a: CmdKEvent_AfterReject | PlainMessage<CmdKEvent_AfterReject> | undefined, b: CmdKEvent_AfterReject | PlainMessage<CmdKEvent_AfterReject> | undefined): boolean {
    return proto3.util.equals(CmdKEvent_AfterReject, a, b);
  }
}

/**
 * aiserver.v1.ChatEvent
 *
 * @generated from message aiserver.v1.ChatEvent
 */
export class ChatEvent extends Message<ChatEvent> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from oneof aiserver.v1.ChatEvent.event_type
   */
  eventType: {
    /**
     * @generated from field: aiserver.v1.ChatEvent.SubmitPrompt submit_prompt = 2;
     */
    value: ChatEvent_SubmitPrompt;
    case: "submitPrompt";
  } | {
    /**
     * @generated from field: aiserver.v1.ChatEvent.EndOfAnyGeneration end_of_any_generation = 3;
     */
    value: ChatEvent_EndOfAnyGeneration;
    case: "endOfAnyGeneration";
  } | {
    /**
     * @generated from field: aiserver.v1.ChatEvent.EndOfUninterruptedGeneration end_of_uninterrupted_generation = 4;
     */
    value: ChatEvent_EndOfUninterruptedGeneration;
    case: "endOfUninterruptedGeneration";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ChatEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChatEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "submit_prompt", kind: "message", T: ChatEvent_SubmitPrompt, oneof: "event_type" },
    { no: 3, name: "end_of_any_generation", kind: "message", T: ChatEvent_EndOfAnyGeneration, oneof: "event_type" },
    { no: 4, name: "end_of_uninterrupted_generation", kind: "message", T: ChatEvent_EndOfUninterruptedGeneration, oneof: "event_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatEvent {
    return new ChatEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatEvent {
    return new ChatEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatEvent {
    return new ChatEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ChatEvent | PlainMessage<ChatEvent> | undefined, b: ChatEvent | PlainMessage<ChatEvent> | undefined): boolean {
    return proto3.util.equals(ChatEvent, a, b);
  }
}

/**
 * aiserver.v1.ChatEvent.SubmitPrompt
 *
 * @generated from message aiserver.v1.ChatEvent.SubmitPrompt
 */
export class ChatEvent_SubmitPrompt extends Message<ChatEvent_SubmitPrompt> {
  /**
   * @generated from field: string prompt = 1;
   */
  prompt = "";

  constructor(data?: PartialMessage<ChatEvent_SubmitPrompt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChatEvent.SubmitPrompt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatEvent_SubmitPrompt {
    return new ChatEvent_SubmitPrompt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatEvent_SubmitPrompt {
    return new ChatEvent_SubmitPrompt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatEvent_SubmitPrompt {
    return new ChatEvent_SubmitPrompt().fromJsonString(jsonString, options);
  }

  static equals(a: ChatEvent_SubmitPrompt | PlainMessage<ChatEvent_SubmitPrompt> | undefined, b: ChatEvent_SubmitPrompt | PlainMessage<ChatEvent_SubmitPrompt> | undefined): boolean {
    return proto3.util.equals(ChatEvent_SubmitPrompt, a, b);
  }
}

/**
 * aiserver.v1.ChatEvent.EndOfAnyGeneration
 *
 * @generated from message aiserver.v1.ChatEvent.EndOfAnyGeneration
 */
export class ChatEvent_EndOfAnyGeneration extends Message<ChatEvent_EndOfAnyGeneration> {
  constructor(data?: PartialMessage<ChatEvent_EndOfAnyGeneration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChatEvent.EndOfAnyGeneration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatEvent_EndOfAnyGeneration {
    return new ChatEvent_EndOfAnyGeneration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatEvent_EndOfAnyGeneration {
    return new ChatEvent_EndOfAnyGeneration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatEvent_EndOfAnyGeneration {
    return new ChatEvent_EndOfAnyGeneration().fromJsonString(jsonString, options);
  }

  static equals(a: ChatEvent_EndOfAnyGeneration | PlainMessage<ChatEvent_EndOfAnyGeneration> | undefined, b: ChatEvent_EndOfAnyGeneration | PlainMessage<ChatEvent_EndOfAnyGeneration> | undefined): boolean {
    return proto3.util.equals(ChatEvent_EndOfAnyGeneration, a, b);
  }
}

/**
 * aiserver.v1.ChatEvent.EndOfUninterruptedGeneration
 *
 * @generated from message aiserver.v1.ChatEvent.EndOfUninterruptedGeneration
 */
export class ChatEvent_EndOfUninterruptedGeneration extends Message<ChatEvent_EndOfUninterruptedGeneration> {
  constructor(data?: PartialMessage<ChatEvent_EndOfUninterruptedGeneration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ChatEvent.EndOfUninterruptedGeneration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatEvent_EndOfUninterruptedGeneration {
    return new ChatEvent_EndOfUninterruptedGeneration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatEvent_EndOfUninterruptedGeneration {
    return new ChatEvent_EndOfUninterruptedGeneration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatEvent_EndOfUninterruptedGeneration {
    return new ChatEvent_EndOfUninterruptedGeneration().fromJsonString(jsonString, options);
  }

  static equals(a: ChatEvent_EndOfUninterruptedGeneration | PlainMessage<ChatEvent_EndOfUninterruptedGeneration> | undefined, b: ChatEvent_EndOfUninterruptedGeneration | PlainMessage<ChatEvent_EndOfUninterruptedGeneration> | undefined): boolean {
    return proto3.util.equals(ChatEvent_EndOfUninterruptedGeneration, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent
 *
 * @generated from message aiserver.v1.BugBotLinterEvent
 */
export class BugBotLinterEvent extends Message<BugBotLinterEvent> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 2;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from oneof aiserver.v1.BugBotLinterEvent.event_type
   */
  eventType: {
    /**
     * @generated from field: aiserver.v1.BugBotLinterEvent.LintGenerated lint_generated = 3;
     */
    value: BugBotLinterEvent_LintGenerated;
    case: "lintGenerated";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotLinterEvent.LintDismissed lint_dismissed = 4;
     */
    value: BugBotLinterEvent_LintDismissed;
    case: "lintDismissed";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotLinterEvent.UserFeedback user_feedback = 5;
     */
    value: BugBotLinterEvent_UserFeedback;
    case: "userFeedback";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotLinterEvent.ViewedReport viewed_report = 6;
     */
    value: BugBotLinterEvent_ViewedReport;
    case: "viewedReport";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotLinterEvent.UnviewedReport unviewed_report = 7;
     */
    value: BugBotLinterEvent_UnviewedReport;
    case: "unviewedReport";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotLinterEvent.Started started = 8;
     */
    value: BugBotLinterEvent_Started;
    case: "started";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic not_shown_because_heuristic = 9;
     */
    value: BugBotLinterEvent_NotShownBecauseHeuristic;
    case: "notShownBecauseHeuristic";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BugBotLinterEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotLinterEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 3, name: "lint_generated", kind: "message", T: BugBotLinterEvent_LintGenerated, oneof: "event_type" },
    { no: 4, name: "lint_dismissed", kind: "message", T: BugBotLinterEvent_LintDismissed, oneof: "event_type" },
    { no: 5, name: "user_feedback", kind: "message", T: BugBotLinterEvent_UserFeedback, oneof: "event_type" },
    { no: 6, name: "viewed_report", kind: "message", T: BugBotLinterEvent_ViewedReport, oneof: "event_type" },
    { no: 7, name: "unviewed_report", kind: "message", T: BugBotLinterEvent_UnviewedReport, oneof: "event_type" },
    { no: 8, name: "started", kind: "message", T: BugBotLinterEvent_Started, oneof: "event_type" },
    { no: 9, name: "not_shown_because_heuristic", kind: "message", T: BugBotLinterEvent_NotShownBecauseHeuristic, oneof: "event_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotLinterEvent {
    return new BugBotLinterEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotLinterEvent {
    return new BugBotLinterEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotLinterEvent {
    return new BugBotLinterEvent().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotLinterEvent | PlainMessage<BugBotLinterEvent> | undefined, b: BugBotLinterEvent | PlainMessage<BugBotLinterEvent> | undefined): boolean {
    return proto3.util.equals(BugBotLinterEvent, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent.Started
 *
 * @generated from message aiserver.v1.BugBotLinterEvent.Started
 */
export class BugBotLinterEvent_Started extends Message<BugBotLinterEvent_Started> {
  constructor(data?: PartialMessage<BugBotLinterEvent_Started>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotLinterEvent.Started";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotLinterEvent_Started {
    return new BugBotLinterEvent_Started().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotLinterEvent_Started {
    return new BugBotLinterEvent_Started().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotLinterEvent_Started {
    return new BugBotLinterEvent_Started().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotLinterEvent_Started | PlainMessage<BugBotLinterEvent_Started> | undefined, b: BugBotLinterEvent_Started | PlainMessage<BugBotLinterEvent_Started> | undefined): boolean {
    return proto3.util.equals(BugBotLinterEvent_Started, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent.LintGenerated
 *
 * @generated from message aiserver.v1.BugBotLinterEvent.LintGenerated
 */
export class BugBotLinterEvent_LintGenerated extends Message<BugBotLinterEvent_LintGenerated> {
  /**
   * @generated from field: aiserver.v1.BugReport bug_report = 1;
   */
  bugReport?: BugReport;

  constructor(data?: PartialMessage<BugBotLinterEvent_LintGenerated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotLinterEvent.LintGenerated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report", kind: "message", T: BugReport },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotLinterEvent_LintGenerated {
    return new BugBotLinterEvent_LintGenerated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotLinterEvent_LintGenerated {
    return new BugBotLinterEvent_LintGenerated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotLinterEvent_LintGenerated {
    return new BugBotLinterEvent_LintGenerated().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotLinterEvent_LintGenerated | PlainMessage<BugBotLinterEvent_LintGenerated> | undefined, b: BugBotLinterEvent_LintGenerated | PlainMessage<BugBotLinterEvent_LintGenerated> | undefined): boolean {
    return proto3.util.equals(BugBotLinterEvent_LintGenerated, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent.LintDismissed
 *
 * @generated from message aiserver.v1.BugBotLinterEvent.LintDismissed
 */
export class BugBotLinterEvent_LintDismissed extends Message<BugBotLinterEvent_LintDismissed> {
  /**
   * @generated from field: string bug_report_id = 1;
   */
  bugReportId = "";

  constructor(data?: PartialMessage<BugBotLinterEvent_LintDismissed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotLinterEvent.LintDismissed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotLinterEvent_LintDismissed {
    return new BugBotLinterEvent_LintDismissed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotLinterEvent_LintDismissed {
    return new BugBotLinterEvent_LintDismissed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotLinterEvent_LintDismissed {
    return new BugBotLinterEvent_LintDismissed().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotLinterEvent_LintDismissed | PlainMessage<BugBotLinterEvent_LintDismissed> | undefined, b: BugBotLinterEvent_LintDismissed | PlainMessage<BugBotLinterEvent_LintDismissed> | undefined): boolean {
    return proto3.util.equals(BugBotLinterEvent_LintDismissed, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent.UserFeedback
 *
 * @generated from message aiserver.v1.BugBotLinterEvent.UserFeedback
 */
export class BugBotLinterEvent_UserFeedback extends Message<BugBotLinterEvent_UserFeedback> {
  /**
   * @generated from field: string bug_report_id = 1;
   */
  bugReportId = "";

  /**
   * @generated from field: string feedback = 2;
   */
  feedback = "";

  constructor(data?: PartialMessage<BugBotLinterEvent_UserFeedback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotLinterEvent.UserFeedback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feedback", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotLinterEvent_UserFeedback {
    return new BugBotLinterEvent_UserFeedback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotLinterEvent_UserFeedback {
    return new BugBotLinterEvent_UserFeedback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotLinterEvent_UserFeedback {
    return new BugBotLinterEvent_UserFeedback().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotLinterEvent_UserFeedback | PlainMessage<BugBotLinterEvent_UserFeedback> | undefined, b: BugBotLinterEvent_UserFeedback | PlainMessage<BugBotLinterEvent_UserFeedback> | undefined): boolean {
    return proto3.util.equals(BugBotLinterEvent_UserFeedback, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent.ViewedReport
 *
 * @generated from message aiserver.v1.BugBotLinterEvent.ViewedReport
 */
export class BugBotLinterEvent_ViewedReport extends Message<BugBotLinterEvent_ViewedReport> {
  /**
   * @generated from field: string bug_report_id = 1;
   */
  bugReportId = "";

  constructor(data?: PartialMessage<BugBotLinterEvent_ViewedReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotLinterEvent.ViewedReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotLinterEvent_ViewedReport {
    return new BugBotLinterEvent_ViewedReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotLinterEvent_ViewedReport {
    return new BugBotLinterEvent_ViewedReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotLinterEvent_ViewedReport {
    return new BugBotLinterEvent_ViewedReport().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotLinterEvent_ViewedReport | PlainMessage<BugBotLinterEvent_ViewedReport> | undefined, b: BugBotLinterEvent_ViewedReport | PlainMessage<BugBotLinterEvent_ViewedReport> | undefined): boolean {
    return proto3.util.equals(BugBotLinterEvent_ViewedReport, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent.UnviewedReport
 *
 * @generated from message aiserver.v1.BugBotLinterEvent.UnviewedReport
 */
export class BugBotLinterEvent_UnviewedReport extends Message<BugBotLinterEvent_UnviewedReport> {
  /**
   * @generated from field: string bug_report_id = 1;
   */
  bugReportId = "";

  constructor(data?: PartialMessage<BugBotLinterEvent_UnviewedReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotLinterEvent.UnviewedReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotLinterEvent_UnviewedReport {
    return new BugBotLinterEvent_UnviewedReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotLinterEvent_UnviewedReport {
    return new BugBotLinterEvent_UnviewedReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotLinterEvent_UnviewedReport {
    return new BugBotLinterEvent_UnviewedReport().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotLinterEvent_UnviewedReport | PlainMessage<BugBotLinterEvent_UnviewedReport> | undefined, b: BugBotLinterEvent_UnviewedReport | PlainMessage<BugBotLinterEvent_UnviewedReport> | undefined): boolean {
    return proto3.util.equals(BugBotLinterEvent_UnviewedReport, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic
 *
 * @generated from message aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic
 */
export class BugBotLinterEvent_NotShownBecauseHeuristic extends Message<BugBotLinterEvent_NotShownBecauseHeuristic> {
  /**
   * @generated from field: aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic.Heuristic heuristic = 1;
   */
  heuristic = BugBotLinterEvent_NotShownBecauseHeuristic_Heuristic.UNSPECIFIED;

  constructor(data?: PartialMessage<BugBotLinterEvent_NotShownBecauseHeuristic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heuristic", kind: "enum", T: proto3.getEnumType(BugBotLinterEvent_NotShownBecauseHeuristic_Heuristic) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotLinterEvent_NotShownBecauseHeuristic {
    return new BugBotLinterEvent_NotShownBecauseHeuristic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotLinterEvent_NotShownBecauseHeuristic {
    return new BugBotLinterEvent_NotShownBecauseHeuristic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotLinterEvent_NotShownBecauseHeuristic {
    return new BugBotLinterEvent_NotShownBecauseHeuristic().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotLinterEvent_NotShownBecauseHeuristic | PlainMessage<BugBotLinterEvent_NotShownBecauseHeuristic> | undefined, b: BugBotLinterEvent_NotShownBecauseHeuristic | PlainMessage<BugBotLinterEvent_NotShownBecauseHeuristic> | undefined): boolean {
    return proto3.util.equals(BugBotLinterEvent_NotShownBecauseHeuristic, a, b);
  }
}

/**
 * aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic.Heuristic
 *
 * @generated from enum aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic.Heuristic
 */
export enum BugBotLinterEvent_NotShownBecauseHeuristic_Heuristic {
  /**
   * @generated from enum value: HEURISTIC_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: HEURISTIC_LINT_OVERLAP = 1;
   */
  LINT_OVERLAP = 1,

  /**
   * @generated from enum value: HEURISTIC_LINES_MISMATCH = 2;
   */
  LINES_MISMATCH = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BugBotLinterEvent_NotShownBecauseHeuristic_Heuristic)
proto3.util.setEnumType(BugBotLinterEvent_NotShownBecauseHeuristic_Heuristic, "aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic.Heuristic", [
  { no: 0, name: "HEURISTIC_UNSPECIFIED" },
  { no: 1, name: "HEURISTIC_LINT_OVERLAP" },
  { no: 2, name: "HEURISTIC_LINES_MISMATCH" },
]);

/**
 * aiserver.v1.BugBotEvent
 *
 * @generated from message aiserver.v1.BugBotEvent
 */
export class BugBotEvent extends Message<BugBotEvent> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from oneof aiserver.v1.BugBotEvent.event_type
   */
  eventType: {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.Started started = 2;
     */
    value: BugBotEvent_Started;
    case: "started";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.ReportsGenerated reports_generated = 3;
     */
    value: BugBotEvent_ReportsGenerated;
    case: "reportsGenerated";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.PressedFixInComposer pressed_fix_in_composer = 4;
     */
    value: BugBotEvent_PressedFixInComposer;
    case: "pressedFixInComposer";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.PressedOpenInEditor pressed_open_in_editor = 5;
     */
    value: BugBotEvent_PressedOpenInEditor;
    case: "pressedOpenInEditor";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.ViewedReport viewed_report = 6;
     */
    value: BugBotEvent_ViewedReport;
    case: "viewedReport";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.UserFeedback user_feedback = 7;
     */
    value: BugBotEvent_UserFeedback;
    case: "userFeedback";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.PressedAddToChat pressed_add_to_chat = 8;
     */
    value: BugBotEvent_PressedAddToChat;
    case: "pressedAddToChat";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.BackgroundIntervalStarted background_interval_started = 9;
     */
    value: BugBotEvent_BackgroundIntervalStarted;
    case: "backgroundIntervalStarted";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.BackgroundIntervalEnded background_interval_ended = 10;
     */
    value: BugBotEvent_BackgroundIntervalEnded;
    case: "backgroundIntervalEnded";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.BackgroundIntervalInterrupted background_interval_interrupted = 11;
     */
    value: BugBotEvent_BackgroundIntervalInterrupted;
    case: "backgroundIntervalInterrupted";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent.BackgroundIntervalErrored background_interval_errored = 12;
     */
    value: BugBotEvent_BackgroundIntervalErrored;
    case: "backgroundIntervalErrored";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BugBotEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "started", kind: "message", T: BugBotEvent_Started, oneof: "event_type" },
    { no: 3, name: "reports_generated", kind: "message", T: BugBotEvent_ReportsGenerated, oneof: "event_type" },
    { no: 4, name: "pressed_fix_in_composer", kind: "message", T: BugBotEvent_PressedFixInComposer, oneof: "event_type" },
    { no: 5, name: "pressed_open_in_editor", kind: "message", T: BugBotEvent_PressedOpenInEditor, oneof: "event_type" },
    { no: 6, name: "viewed_report", kind: "message", T: BugBotEvent_ViewedReport, oneof: "event_type" },
    { no: 7, name: "user_feedback", kind: "message", T: BugBotEvent_UserFeedback, oneof: "event_type" },
    { no: 8, name: "pressed_add_to_chat", kind: "message", T: BugBotEvent_PressedAddToChat, oneof: "event_type" },
    { no: 9, name: "background_interval_started", kind: "message", T: BugBotEvent_BackgroundIntervalStarted, oneof: "event_type" },
    { no: 10, name: "background_interval_ended", kind: "message", T: BugBotEvent_BackgroundIntervalEnded, oneof: "event_type" },
    { no: 11, name: "background_interval_interrupted", kind: "message", T: BugBotEvent_BackgroundIntervalInterrupted, oneof: "event_type" },
    { no: 12, name: "background_interval_errored", kind: "message", T: BugBotEvent_BackgroundIntervalErrored, oneof: "event_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent {
    return new BugBotEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent {
    return new BugBotEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent {
    return new BugBotEvent().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent | PlainMessage<BugBotEvent> | undefined, b: BugBotEvent | PlainMessage<BugBotEvent> | undefined): boolean {
    return proto3.util.equals(BugBotEvent, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.BackgroundIntervalInterruptedReason
 *
 * @generated from enum aiserver.v1.BugBotEvent.BackgroundIntervalInterruptedReason
 */
export enum BugBotEvent_BackgroundIntervalInterruptedReason {
  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_DISABLED = 1;
   */
  DISABLED = 1,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_TOO_RECENT = 2;
   */
  TOO_RECENT = 2,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNVIEWED_BUG_REPORTS = 3;
   */
  UNVIEWED_BUG_REPORTS = 3,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_NOT_IN_GIT_REPO = 4;
   */
  NOT_IN_GIT_REPO = 4,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH = 5;
   */
  DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH = 5,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_GIT_USER = 6;
   */
  NO_GIT_USER = 6,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_LAST_COMMIT = 7;
   */
  NO_LAST_COMMIT = 7,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_NOT_MADE_BY_USER = 8;
   */
  LAST_COMMIT_NOT_MADE_BY_USER = 8,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_TOO_OLD = 9;
   */
  LAST_COMMIT_TOO_OLD = 9,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_LONG = 10;
   */
  DIFF_TOO_LONG = 10,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_SHORT = 11;
   */
  DIFF_TOO_SHORT = 11,

  /**
   * @generated from enum value: BACKGROUND_INTERVAL_INTERRUPTED_REASON_TELEMETRY_UNHEALTHY = 12;
   */
  TELEMETRY_UNHEALTHY = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(BugBotEvent_BackgroundIntervalInterruptedReason)
proto3.util.setEnumType(BugBotEvent_BackgroundIntervalInterruptedReason, "aiserver.v1.BugBotEvent.BackgroundIntervalInterruptedReason", [
  { no: 0, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNSPECIFIED" },
  { no: 1, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DISABLED" },
  { no: 2, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_TOO_RECENT" },
  { no: 3, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNVIEWED_BUG_REPORTS" },
  { no: 4, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NOT_IN_GIT_REPO" },
  { no: 5, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH" },
  { no: 6, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_GIT_USER" },
  { no: 7, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_LAST_COMMIT" },
  { no: 8, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_NOT_MADE_BY_USER" },
  { no: 9, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_TOO_OLD" },
  { no: 10, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_LONG" },
  { no: 11, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_SHORT" },
  { no: 12, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_TELEMETRY_UNHEALTHY" },
]);

/**
 * aiserver.v1.BugBotEvent.Started
 *
 * @generated from message aiserver.v1.BugBotEvent.Started
 */
export class BugBotEvent_Started extends Message<BugBotEvent_Started> {
  constructor(data?: PartialMessage<BugBotEvent_Started>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.Started";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_Started {
    return new BugBotEvent_Started().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_Started {
    return new BugBotEvent_Started().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_Started {
    return new BugBotEvent_Started().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_Started | PlainMessage<BugBotEvent_Started> | undefined, b: BugBotEvent_Started | PlainMessage<BugBotEvent_Started> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_Started, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.ReportsGenerated
 *
 * @generated from message aiserver.v1.BugBotEvent.ReportsGenerated
 */
export class BugBotEvent_ReportsGenerated extends Message<BugBotEvent_ReportsGenerated> {
  /**
   * @generated from field: aiserver.v1.BugReports bug_reports = 1;
   */
  bugReports?: BugReports;

  constructor(data?: PartialMessage<BugBotEvent_ReportsGenerated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.ReportsGenerated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_reports", kind: "message", T: BugReports },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_ReportsGenerated {
    return new BugBotEvent_ReportsGenerated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_ReportsGenerated {
    return new BugBotEvent_ReportsGenerated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_ReportsGenerated {
    return new BugBotEvent_ReportsGenerated().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_ReportsGenerated | PlainMessage<BugBotEvent_ReportsGenerated> | undefined, b: BugBotEvent_ReportsGenerated | PlainMessage<BugBotEvent_ReportsGenerated> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_ReportsGenerated, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.PressedFixInComposer
 *
 * @generated from message aiserver.v1.BugBotEvent.PressedFixInComposer
 */
export class BugBotEvent_PressedFixInComposer extends Message<BugBotEvent_PressedFixInComposer> {
  /**
   * @generated from field: string bug_report_id = 1;
   */
  bugReportId = "";

  constructor(data?: PartialMessage<BugBotEvent_PressedFixInComposer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.PressedFixInComposer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_PressedFixInComposer {
    return new BugBotEvent_PressedFixInComposer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_PressedFixInComposer {
    return new BugBotEvent_PressedFixInComposer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_PressedFixInComposer {
    return new BugBotEvent_PressedFixInComposer().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_PressedFixInComposer | PlainMessage<BugBotEvent_PressedFixInComposer> | undefined, b: BugBotEvent_PressedFixInComposer | PlainMessage<BugBotEvent_PressedFixInComposer> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_PressedFixInComposer, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.PressedAddToChat
 *
 * @generated from message aiserver.v1.BugBotEvent.PressedAddToChat
 */
export class BugBotEvent_PressedAddToChat extends Message<BugBotEvent_PressedAddToChat> {
  /**
   * @generated from field: string bug_report_id = 1;
   */
  bugReportId = "";

  constructor(data?: PartialMessage<BugBotEvent_PressedAddToChat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.PressedAddToChat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_PressedAddToChat {
    return new BugBotEvent_PressedAddToChat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_PressedAddToChat {
    return new BugBotEvent_PressedAddToChat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_PressedAddToChat {
    return new BugBotEvent_PressedAddToChat().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_PressedAddToChat | PlainMessage<BugBotEvent_PressedAddToChat> | undefined, b: BugBotEvent_PressedAddToChat | PlainMessage<BugBotEvent_PressedAddToChat> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_PressedAddToChat, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.PressedOpenInEditor
 *
 * @generated from message aiserver.v1.BugBotEvent.PressedOpenInEditor
 */
export class BugBotEvent_PressedOpenInEditor extends Message<BugBotEvent_PressedOpenInEditor> {
  /**
   * @generated from field: aiserver.v1.BugLocation bug_location = 1;
   */
  bugLocation?: BugLocation;

  /**
   * @generated from field: string bug_report_id = 2;
   */
  bugReportId = "";

  constructor(data?: PartialMessage<BugBotEvent_PressedOpenInEditor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.PressedOpenInEditor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_location", kind: "message", T: BugLocation },
    { no: 2, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_PressedOpenInEditor {
    return new BugBotEvent_PressedOpenInEditor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_PressedOpenInEditor {
    return new BugBotEvent_PressedOpenInEditor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_PressedOpenInEditor {
    return new BugBotEvent_PressedOpenInEditor().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_PressedOpenInEditor | PlainMessage<BugBotEvent_PressedOpenInEditor> | undefined, b: BugBotEvent_PressedOpenInEditor | PlainMessage<BugBotEvent_PressedOpenInEditor> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_PressedOpenInEditor, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.ViewedReport
 *
 * @generated from message aiserver.v1.BugBotEvent.ViewedReport
 */
export class BugBotEvent_ViewedReport extends Message<BugBotEvent_ViewedReport> {
  /**
   * @generated from field: int32 seconds_viewed = 1;
   */
  secondsViewed = 0;

  /**
   * @generated from field: repeated aiserver.v1.BugBotEvent.ViewedReport.ReportView report_views = 2;
   */
  reportViews: BugBotEvent_ViewedReport_ReportView[] = [];

  constructor(data?: PartialMessage<BugBotEvent_ViewedReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.ViewedReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seconds_viewed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "report_views", kind: "message", T: BugBotEvent_ViewedReport_ReportView, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_ViewedReport {
    return new BugBotEvent_ViewedReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_ViewedReport {
    return new BugBotEvent_ViewedReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_ViewedReport {
    return new BugBotEvent_ViewedReport().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_ViewedReport | PlainMessage<BugBotEvent_ViewedReport> | undefined, b: BugBotEvent_ViewedReport | PlainMessage<BugBotEvent_ViewedReport> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_ViewedReport, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.ViewedReport.ReportView
 *
 * @generated from message aiserver.v1.BugBotEvent.ViewedReport.ReportView
 */
export class BugBotEvent_ViewedReport_ReportView extends Message<BugBotEvent_ViewedReport_ReportView> {
  /**
   * @generated from field: string bug_report_id = 1;
   */
  bugReportId = "";

  /**
   * @generated from field: double view_percentage = 2;
   */
  viewPercentage = 0;

  /**
   * @generated from field: double text_percentage = 3;
   */
  textPercentage = 0;

  constructor(data?: PartialMessage<BugBotEvent_ViewedReport_ReportView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.ViewedReport.ReportView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view_percentage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "text_percentage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_ViewedReport_ReportView {
    return new BugBotEvent_ViewedReport_ReportView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_ViewedReport_ReportView {
    return new BugBotEvent_ViewedReport_ReportView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_ViewedReport_ReportView {
    return new BugBotEvent_ViewedReport_ReportView().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_ViewedReport_ReportView | PlainMessage<BugBotEvent_ViewedReport_ReportView> | undefined, b: BugBotEvent_ViewedReport_ReportView | PlainMessage<BugBotEvent_ViewedReport_ReportView> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_ViewedReport_ReportView, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.UserFeedback
 *
 * @generated from message aiserver.v1.BugBotEvent.UserFeedback
 */
export class BugBotEvent_UserFeedback extends Message<BugBotEvent_UserFeedback> {
  /**
   * @generated from field: string bug_report_id = 1;
   */
  bugReportId = "";

  /**
   * @generated from field: string feedback = 2;
   */
  feedback = "";

  constructor(data?: PartialMessage<BugBotEvent_UserFeedback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.UserFeedback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bug_report_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feedback", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_UserFeedback {
    return new BugBotEvent_UserFeedback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_UserFeedback {
    return new BugBotEvent_UserFeedback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_UserFeedback {
    return new BugBotEvent_UserFeedback().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_UserFeedback | PlainMessage<BugBotEvent_UserFeedback> | undefined, b: BugBotEvent_UserFeedback | PlainMessage<BugBotEvent_UserFeedback> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_UserFeedback, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.BackgroundIntervalStarted
 *
 * @generated from message aiserver.v1.BugBotEvent.BackgroundIntervalStarted
 */
export class BugBotEvent_BackgroundIntervalStarted extends Message<BugBotEvent_BackgroundIntervalStarted> {
  constructor(data?: PartialMessage<BugBotEvent_BackgroundIntervalStarted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalStarted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_BackgroundIntervalStarted {
    return new BugBotEvent_BackgroundIntervalStarted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_BackgroundIntervalStarted {
    return new BugBotEvent_BackgroundIntervalStarted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_BackgroundIntervalStarted {
    return new BugBotEvent_BackgroundIntervalStarted().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_BackgroundIntervalStarted | PlainMessage<BugBotEvent_BackgroundIntervalStarted> | undefined, b: BugBotEvent_BackgroundIntervalStarted | PlainMessage<BugBotEvent_BackgroundIntervalStarted> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_BackgroundIntervalStarted, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.BackgroundIntervalEnded
 *
 * @generated from message aiserver.v1.BugBotEvent.BackgroundIntervalEnded
 */
export class BugBotEvent_BackgroundIntervalEnded extends Message<BugBotEvent_BackgroundIntervalEnded> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<BugBotEvent_BackgroundIntervalEnded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalEnded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_BackgroundIntervalEnded {
    return new BugBotEvent_BackgroundIntervalEnded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_BackgroundIntervalEnded {
    return new BugBotEvent_BackgroundIntervalEnded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_BackgroundIntervalEnded {
    return new BugBotEvent_BackgroundIntervalEnded().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_BackgroundIntervalEnded | PlainMessage<BugBotEvent_BackgroundIntervalEnded> | undefined, b: BugBotEvent_BackgroundIntervalEnded | PlainMessage<BugBotEvent_BackgroundIntervalEnded> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_BackgroundIntervalEnded, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.BackgroundIntervalInterrupted
 *
 * @generated from message aiserver.v1.BugBotEvent.BackgroundIntervalInterrupted
 */
export class BugBotEvent_BackgroundIntervalInterrupted extends Message<BugBotEvent_BackgroundIntervalInterrupted> {
  /**
   * @generated from field: aiserver.v1.BugBotEvent.BackgroundIntervalInterruptedReason reason = 1;
   */
  reason = BugBotEvent_BackgroundIntervalInterruptedReason.UNSPECIFIED;

  constructor(data?: PartialMessage<BugBotEvent_BackgroundIntervalInterrupted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalInterrupted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "enum", T: proto3.getEnumType(BugBotEvent_BackgroundIntervalInterruptedReason) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_BackgroundIntervalInterrupted {
    return new BugBotEvent_BackgroundIntervalInterrupted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_BackgroundIntervalInterrupted {
    return new BugBotEvent_BackgroundIntervalInterrupted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_BackgroundIntervalInterrupted {
    return new BugBotEvent_BackgroundIntervalInterrupted().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_BackgroundIntervalInterrupted | PlainMessage<BugBotEvent_BackgroundIntervalInterrupted> | undefined, b: BugBotEvent_BackgroundIntervalInterrupted | PlainMessage<BugBotEvent_BackgroundIntervalInterrupted> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_BackgroundIntervalInterrupted, a, b);
  }
}

/**
 * aiserver.v1.BugBotEvent.BackgroundIntervalErrored
 *
 * @generated from message aiserver.v1.BugBotEvent.BackgroundIntervalErrored
 */
export class BugBotEvent_BackgroundIntervalErrored extends Message<BugBotEvent_BackgroundIntervalErrored> {
  /**
   * @generated from field: string error_message = 1;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<BugBotEvent_BackgroundIntervalErrored>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalErrored";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BugBotEvent_BackgroundIntervalErrored {
    return new BugBotEvent_BackgroundIntervalErrored().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BugBotEvent_BackgroundIntervalErrored {
    return new BugBotEvent_BackgroundIntervalErrored().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BugBotEvent_BackgroundIntervalErrored {
    return new BugBotEvent_BackgroundIntervalErrored().fromJsonString(jsonString, options);
  }

  static equals(a: BugBotEvent_BackgroundIntervalErrored | PlainMessage<BugBotEvent_BackgroundIntervalErrored> | undefined, b: BugBotEvent_BackgroundIntervalErrored | PlainMessage<BugBotEvent_BackgroundIntervalErrored> | undefined): boolean {
    return proto3.util.equals(BugBotEvent_BackgroundIntervalErrored, a, b);
  }
}

/**
 * aiserver.v1.AiRequestEvent
 *
 * @generated from message aiserver.v1.AiRequestEvent
 */
export class AiRequestEvent extends Message<AiRequestEvent> {
  /**
   * @generated from field: aiserver.v1.AiRequestEvent.RequestType request_type = 1;
   */
  requestType = AiRequestEvent_RequestType.UNSPECIFIED;

  /**
   * @generated from field: string request_id = 2;
   */
  requestId = "";

  /**
   * @generated from field: aiserver.v1.AiRequestEvent.Source source = 3;
   */
  source = AiRequestEvent_Source.UNSPECIFIED;

  constructor(data?: PartialMessage<AiRequestEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AiRequestEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_type", kind: "enum", T: proto3.getEnumType(AiRequestEvent_RequestType) },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "source", kind: "enum", T: proto3.getEnumType(AiRequestEvent_Source) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AiRequestEvent {
    return new AiRequestEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AiRequestEvent {
    return new AiRequestEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AiRequestEvent {
    return new AiRequestEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AiRequestEvent | PlainMessage<AiRequestEvent> | undefined, b: AiRequestEvent | PlainMessage<AiRequestEvent> | undefined): boolean {
    return proto3.util.equals(AiRequestEvent, a, b);
  }
}

/**
 * aiserver.v1.AiRequestEvent.RequestType
 *
 * @generated from enum aiserver.v1.AiRequestEvent.RequestType
 */
export enum AiRequestEvent_RequestType {
  /**
   * @generated from enum value: REQUEST_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: REQUEST_TYPE_START = 1;
   */
  START = 1,

  /**
   * @generated from enum value: REQUEST_TYPE_END = 2;
   */
  END = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AiRequestEvent_RequestType)
proto3.util.setEnumType(AiRequestEvent_RequestType, "aiserver.v1.AiRequestEvent.RequestType", [
  { no: 0, name: "REQUEST_TYPE_UNSPECIFIED" },
  { no: 1, name: "REQUEST_TYPE_START" },
  { no: 2, name: "REQUEST_TYPE_END" },
]);

/**
 * aiserver.v1.AiRequestEvent.Source
 *
 * @generated from enum aiserver.v1.AiRequestEvent.Source
 */
export enum AiRequestEvent_Source {
  /**
   * @generated from enum value: SOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SOURCE_CHAT = 1;
   */
  CHAT = 1,

  /**
   * @generated from enum value: SOURCE_CMDK = 2;
   */
  CMDK = 2,

  /**
   * @generated from enum value: SOURCE_APPLY = 3;
   */
  APPLY = 3,

  /**
   * @generated from enum value: SOURCE_COMPOSER = 4;
   */
  COMPOSER = 4,

  /**
   * @generated from enum value: SOURCE_TASK = 5;
   */
  TASK = 5,

  /**
   * @generated from enum value: SOURCE_CODE_INTERPRETER = 6;
   */
  CODE_INTERPRETER = 6,

  /**
   * @generated from enum value: SOURCE_INTERPRETER_EXECUTION = 7;
   */
  INTERPRETER_EXECUTION = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(AiRequestEvent_Source)
proto3.util.setEnumType(AiRequestEvent_Source, "aiserver.v1.AiRequestEvent.Source", [
  { no: 0, name: "SOURCE_UNSPECIFIED" },
  { no: 1, name: "SOURCE_CHAT" },
  { no: 2, name: "SOURCE_CMDK" },
  { no: 3, name: "SOURCE_APPLY" },
  { no: 4, name: "SOURCE_COMPOSER" },
  { no: 5, name: "SOURCE_TASK" },
  { no: 6, name: "SOURCE_CODE_INTERPRETER" },
  { no: 7, name: "SOURCE_INTERPRETER_EXECUTION" },
]);

/**
 * aiserver.v1.ModelOpenedEvent
 *
 * @generated from message aiserver.v1.ModelOpenedEvent
 */
export class ModelOpenedEvent extends Message<ModelOpenedEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: aiserver.v1.MaybeDefinedPointInTimeModel maybe_defined_point_in_time_model = 2;
   */
  maybeDefinedPointInTimeModel?: MaybeDefinedPointInTimeModel;

  constructor(data?: PartialMessage<ModelOpenedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ModelOpenedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "maybe_defined_point_in_time_model", kind: "message", T: MaybeDefinedPointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelOpenedEvent {
    return new ModelOpenedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelOpenedEvent {
    return new ModelOpenedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelOpenedEvent {
    return new ModelOpenedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ModelOpenedEvent | PlainMessage<ModelOpenedEvent> | undefined, b: ModelOpenedEvent | PlainMessage<ModelOpenedEvent> | undefined): boolean {
    return proto3.util.equals(ModelOpenedEvent, a, b);
  }
}

/**
 * aiserver.v1.BackgroundFilesEvent
 *
 * @generated from message aiserver.v1.BackgroundFilesEvent
 */
export class BackgroundFilesEvent extends Message<BackgroundFilesEvent> {
  /**
   * @generated from field: repeated aiserver.v1.BackgroundFilesEvent.BackgroundFile files = 2;
   */
  files: BackgroundFilesEvent_BackgroundFile[] = [];

  constructor(data?: PartialMessage<BackgroundFilesEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BackgroundFilesEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "files", kind: "message", T: BackgroundFilesEvent_BackgroundFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundFilesEvent {
    return new BackgroundFilesEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundFilesEvent {
    return new BackgroundFilesEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundFilesEvent {
    return new BackgroundFilesEvent().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundFilesEvent | PlainMessage<BackgroundFilesEvent> | undefined, b: BackgroundFilesEvent | PlainMessage<BackgroundFilesEvent> | undefined): boolean {
    return proto3.util.equals(BackgroundFilesEvent, a, b);
  }
}

/**
 * aiserver.v1.BackgroundFilesEvent.BackgroundFile
 *
 * @generated from message aiserver.v1.BackgroundFilesEvent.BackgroundFile
 */
export class BackgroundFilesEvent_BackgroundFile extends Message<BackgroundFilesEvent_BackgroundFile> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string contents = 2;
   */
  contents = "";

  /**
   * @generated from field: string hash = 3;
   */
  hash = "";

  /**
   * @generated from field: string full_path = 4;
   */
  fullPath = "";

  constructor(data?: PartialMessage<BackgroundFilesEvent_BackgroundFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BackgroundFilesEvent.BackgroundFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "full_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundFilesEvent_BackgroundFile {
    return new BackgroundFilesEvent_BackgroundFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundFilesEvent_BackgroundFile {
    return new BackgroundFilesEvent_BackgroundFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundFilesEvent_BackgroundFile {
    return new BackgroundFilesEvent_BackgroundFile().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundFilesEvent_BackgroundFile | PlainMessage<BackgroundFilesEvent_BackgroundFile> | undefined, b: BackgroundFilesEvent_BackgroundFile | PlainMessage<BackgroundFilesEvent_BackgroundFile> | undefined): boolean {
    return proto3.util.equals(BackgroundFilesEvent_BackgroundFile, a, b);
  }
}

/**
 * aiserver.v1.ScrollEvent
 *
 * @generated from message aiserver.v1.ScrollEvent
 */
export class ScrollEvent extends Message<ScrollEvent> {
  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: PointInTimeModel;

  /**
   * @generated from field: repeated aiserver.v1.IRange visible_ranges = 2;
   */
  visibleRanges: IRange[] = [];

  /**
   * @generated from field: string editor_id = 3;
   */
  editorId = "";

  constructor(data?: PartialMessage<ScrollEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ScrollEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
    { no: 2, name: "visible_ranges", kind: "message", T: IRange, repeated: true },
    { no: 3, name: "editor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScrollEvent {
    return new ScrollEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScrollEvent {
    return new ScrollEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScrollEvent {
    return new ScrollEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ScrollEvent | PlainMessage<ScrollEvent> | undefined, b: ScrollEvent | PlainMessage<ScrollEvent> | undefined): boolean {
    return proto3.util.equals(ScrollEvent, a, b);
  }
}

/**
 * aiserver.v1.EditorCloseEvent
 *
 * @generated from message aiserver.v1.EditorCloseEvent
 */
export class EditorCloseEvent extends Message<EditorCloseEvent> {
  /**
   * @generated from field: string editor_id = 1;
   */
  editorId = "";

  constructor(data?: PartialMessage<EditorCloseEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditorCloseEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "editor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditorCloseEvent {
    return new EditorCloseEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditorCloseEvent {
    return new EditorCloseEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditorCloseEvent {
    return new EditorCloseEvent().fromJsonString(jsonString, options);
  }

  static equals(a: EditorCloseEvent | PlainMessage<EditorCloseEvent> | undefined, b: EditorCloseEvent | PlainMessage<EditorCloseEvent> | undefined): boolean {
    return proto3.util.equals(EditorCloseEvent, a, b);
  }
}

/**
 * aiserver.v1.TabCloseEvent
 *
 * @generated from message aiserver.v1.TabCloseEvent
 */
export class TabCloseEvent extends Message<TabCloseEvent> {
  /**
   * @generated from field: aiserver.v1.MaybeDefinedPointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: MaybeDefinedPointInTimeModel;

  constructor(data?: PartialMessage<TabCloseEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TabCloseEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: MaybeDefinedPointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TabCloseEvent {
    return new TabCloseEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TabCloseEvent {
    return new TabCloseEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TabCloseEvent {
    return new TabCloseEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TabCloseEvent | PlainMessage<TabCloseEvent> | undefined, b: TabCloseEvent | PlainMessage<TabCloseEvent> | undefined): boolean {
    return proto3.util.equals(TabCloseEvent, a, b);
  }
}

/**
 * aiserver.v1.ModelAddedEvent
 *
 * @generated from message aiserver.v1.ModelAddedEvent
 */
export class ModelAddedEvent extends Message<ModelAddedEvent> {
  /**
   * @generated from field: aiserver.v1.MaybeDefinedPointInTimeModel point_in_time_model = 1;
   */
  pointInTimeModel?: MaybeDefinedPointInTimeModel;

  /**
   * @generated from field: string full_uri = 2;
   */
  fullUri = "";

  /**
   * @generated from field: string model_id = 3;
   */
  modelId = "";

  /**
   * @generated from field: string uri_scheme = 4;
   */
  uriScheme = "";

  /**
   * @generated from field: bool is_too_large_for_syncing = 5;
   */
  isTooLargeForSyncing = false;

  /**
   * @generated from field: bool is_too_large_for_tokenization = 6;
   */
  isTooLargeForTokenization = false;

  /**
   * @generated from field: bool is_too_large_for_heap_operation = 7;
   */
  isTooLargeForHeapOperation = false;

  constructor(data?: PartialMessage<ModelAddedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ModelAddedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_in_time_model", kind: "message", T: MaybeDefinedPointInTimeModel },
    { no: 2, name: "full_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uri_scheme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_too_large_for_syncing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "is_too_large_for_tokenization", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "is_too_large_for_heap_operation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelAddedEvent {
    return new ModelAddedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelAddedEvent {
    return new ModelAddedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelAddedEvent {
    return new ModelAddedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ModelAddedEvent | PlainMessage<ModelAddedEvent> | undefined, b: ModelAddedEvent | PlainMessage<ModelAddedEvent> | undefined): boolean {
    return proto3.util.equals(ModelAddedEvent, a, b);
  }
}

/**
 * aiserver.v1.AnythingQuickAccessItem
 *
 * @generated from message aiserver.v1.AnythingQuickAccessItem
 */
export class AnythingQuickAccessItem extends Message<AnythingQuickAccessItem> {
  /**
   * @generated from oneof aiserver.v1.AnythingQuickAccessItem.item
   */
  item: {
    /**
     * @generated from field: aiserver.v1.AnythingQuickAccessItem.Resource resource = 1;
     */
    value: AnythingQuickAccessItem_Resource;
    case: "resource";
  } | {
    /**
     * @generated from field: string separator = 2;
     */
    value: string;
    case: "separator";
  } | {
    /**
     * @generated from field: string section = 3;
     */
    value: string;
    case: "section";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AnythingQuickAccessItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AnythingQuickAccessItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: AnythingQuickAccessItem_Resource, oneof: "item" },
    { no: 2, name: "separator", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "item" },
    { no: 3, name: "section", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "item" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnythingQuickAccessItem {
    return new AnythingQuickAccessItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnythingQuickAccessItem {
    return new AnythingQuickAccessItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnythingQuickAccessItem {
    return new AnythingQuickAccessItem().fromJsonString(jsonString, options);
  }

  static equals(a: AnythingQuickAccessItem | PlainMessage<AnythingQuickAccessItem> | undefined, b: AnythingQuickAccessItem | PlainMessage<AnythingQuickAccessItem> | undefined): boolean {
    return proto3.util.equals(AnythingQuickAccessItem, a, b);
  }
}

/**
 * aiserver.v1.AnythingQuickAccessItem.Resource
 *
 * @generated from message aiserver.v1.AnythingQuickAccessItem.Resource
 */
export class AnythingQuickAccessItem_Resource extends Message<AnythingQuickAccessItem_Resource> {
  /**
   * @generated from field: optional aiserver.v1.PointInTimeModel model = 1;
   */
  model?: PointInTimeModel;

  /**
   * @generated from field: optional aiserver.v1.IRange range = 2;
   */
  range?: IRange;

  /**
   * @generated from field: optional string uri = 3;
   */
  uri?: string;

  constructor(data?: PartialMessage<AnythingQuickAccessItem_Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AnythingQuickAccessItem.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "message", T: PointInTimeModel, opt: true },
    { no: 2, name: "range", kind: "message", T: IRange, opt: true },
    { no: 3, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnythingQuickAccessItem_Resource {
    return new AnythingQuickAccessItem_Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnythingQuickAccessItem_Resource {
    return new AnythingQuickAccessItem_Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnythingQuickAccessItem_Resource {
    return new AnythingQuickAccessItem_Resource().fromJsonString(jsonString, options);
  }

  static equals(a: AnythingQuickAccessItem_Resource | PlainMessage<AnythingQuickAccessItem_Resource> | undefined, b: AnythingQuickAccessItem_Resource | PlainMessage<AnythingQuickAccessItem_Resource> | undefined): boolean {
    return proto3.util.equals(AnythingQuickAccessItem_Resource, a, b);
  }
}

/**
 * aiserver.v1.AnythingQuickAccessSelectionEvent
 *
 * @generated from message aiserver.v1.AnythingQuickAccessSelectionEvent
 */
export class AnythingQuickAccessSelectionEvent extends Message<AnythingQuickAccessSelectionEvent> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * @generated from field: repeated aiserver.v1.AnythingQuickAccessItem items = 2;
   */
  items: AnythingQuickAccessItem[] = [];

  /**
   * @generated from field: repeated int32 selected_indices = 3;
   */
  selectedIndices: number[] = [];

  constructor(data?: PartialMessage<AnythingQuickAccessSelectionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AnythingQuickAccessSelectionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "items", kind: "message", T: AnythingQuickAccessItem, repeated: true },
    { no: 3, name: "selected_indices", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnythingQuickAccessSelectionEvent {
    return new AnythingQuickAccessSelectionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnythingQuickAccessSelectionEvent {
    return new AnythingQuickAccessSelectionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnythingQuickAccessSelectionEvent {
    return new AnythingQuickAccessSelectionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AnythingQuickAccessSelectionEvent | PlainMessage<AnythingQuickAccessSelectionEvent> | undefined, b: AnythingQuickAccessSelectionEvent | PlainMessage<AnythingQuickAccessSelectionEvent> | undefined): boolean {
    return proto3.util.equals(AnythingQuickAccessSelectionEvent, a, b);
  }
}

/**
 * aiserver.v1.LspSuggestionEvent
 *
 * @generated from message aiserver.v1.LspSuggestionEvent
 */
export class LspSuggestionEvent extends Message<LspSuggestionEvent> {
  /**
   * @generated from field: repeated string suggestions = 1;
   */
  suggestions: string[] = [];

  /**
   * @generated from field: optional string request_id = 2;
   */
  requestId?: string;

  /**
   * @generated from field: optional string editor_id = 3;
   */
  editorId?: string;

  /**
   * @generated from field: aiserver.v1.PointInTimeModel point_in_time_model = 4;
   */
  pointInTimeModel?: PointInTimeModel;

  constructor(data?: PartialMessage<LspSuggestionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.LspSuggestionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "editor_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "point_in_time_model", kind: "message", T: PointInTimeModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LspSuggestionEvent {
    return new LspSuggestionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LspSuggestionEvent {
    return new LspSuggestionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LspSuggestionEvent {
    return new LspSuggestionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: LspSuggestionEvent | PlainMessage<LspSuggestionEvent> | undefined, b: LspSuggestionEvent | PlainMessage<LspSuggestionEvent> | undefined): boolean {
    return proto3.util.equals(LspSuggestionEvent, a, b);
  }
}

/**
 * aiserver.v1.CppSessionEvent
 *
 * @generated from message aiserver.v1.CppSessionEvent
 */
export class CppSessionEvent extends Message<CppSessionEvent> {
  /**
   * @generated from oneof aiserver.v1.CppSessionEvent.event
   */
  event: {
    /**
     * @generated from field: aiserver.v1.CppAcceptEventNew accept_event = 2;
     */
    value: CppAcceptEventNew;
    case: "acceptEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppRejectEventNew reject_event = 3;
     */
    value: CppRejectEventNew;
    case: "rejectEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppManualTriggerEventNew manual_trigger_event = 4;
     */
    value: CppManualTriggerEventNew;
    case: "manualTriggerEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppStoppedTrackingModelEvent stopped_tracking_model_event = 6;
     */
    value: CppStoppedTrackingModelEvent;
    case: "stoppedTrackingModelEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppSuggestEvent suggest_event = 7;
     */
    value: CppSuggestEvent;
    case: "suggestEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppLinterErrorEvent linter_error_event = 8;
     */
    value: CppLinterErrorEvent;
    case: "linterErrorEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppDebouncedCursorMovementEvent debounced_cursor_movement_event = 9;
     */
    value: CppDebouncedCursorMovementEvent;
    case: "debouncedCursorMovementEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppEditorChangedEvent editor_changed_event = 10;
     */
    value: CppEditorChangedEvent;
    case: "editorChangedEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppCopyEvent copy_event = 11;
     */
    value: CppCopyEvent;
    case: "copyEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppChangeQuickActionEvent quick_action_event = 13;
     */
    value: CppChangeQuickActionEvent;
    case: "quickActionEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppQuickActionFireEvent quick_action_fire_event = 14;
     */
    value: CppQuickActionFireEvent;
    case: "quickActionFireEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.ModelOpenedEvent model_opened_event = 15;
     */
    value: ModelOpenedEvent;
    case: "modelOpenedEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CmdKEvent cmd_k_event = 17;
     */
    value: CmdKEvent;
    case: "cmdKEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.ChatEvent chat_event = 18;
     */
    value: ChatEvent;
    case: "chatEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.AiRequestEvent ai_event = 19;
     */
    value: AiRequestEvent;
    case: "aiEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.ScrollEvent scroll_event = 21;
     */
    value: ScrollEvent;
    case: "scrollEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.EditorCloseEvent editor_close_event = 22;
     */
    value: EditorCloseEvent;
    case: "editorCloseEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.TabCloseEvent tab_close_event = 23;
     */
    value: TabCloseEvent;
    case: "tabCloseEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.ModelAddedEvent model_added_event = 33;
     */
    value: ModelAddedEvent;
    case: "modelAddedEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppPartialAcceptEvent partial_accept_event = 26;
     */
    value: CppPartialAcceptEvent;
    case: "partialAcceptEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.AcceptCursorPredictionEvent accept_cursor_prediction_event = 27;
     */
    value: AcceptCursorPredictionEvent;
    case: "acceptCursorPredictionEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.RejectCursorPredictionEvent reject_cursor_prediction_event = 28;
     */
    value: RejectCursorPredictionEvent;
    case: "rejectCursorPredictionEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.SuggestCursorPredictionEvent suggest_cursor_prediction_event = 29;
     */
    value: SuggestCursorPredictionEvent;
    case: "suggestCursorPredictionEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppTriggerEvent cpp_trigger_event = 30;
     */
    value: CppTriggerEvent;
    case: "cppTriggerEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.FinishedCppGenerationEvent finished_cpp_generation_event = 31;
     */
    value: FinishedCppGenerationEvent;
    case: "finishedCppGenerationEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotEvent bug_bot_event = 32;
     */
    value: BugBotEvent;
    case: "bugBotEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.BugBotLinterEvent bug_bot_linter_event = 34;
     */
    value: BugBotLinterEvent;
    case: "bugBotLinterEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.AnythingQuickAccessSelectionEvent anything_quick_access_selection_event = 35;
     */
    value: AnythingQuickAccessSelectionEvent;
    case: "anythingQuickAccessSelectionEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.LspSuggestionEvent lsp_suggestion_event = 36;
     */
    value: LspSuggestionEvent;
    case: "lspSuggestionEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.NtpEvent ntp_event = 37;
     */
    value: NtpEvent;
    case: "ntpEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.RepoEvent repo_event = 38;
     */
    value: RepoEvent;
    case: "repoEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.GitEvent git_event = 39;
     */
    value: GitEvent;
    case: "gitEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.ToolCallEvent tool_call_event = 40;
     */
    value: ToolCallEvent;
    case: "toolCallEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.BackgroundFilesEvent background_files_event = 16;
     */
    value: BackgroundFilesEvent;
    case: "backgroundFilesEvent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: double performance_now_timestamp = 5;
   */
  performanceNowTimestamp = 0;

  /**
   * @generated from field: optional double performance_time_origin = 25;
   */
  performanceTimeOrigin?: number;

  /**
   * @generated from field: optional int64 global_index = 41;
   */
  globalIndex?: bigint;

  /**
   * @generated from field: optional double performance_now_flush_time = 42;
   */
  performanceNowFlushTime?: number;

  /**
   * @generated from field: optional int32 event_index = 43;
   */
  eventIndex?: number;

  /**
   * @generated from field: optional int32 flush_index = 44;
   */
  flushIndex?: number;

  /**
   * @generated from field: optional int32 global_index_v2 = 45;
   */
  globalIndexV2?: number;

  constructor(data?: PartialMessage<CppSessionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppSessionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "accept_event", kind: "message", T: CppAcceptEventNew, oneof: "event" },
    { no: 3, name: "reject_event", kind: "message", T: CppRejectEventNew, oneof: "event" },
    { no: 4, name: "manual_trigger_event", kind: "message", T: CppManualTriggerEventNew, oneof: "event" },
    { no: 6, name: "stopped_tracking_model_event", kind: "message", T: CppStoppedTrackingModelEvent, oneof: "event" },
    { no: 7, name: "suggest_event", kind: "message", T: CppSuggestEvent, oneof: "event" },
    { no: 8, name: "linter_error_event", kind: "message", T: CppLinterErrorEvent, oneof: "event" },
    { no: 9, name: "debounced_cursor_movement_event", kind: "message", T: CppDebouncedCursorMovementEvent, oneof: "event" },
    { no: 10, name: "editor_changed_event", kind: "message", T: CppEditorChangedEvent, oneof: "event" },
    { no: 11, name: "copy_event", kind: "message", T: CppCopyEvent, oneof: "event" },
    { no: 13, name: "quick_action_event", kind: "message", T: CppChangeQuickActionEvent, oneof: "event" },
    { no: 14, name: "quick_action_fire_event", kind: "message", T: CppQuickActionFireEvent, oneof: "event" },
    { no: 15, name: "model_opened_event", kind: "message", T: ModelOpenedEvent, oneof: "event" },
    { no: 17, name: "cmd_k_event", kind: "message", T: CmdKEvent, oneof: "event" },
    { no: 18, name: "chat_event", kind: "message", T: ChatEvent, oneof: "event" },
    { no: 19, name: "ai_event", kind: "message", T: AiRequestEvent, oneof: "event" },
    { no: 21, name: "scroll_event", kind: "message", T: ScrollEvent, oneof: "event" },
    { no: 22, name: "editor_close_event", kind: "message", T: EditorCloseEvent, oneof: "event" },
    { no: 23, name: "tab_close_event", kind: "message", T: TabCloseEvent, oneof: "event" },
    { no: 33, name: "model_added_event", kind: "message", T: ModelAddedEvent, oneof: "event" },
    { no: 26, name: "partial_accept_event", kind: "message", T: CppPartialAcceptEvent, oneof: "event" },
    { no: 27, name: "accept_cursor_prediction_event", kind: "message", T: AcceptCursorPredictionEvent, oneof: "event" },
    { no: 28, name: "reject_cursor_prediction_event", kind: "message", T: RejectCursorPredictionEvent, oneof: "event" },
    { no: 29, name: "suggest_cursor_prediction_event", kind: "message", T: SuggestCursorPredictionEvent, oneof: "event" },
    { no: 30, name: "cpp_trigger_event", kind: "message", T: CppTriggerEvent, oneof: "event" },
    { no: 31, name: "finished_cpp_generation_event", kind: "message", T: FinishedCppGenerationEvent, oneof: "event" },
    { no: 32, name: "bug_bot_event", kind: "message", T: BugBotEvent, oneof: "event" },
    { no: 34, name: "bug_bot_linter_event", kind: "message", T: BugBotLinterEvent, oneof: "event" },
    { no: 35, name: "anything_quick_access_selection_event", kind: "message", T: AnythingQuickAccessSelectionEvent, oneof: "event" },
    { no: 36, name: "lsp_suggestion_event", kind: "message", T: LspSuggestionEvent, oneof: "event" },
    { no: 37, name: "ntp_event", kind: "message", T: NtpEvent, oneof: "event" },
    { no: 38, name: "repo_event", kind: "message", T: RepoEvent, oneof: "event" },
    { no: 39, name: "git_event", kind: "message", T: GitEvent, oneof: "event" },
    { no: 40, name: "tool_call_event", kind: "message", T: ToolCallEvent, oneof: "event" },
    { no: 16, name: "background_files_event", kind: "message", T: BackgroundFilesEvent, oneof: "event" },
    { no: 5, name: "performance_now_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 25, name: "performance_time_origin", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 41, name: "global_index", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 42, name: "performance_now_flush_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 43, name: "event_index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 44, name: "flush_index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 45, name: "global_index_v2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppSessionEvent {
    return new CppSessionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppSessionEvent {
    return new CppSessionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppSessionEvent {
    return new CppSessionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppSessionEvent | PlainMessage<CppSessionEvent> | undefined, b: CppSessionEvent | PlainMessage<CppSessionEvent> | undefined): boolean {
    return proto3.util.equals(CppSessionEvent, a, b);
  }
}

/**
 * aiserver.v1.CppAppendRequest
 *
 * @generated from message aiserver.v1.CppAppendRequest
 */
export class CppAppendRequest extends Message<CppAppendRequest> {
  /**
   * @generated from field: bytes changes = 1;
   */
  changes = new Uint8Array(0);

  constructor(data?: PartialMessage<CppAppendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppAppendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppAppendRequest {
    return new CppAppendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppAppendRequest {
    return new CppAppendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppAppendRequest {
    return new CppAppendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CppAppendRequest | PlainMessage<CppAppendRequest> | undefined, b: CppAppendRequest | PlainMessage<CppAppendRequest> | undefined): boolean {
    return proto3.util.equals(CppAppendRequest, a, b);
  }
}

/**
 * aiserver.v1.CppAppendResponse
 *
 * @generated from message aiserver.v1.CppAppendResponse
 */
export class CppAppendResponse extends Message<CppAppendResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<CppAppendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppAppendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppAppendResponse {
    return new CppAppendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppAppendResponse {
    return new CppAppendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppAppendResponse {
    return new CppAppendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CppAppendResponse | PlainMessage<CppAppendResponse> | undefined, b: CppAppendResponse | PlainMessage<CppAppendResponse> | undefined): boolean {
    return proto3.util.equals(CppAppendResponse, a, b);
  }
}

/**
 * aiserver.v1.EditHistoryAppendChangesRequest
 *
 * @generated from message aiserver.v1.EditHistoryAppendChangesRequest
 */
export class EditHistoryAppendChangesRequest extends Message<EditHistoryAppendChangesRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: string model_uuid = 2;
   */
  modelUuid = "";

  /**
   * @generated from field: optional string starting_model_value = 3;
   */
  startingModelValue?: string;

  /**
   * @generated from field: optional int32 starting_model_version = 10;
   */
  startingModelVersion?: number;

  /**
   * @generated from field: string relative_path = 5;
   */
  relativePath = "";

  /**
   * @generated from field: string uri = 14;
   */
  uri = "";

  /**
   * @generated from field: string client_version = 6;
   */
  clientVersion = "";

  /**
   * @generated from field: optional string client_commit = 8;
   */
  clientCommit?: string;

  /**
   * @generated from field: repeated aiserver.v1.ModelChange changes = 4;
   */
  changes: ModelChange[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CppSessionEvent session_events = 9;
   */
  sessionEvents: CppSessionEvent[] = [];

  /**
   * @generated from field: bool model_changes_may_be_out_of_order = 11;
   */
  modelChangesMayBeOutOfOrder = false;

  /**
   * @generated from field: aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus privacy_mode_status = 12;
   */
  privacyModeStatus = EditHistoryAppendChangesRequest_PrivacyModeStatus.UNSPECIFIED;

  /**
   * @generated from field: repeated aiserver.v1.CppHistoryAppendEvent events = 7;
   */
  events: CppHistoryAppendEvent[] = [];

  /**
   * @generated from field: float time_origin = 13;
   */
  timeOrigin = 0;

  constructor(data?: PartialMessage<EditHistoryAppendChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditHistoryAppendChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "starting_model_value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "starting_model_version", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "client_commit", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "changes", kind: "message", T: ModelChange, repeated: true },
    { no: 9, name: "session_events", kind: "message", T: CppSessionEvent, repeated: true },
    { no: 11, name: "model_changes_may_be_out_of_order", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "privacy_mode_status", kind: "enum", T: proto3.getEnumType(EditHistoryAppendChangesRequest_PrivacyModeStatus) },
    { no: 7, name: "events", kind: "message", T: CppHistoryAppendEvent, repeated: true },
    { no: 13, name: "time_origin", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditHistoryAppendChangesRequest {
    return new EditHistoryAppendChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditHistoryAppendChangesRequest {
    return new EditHistoryAppendChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditHistoryAppendChangesRequest {
    return new EditHistoryAppendChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EditHistoryAppendChangesRequest | PlainMessage<EditHistoryAppendChangesRequest> | undefined, b: EditHistoryAppendChangesRequest | PlainMessage<EditHistoryAppendChangesRequest> | undefined): boolean {
    return proto3.util.equals(EditHistoryAppendChangesRequest, a, b);
  }
}

/**
 * aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus
 *
 * @generated from enum aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus
 */
export enum EditHistoryAppendChangesRequest_PrivacyModeStatus {
  /**
   * @generated from enum value: PRIVACY_MODE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PRIVACY_MODE_STATUS_PRIVACY_ENABLED = 1;
   */
  PRIVACY_ENABLED = 1,

  /**
   * @generated from enum value: PRIVACY_MODE_STATUS_IMPLICIT_NO_PRIVACY = 2;
   */
  IMPLICIT_NO_PRIVACY = 2,

  /**
   * @generated from enum value: PRIVACY_MODE_STATUS_EXPLICIT_NO_PRIVACY = 3;
   */
  EXPLICIT_NO_PRIVACY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(EditHistoryAppendChangesRequest_PrivacyModeStatus)
proto3.util.setEnumType(EditHistoryAppendChangesRequest_PrivacyModeStatus, "aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus", [
  { no: 0, name: "PRIVACY_MODE_STATUS_UNSPECIFIED" },
  { no: 1, name: "PRIVACY_MODE_STATUS_PRIVACY_ENABLED" },
  { no: 2, name: "PRIVACY_MODE_STATUS_IMPLICIT_NO_PRIVACY" },
  { no: 3, name: "PRIVACY_MODE_STATUS_EXPLICIT_NO_PRIVACY" },
]);

/**
 * aiserver.v1.EditHistoryAppendChangesResponse
 *
 * @generated from message aiserver.v1.EditHistoryAppendChangesResponse
 */
export class EditHistoryAppendChangesResponse extends Message<EditHistoryAppendChangesResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<EditHistoryAppendChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditHistoryAppendChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditHistoryAppendChangesResponse {
    return new EditHistoryAppendChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditHistoryAppendChangesResponse {
    return new EditHistoryAppendChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditHistoryAppendChangesResponse {
    return new EditHistoryAppendChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EditHistoryAppendChangesResponse | PlainMessage<EditHistoryAppendChangesResponse> | undefined, b: EditHistoryAppendChangesResponse | PlainMessage<EditHistoryAppendChangesResponse> | undefined): boolean {
    return proto3.util.equals(EditHistoryAppendChangesResponse, a, b);
  }
}

/**
 * aiserver.v1.CppEditHistoryStatusRequest
 *
 * @generated from message aiserver.v1.CppEditHistoryStatusRequest
 */
export class CppEditHistoryStatusRequest extends Message<CppEditHistoryStatusRequest> {
  constructor(data?: PartialMessage<CppEditHistoryStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppEditHistoryStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppEditHistoryStatusRequest {
    return new CppEditHistoryStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppEditHistoryStatusRequest {
    return new CppEditHistoryStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppEditHistoryStatusRequest {
    return new CppEditHistoryStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CppEditHistoryStatusRequest | PlainMessage<CppEditHistoryStatusRequest> | undefined, b: CppEditHistoryStatusRequest | PlainMessage<CppEditHistoryStatusRequest> | undefined): boolean {
    return proto3.util.equals(CppEditHistoryStatusRequest, a, b);
  }
}

/**
 * aiserver.v1.CppEditHistoryStatusResponse
 *
 * @generated from message aiserver.v1.CppEditHistoryStatusResponse
 */
export class CppEditHistoryStatusResponse extends Message<CppEditHistoryStatusResponse> {
  /**
   * @generated from field: bool on = 1;
   */
  on = false;

  /**
   * @generated from field: bool only_if_explicit = 2;
   */
  onlyIfExplicit = false;

  constructor(data?: PartialMessage<CppEditHistoryStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppEditHistoryStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "on", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "only_if_explicit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppEditHistoryStatusResponse {
    return new CppEditHistoryStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppEditHistoryStatusResponse {
    return new CppEditHistoryStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppEditHistoryStatusResponse {
    return new CppEditHistoryStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CppEditHistoryStatusResponse | PlainMessage<CppEditHistoryStatusResponse> | undefined, b: CppEditHistoryStatusResponse | PlainMessage<CppEditHistoryStatusResponse> | undefined): boolean {
    return proto3.util.equals(CppEditHistoryStatusResponse, a, b);
  }
}

/**
 * aiserver.v1.BlockDiffPatch
 *
 * @generated from message aiserver.v1.BlockDiffPatch
 */
export class BlockDiffPatch extends Message<BlockDiffPatch> {
  /**
   * @generated from field: aiserver.v1.BlockDiffPatch.ModelWindow start_model_window = 1;
   */
  startModelWindow?: BlockDiffPatch_ModelWindow;

  /**
   * @generated from field: repeated aiserver.v1.BlockDiffPatch.Change changes = 3;
   */
  changes: BlockDiffPatch_Change[] = [];

  /**
   * @generated from field: string relative_path = 4;
   */
  relativePath = "";

  /**
   * @generated from field: string model_uuid = 7;
   */
  modelUuid = "";

  /**
   * @generated from field: int32 start_from_change_index = 5;
   */
  startFromChangeIndex = 0;

  constructor(data?: PartialMessage<BlockDiffPatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BlockDiffPatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_model_window", kind: "message", T: BlockDiffPatch_ModelWindow },
    { no: 3, name: "changes", kind: "message", T: BlockDiffPatch_Change, repeated: true },
    { no: 4, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "model_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "start_from_change_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockDiffPatch {
    return new BlockDiffPatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockDiffPatch {
    return new BlockDiffPatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockDiffPatch {
    return new BlockDiffPatch().fromJsonString(jsonString, options);
  }

  static equals(a: BlockDiffPatch | PlainMessage<BlockDiffPatch> | undefined, b: BlockDiffPatch | PlainMessage<BlockDiffPatch> | undefined): boolean {
    return proto3.util.equals(BlockDiffPatch, a, b);
  }
}

/**
 * aiserver.v1.BlockDiffPatch.Change
 *
 * @generated from message aiserver.v1.BlockDiffPatch.Change
 */
export class BlockDiffPatch_Change extends Message<BlockDiffPatch_Change> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: aiserver.v1.IRange range = 2;
   */
  range?: IRange;

  constructor(data?: PartialMessage<BlockDiffPatch_Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BlockDiffPatch.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: IRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockDiffPatch_Change {
    return new BlockDiffPatch_Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockDiffPatch_Change {
    return new BlockDiffPatch_Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockDiffPatch_Change {
    return new BlockDiffPatch_Change().fromJsonString(jsonString, options);
  }

  static equals(a: BlockDiffPatch_Change | PlainMessage<BlockDiffPatch_Change> | undefined, b: BlockDiffPatch_Change | PlainMessage<BlockDiffPatch_Change> | undefined): boolean {
    return proto3.util.equals(BlockDiffPatch_Change, a, b);
  }
}

/**
 * aiserver.v1.BlockDiffPatch.ModelWindow
 *
 * @generated from message aiserver.v1.BlockDiffPatch.ModelWindow
 */
export class BlockDiffPatch_ModelWindow extends Message<BlockDiffPatch_ModelWindow> {
  /**
   * @generated from field: repeated string lines = 1;
   */
  lines: string[] = [];

  /**
   * @generated from field: int32 start_line_number = 2;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 end_line_number = 3;
   */
  endLineNumber = 0;

  constructor(data?: PartialMessage<BlockDiffPatch_ModelWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BlockDiffPatch.ModelWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockDiffPatch_ModelWindow {
    return new BlockDiffPatch_ModelWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockDiffPatch_ModelWindow {
    return new BlockDiffPatch_ModelWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockDiffPatch_ModelWindow {
    return new BlockDiffPatch_ModelWindow().fromJsonString(jsonString, options);
  }

  static equals(a: BlockDiffPatch_ModelWindow | PlainMessage<BlockDiffPatch_ModelWindow> | undefined, b: BlockDiffPatch_ModelWindow | PlainMessage<BlockDiffPatch_ModelWindow> | undefined): boolean {
    return proto3.util.equals(BlockDiffPatch_ModelWindow, a, b);
  }
}

/**
 * aiserver.v1.CppHistoryAppendEvent
 *
 * @generated from message aiserver.v1.CppHistoryAppendEvent
 */
export class CppHistoryAppendEvent extends Message<CppHistoryAppendEvent> {
  /**
   * @generated from oneof aiserver.v1.CppHistoryAppendEvent.event
   */
  event: {
    /**
     * @generated from field: aiserver.v1.ModelChange model_change = 1;
     */
    value: ModelChange;
    case: "modelChange";
  } | {
    /**
     * @generated from field: aiserver.v1.CppAcceptEvent accept_event = 2;
     */
    value: CppAcceptEvent;
    case: "acceptEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppRejectEvent reject_event = 3;
     */
    value: CppRejectEvent;
    case: "rejectEvent";
  } | {
    /**
     * @generated from field: aiserver.v1.CppManualTriggerEvent manual_trigger_event = 4;
     */
    value: CppManualTriggerEvent;
    case: "manualTriggerEvent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional string final_model_hash = 10;
   */
  finalModelHash?: string;

  constructor(data?: PartialMessage<CppHistoryAppendEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppHistoryAppendEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model_change", kind: "message", T: ModelChange, oneof: "event" },
    { no: 2, name: "accept_event", kind: "message", T: CppAcceptEvent, oneof: "event" },
    { no: 3, name: "reject_event", kind: "message", T: CppRejectEvent, oneof: "event" },
    { no: 4, name: "manual_trigger_event", kind: "message", T: CppManualTriggerEvent, oneof: "event" },
    { no: 10, name: "final_model_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppHistoryAppendEvent {
    return new CppHistoryAppendEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppHistoryAppendEvent {
    return new CppHistoryAppendEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppHistoryAppendEvent {
    return new CppHistoryAppendEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppHistoryAppendEvent | PlainMessage<CppHistoryAppendEvent> | undefined, b: CppHistoryAppendEvent | PlainMessage<CppHistoryAppendEvent> | undefined): boolean {
    return proto3.util.equals(CppHistoryAppendEvent, a, b);
  }
}

/**
 * aiserver.v1.CppManualTriggerEvent
 *
 * @generated from message aiserver.v1.CppManualTriggerEvent
 */
export class CppManualTriggerEvent extends Message<CppManualTriggerEvent> {
  /**
   * @generated from field: aiserver.v1.CursorPosition position = 2;
   */
  position?: CursorPosition;

  constructor(data?: PartialMessage<CppManualTriggerEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppManualTriggerEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "position", kind: "message", T: CursorPosition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppManualTriggerEvent {
    return new CppManualTriggerEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppManualTriggerEvent {
    return new CppManualTriggerEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppManualTriggerEvent {
    return new CppManualTriggerEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppManualTriggerEvent | PlainMessage<CppManualTriggerEvent> | undefined, b: CppManualTriggerEvent | PlainMessage<CppManualTriggerEvent> | undefined): boolean {
    return proto3.util.equals(CppManualTriggerEvent, a, b);
  }
}

/**
 * aiserver.v1.CppAcceptEvent
 *
 * @generated from message aiserver.v1.CppAcceptEvent
 */
export class CppAcceptEvent extends Message<CppAcceptEvent> {
  /**
   * @generated from field: aiserver.v1.CppSuggestion cpp_suggestion = 1;
   */
  cppSuggestion?: CppSuggestion;

  constructor(data?: PartialMessage<CppAcceptEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppAcceptEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpp_suggestion", kind: "message", T: CppSuggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppAcceptEvent {
    return new CppAcceptEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppAcceptEvent {
    return new CppAcceptEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppAcceptEvent {
    return new CppAcceptEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppAcceptEvent | PlainMessage<CppAcceptEvent> | undefined, b: CppAcceptEvent | PlainMessage<CppAcceptEvent> | undefined): boolean {
    return proto3.util.equals(CppAcceptEvent, a, b);
  }
}

/**
 * aiserver.v1.CppRejectEvent
 *
 * @generated from message aiserver.v1.CppRejectEvent
 */
export class CppRejectEvent extends Message<CppRejectEvent> {
  /**
   * @generated from field: aiserver.v1.CppSuggestion cpp_suggestion = 1;
   */
  cppSuggestion?: CppSuggestion;

  constructor(data?: PartialMessage<CppRejectEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppRejectEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpp_suggestion", kind: "message", T: CppSuggestion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppRejectEvent {
    return new CppRejectEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppRejectEvent {
    return new CppRejectEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppRejectEvent {
    return new CppRejectEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CppRejectEvent | PlainMessage<CppRejectEvent> | undefined, b: CppRejectEvent | PlainMessage<CppRejectEvent> | undefined): boolean {
    return proto3.util.equals(CppRejectEvent, a, b);
  }
}

/**
 * aiserver.v1.CppSuggestion
 *
 * @generated from message aiserver.v1.CppSuggestion
 */
export class CppSuggestion extends Message<CppSuggestion> {
  /**
   * @generated from field: string suggestion_text = 1;
   */
  suggestionText = "";

  /**
   * @generated from field: aiserver.v1.IRange range = 2;
   */
  range?: IRange;

  /**
   * @generated from field: bool seen = 5;
   */
  seen = false;

  /**
   * @generated from field: aiserver.v1.SelectionWithOrientation editor_selection_before_peek = 6;
   */
  editorSelectionBeforePeek?: SelectionWithOrientation;

  /**
   * @generated from field: optional string binding_id = 7;
   */
  bindingId?: string;

  constructor(data?: PartialMessage<CppSuggestion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CppSuggestion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "suggestion_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "range", kind: "message", T: IRange },
    { no: 5, name: "seen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "editor_selection_before_peek", kind: "message", T: SelectionWithOrientation },
    { no: 7, name: "binding_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppSuggestion {
    return new CppSuggestion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppSuggestion {
    return new CppSuggestion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppSuggestion {
    return new CppSuggestion().fromJsonString(jsonString, options);
  }

  static equals(a: CppSuggestion | PlainMessage<CppSuggestion> | undefined, b: CppSuggestion | PlainMessage<CppSuggestion> | undefined): boolean {
    return proto3.util.equals(CppSuggestion, a, b);
  }
}

/**
 * aiserver.v1.NtpEvent
 *
 * @generated from message aiserver.v1.NtpEvent
 */
export class NtpEvent extends Message<NtpEvent> {
  /**
   * @generated from field: double originate_timestamp = 1;
   */
  originateTimestamp = 0;

  /**
   * @generated from field: double receive_timestamp = 2;
   */
  receiveTimestamp = 0;

  /**
   * @generated from field: double transmit_timestamp = 3;
   */
  transmitTimestamp = 0;

  /**
   * @generated from field: double destination_timestamp = 4;
   */
  destinationTimestamp = 0;

  constructor(data?: PartialMessage<NtpEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.NtpEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "originate_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "receive_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "transmit_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "destination_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NtpEvent {
    return new NtpEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NtpEvent {
    return new NtpEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NtpEvent {
    return new NtpEvent().fromJsonString(jsonString, options);
  }

  static equals(a: NtpEvent | PlainMessage<NtpEvent> | undefined, b: NtpEvent | PlainMessage<NtpEvent> | undefined): boolean {
    return proto3.util.equals(NtpEvent, a, b);
  }
}

/**
 * aiserver.v1.RepoEvent
 *
 * @generated from message aiserver.v1.RepoEvent
 */
export class RepoEvent extends Message<RepoEvent> {
  /**
   * @generated from field: string repo_owner = 1;
   */
  repoOwner = "";

  /**
   * @generated from field: string repo_name = 2;
   */
  repoName = "";

  /**
   * @generated from field: aiserver.v1.RepoEvent.Type event_type = 3;
   */
  eventType = RepoEvent_Type.UNSPECIFIED;

  constructor(data?: PartialMessage<RepoEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RepoEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "event_type", kind: "enum", T: proto3.getEnumType(RepoEvent_Type) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepoEvent {
    return new RepoEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepoEvent {
    return new RepoEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepoEvent {
    return new RepoEvent().fromJsonString(jsonString, options);
  }

  static equals(a: RepoEvent | PlainMessage<RepoEvent> | undefined, b: RepoEvent | PlainMessage<RepoEvent> | undefined): boolean {
    return proto3.util.equals(RepoEvent, a, b);
  }
}

/**
 * aiserver.v1.RepoEvent.Type
 *
 * @generated from enum aiserver.v1.RepoEvent.Type
 */
export enum RepoEvent_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_SYNCED = 1;
   */
  SYNCED = 1,

  /**
   * @generated from enum value: TYPE_LOADING = 2;
   */
  LOADING = 2,

  /**
   * @generated from enum value: TYPE_INDEXING_SETUP = 3;
   */
  INDEXING_SETUP = 3,

  /**
   * @generated from enum value: TYPE_INDEXING_INIT_FROM_SIMILAR_CODEBASE = 4;
   */
  INDEXING_INIT_FROM_SIMILAR_CODEBASE = 4,

  /**
   * @generated from enum value: TYPE_PAUSED = 5;
   */
  PAUSED = 5,

  /**
   * @generated from enum value: TYPE_INDEXING = 6;
   */
  INDEXING = 6,

  /**
   * @generated from enum value: TYPE_ERROR = 7;
   */
  ERROR = 7,

  /**
   * @generated from enum value: TYPE_NOT_AUTO_INDEXING = 8;
   */
  NOT_AUTO_INDEXING = 8,

  /**
   * @generated from enum value: TYPE_NOT_INDEXED = 9;
   */
  NOT_INDEXED = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(RepoEvent_Type)
proto3.util.setEnumType(RepoEvent_Type, "aiserver.v1.RepoEvent.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_SYNCED" },
  { no: 2, name: "TYPE_LOADING" },
  { no: 3, name: "TYPE_INDEXING_SETUP" },
  { no: 4, name: "TYPE_INDEXING_INIT_FROM_SIMILAR_CODEBASE" },
  { no: 5, name: "TYPE_PAUSED" },
  { no: 6, name: "TYPE_INDEXING" },
  { no: 7, name: "TYPE_ERROR" },
  { no: 8, name: "TYPE_NOT_AUTO_INDEXING" },
  { no: 9, name: "TYPE_NOT_INDEXED" },
]);

/**
 * aiserver.v1.GitEvent
 *
 * @generated from message aiserver.v1.GitEvent
 */
export class GitEvent extends Message<GitEvent> {
  /**
   * @generated from field: aiserver.v1.GitEvent.OperationType operation_type = 1;
   */
  operationType = GitEvent_OperationType.UNSPECIFIED;

  /**
   * @generated from field: string repository_path = 2;
   */
  repositoryPath = "";

  /**
   * @generated from field: bool operation_success = 3;
   */
  operationSuccess = false;

  /**
   * @generated from field: optional string branch_name = 4;
   */
  branchName?: string;

  /**
   * @generated from field: optional string error_message = 5;
   */
  errorMessage?: string;

  /**
   * @generated from field: optional bool is_default_branch = 6;
   */
  isDefaultBranch?: boolean;

  /**
   * @generated from field: optional string default_branch_name = 7;
   */
  defaultBranchName?: string;

  /**
   * @generated from field: optional string commit_hash = 8;
   */
  commitHash?: string;

  /**
   * @generated from field: optional string previous_commit_hash = 9;
   */
  previousCommitHash?: string;

  /**
   * @generated from field: optional string remote_url = 10;
   */
  remoteUrl?: string;

  constructor(data?: PartialMessage<GitEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GitEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_type", kind: "enum", T: proto3.getEnumType(GitEvent_OperationType) },
    { no: 2, name: "repository_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operation_success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "is_default_branch", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "default_branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "commit_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "previous_commit_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "remote_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitEvent {
    return new GitEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitEvent {
    return new GitEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitEvent {
    return new GitEvent().fromJsonString(jsonString, options);
  }

  static equals(a: GitEvent | PlainMessage<GitEvent> | undefined, b: GitEvent | PlainMessage<GitEvent> | undefined): boolean {
    return proto3.util.equals(GitEvent, a, b);
  }
}

/**
 * aiserver.v1.GitEvent.OperationType
 *
 * @generated from enum aiserver.v1.GitEvent.OperationType
 */
export enum GitEvent_OperationType {
  /**
   * @generated from enum value: OPERATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OPERATION_TYPE_COMMIT = 1;
   */
  COMMIT = 1,

  /**
   * @generated from enum value: OPERATION_TYPE_CHECKOUT = 2;
   */
  CHECKOUT = 2,

  /**
   * @generated from enum value: OPERATION_TYPE_PULL = 3;
   */
  PULL = 3,

  /**
   * @generated from enum value: OPERATION_TYPE_FETCH = 4;
   */
  FETCH = 4,

  /**
   * @generated from enum value: OPERATION_TYPE_MERGE = 5;
   */
  MERGE = 5,

  /**
   * @generated from enum value: OPERATION_TYPE_REBASE = 6;
   */
  REBASE = 6,

  /**
   * @generated from enum value: OPERATION_TYPE_STASH = 7;
   */
  STASH = 7,

  /**
   * @generated from enum value: OPERATION_TYPE_BRANCH = 8;
   */
  BRANCH = 8,

  /**
   * @generated from enum value: OPERATION_TYPE_TAG = 9;
   */
  TAG = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(GitEvent_OperationType)
proto3.util.setEnumType(GitEvent_OperationType, "aiserver.v1.GitEvent.OperationType", [
  { no: 0, name: "OPERATION_TYPE_UNSPECIFIED" },
  { no: 1, name: "OPERATION_TYPE_COMMIT" },
  { no: 2, name: "OPERATION_TYPE_CHECKOUT" },
  { no: 3, name: "OPERATION_TYPE_PULL" },
  { no: 4, name: "OPERATION_TYPE_FETCH" },
  { no: 5, name: "OPERATION_TYPE_MERGE" },
  { no: 6, name: "OPERATION_TYPE_REBASE" },
  { no: 7, name: "OPERATION_TYPE_STASH" },
  { no: 8, name: "OPERATION_TYPE_BRANCH" },
  { no: 9, name: "OPERATION_TYPE_TAG" },
]);

/**
 * aiserver.v1.ToolCallEvent
 *
 * @generated from message aiserver.v1.ToolCallEvent
 */
export class ToolCallEvent extends Message<ToolCallEvent> {
  /**
   * @generated from field: string tool_call_id = 1;
   */
  toolCallId = "";

  /**
   * @generated from field: string request_id = 2;
   */
  requestId = "";

  /**
   * @generated from field: string tool_name = 3;
   */
  toolName = "";

  constructor(data?: PartialMessage<ToolCallEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolCallEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool_call_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tool_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolCallEvent {
    return new ToolCallEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolCallEvent {
    return new ToolCallEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolCallEvent {
    return new ToolCallEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ToolCallEvent | PlainMessage<ToolCallEvent> | undefined, b: ToolCallEvent | PlainMessage<ToolCallEvent> | undefined): boolean {
    return proto3.util.equals(ToolCallEvent, a, b);
  }
}

/**
 * aiserver.v1.CodeResult
 *
 * @generated from message aiserver.v1.CodeResult
 */
export class CodeResult extends Message<CodeResult> {
  /**
   * @generated from field: aiserver.v1.CodeBlock code_block = 1;
   */
  codeBlock?: CodeBlock;

  /**
   * @generated from field: float score = 2;
   */
  score = 0;

  constructor(data?: PartialMessage<CodeResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CodeResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_block", kind: "message", T: CodeBlock },
    { no: 2, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeResult {
    return new CodeResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeResult {
    return new CodeResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeResult {
    return new CodeResult().fromJsonString(jsonString, options);
  }

  static equals(a: CodeResult | PlainMessage<CodeResult> | undefined, b: CodeResult | PlainMessage<CodeResult> | undefined): boolean {
    return proto3.util.equals(CodeResult, a, b);
  }
}

/**
 * aiserver.v1.RepositoryInfo
 *
 * @generated from message aiserver.v1.RepositoryInfo
 */
export class RepositoryInfo extends Message<RepositoryInfo> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated string remote_urls = 2;
   */
  remoteUrls: string[] = [];

  /**
   * @generated from field: repeated string remote_names = 3;
   */
  remoteNames: string[] = [];

  /**
   * @generated from field: string repo_name = 4;
   */
  repoName = "";

  /**
   * @generated from field: string repo_owner = 5;
   */
  repoOwner = "";

  /**
   * @generated from field: bool is_tracked = 6;
   */
  isTracked = false;

  /**
   * @generated from field: bool is_local = 7;
   */
  isLocal = false;

  /**
   * @generated from field: optional int32 num_files = 8;
   */
  numFiles?: number;

  /**
   * @generated from field: optional double orthogonal_transform_seed = 9;
   */
  orthogonalTransformSeed?: number;

  /**
   * @generated from field: optional aiserver.v1.EmbeddingModel preferred_embedding_model = 10;
   */
  preferredEmbeddingModel?: EmbeddingModel;

  /**
   * @generated from field: string workspace_uri = 11;
   */
  workspaceUri = "";

  /**
   * @generated from field: optional aiserver.v1.DatabaseProvider preferred_db_provider = 12;
   */
  preferredDbProvider?: DatabaseProvider;

  constructor(data?: PartialMessage<RepositoryInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RepositoryInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "remote_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "remote_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "repo_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "repo_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "is_tracked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "is_local", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "num_files", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "orthogonal_transform_seed", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 10, name: "preferred_embedding_model", kind: "enum", T: proto3.getEnumType(EmbeddingModel), opt: true },
    { no: 11, name: "workspace_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "preferred_db_provider", kind: "enum", T: proto3.getEnumType(DatabaseProvider), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepositoryInfo {
    return new RepositoryInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepositoryInfo {
    return new RepositoryInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepositoryInfo {
    return new RepositoryInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RepositoryInfo | PlainMessage<RepositoryInfo> | undefined, b: RepositoryInfo | PlainMessage<RepositoryInfo> | undefined): boolean {
    return proto3.util.equals(RepositoryInfo, a, b);
  }
}

/**
 * aiserver.v1.ReapplyParams
 *
 * @generated from message aiserver.v1.ReapplyParams
 */
export class ReapplyParams extends Message<ReapplyParams> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  constructor(data?: PartialMessage<ReapplyParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReapplyParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReapplyParams {
    return new ReapplyParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReapplyParams {
    return new ReapplyParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReapplyParams {
    return new ReapplyParams().fromJsonString(jsonString, options);
  }

  static equals(a: ReapplyParams | PlainMessage<ReapplyParams> | undefined, b: ReapplyParams | PlainMessage<ReapplyParams> | undefined): boolean {
    return proto3.util.equals(ReapplyParams, a, b);
  }
}

/**
 * aiserver.v1.ReapplyResult
 *
 * @generated from message aiserver.v1.ReapplyResult
 */
export class ReapplyResult extends Message<ReapplyResult> {
  /**
   * @generated from field: aiserver.v1.EditFileResult.FileDiff diff = 1;
   */
  diff?: EditFileResult_FileDiff;

  /**
   * @generated from field: bool is_applied = 2;
   */
  isApplied = false;

  /**
   * @generated from field: bool apply_failed = 3;
   */
  applyFailed = false;

  /**
   * @generated from field: repeated aiserver.v1.LinterError linter_errors = 4;
   */
  linterErrors: LinterError[] = [];

  /**
   * @generated from field: optional bool rejected = 5;
   */
  rejected?: boolean;

  constructor(data?: PartialMessage<ReapplyResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReapplyResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "diff", kind: "message", T: EditFileResult_FileDiff },
    { no: 2, name: "is_applied", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "apply_failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "linter_errors", kind: "message", T: LinterError, repeated: true },
    { no: 5, name: "rejected", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReapplyResult {
    return new ReapplyResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReapplyResult {
    return new ReapplyResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReapplyResult {
    return new ReapplyResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReapplyResult | PlainMessage<ReapplyResult> | undefined, b: ReapplyResult | PlainMessage<ReapplyResult> | undefined): boolean {
    return proto3.util.equals(ReapplyResult, a, b);
  }
}

/**
 * aiserver.v1.FetchRulesParams
 *
 * @generated from message aiserver.v1.FetchRulesParams
 */
export class FetchRulesParams extends Message<FetchRulesParams> {
  /**
   * @generated from field: repeated string rule_names = 1;
   */
  ruleNames: string[] = [];

  constructor(data?: PartialMessage<FetchRulesParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FetchRulesParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchRulesParams {
    return new FetchRulesParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchRulesParams {
    return new FetchRulesParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchRulesParams {
    return new FetchRulesParams().fromJsonString(jsonString, options);
  }

  static equals(a: FetchRulesParams | PlainMessage<FetchRulesParams> | undefined, b: FetchRulesParams | PlainMessage<FetchRulesParams> | undefined): boolean {
    return proto3.util.equals(FetchRulesParams, a, b);
  }
}

/**
 * aiserver.v1.FetchRulesResult
 *
 * @generated from message aiserver.v1.FetchRulesResult
 */
export class FetchRulesResult extends Message<FetchRulesResult> {
  /**
   * @generated from field: repeated aiserver.v1.CursorRule rules = 1;
   */
  rules: CursorRule[] = [];

  constructor(data?: PartialMessage<FetchRulesResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FetchRulesResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rules", kind: "message", T: CursorRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchRulesResult {
    return new FetchRulesResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchRulesResult {
    return new FetchRulesResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchRulesResult {
    return new FetchRulesResult().fromJsonString(jsonString, options);
  }

  static equals(a: FetchRulesResult | PlainMessage<FetchRulesResult> | undefined, b: FetchRulesResult | PlainMessage<FetchRulesResult> | undefined): boolean {
    return proto3.util.equals(FetchRulesResult, a, b);
  }
}

/**
 * aiserver.v1.ToolResultError
 *
 * @generated from message aiserver.v1.ToolResultError
 */
export class ToolResultError extends Message<ToolResultError> {
  /**
   * @generated from field: string client_visible_error_message = 1;
   */
  clientVisibleErrorMessage = "";

  /**
   * @generated from field: string model_visible_error_message = 2;
   */
  modelVisibleErrorMessage = "";

  /**
   * @generated from field: optional string actual_error_message_only_send_from_client_to_server_never_the_other_way_around_because_that_may_be_a_security_risk = 3;
   */
  actualErrorMessageOnlySendFromClientToServerNeverTheOtherWayAroundBecauseThatMayBeASecurityRisk?: string;

  /**
   * @generated from oneof aiserver.v1.ToolResultError.error_details
   */
  errorDetails: {
    /**
     * @generated from field: aiserver.v1.ToolResultError.EditFileError edit_file_error_details = 5;
     */
    value: ToolResultError_EditFileError;
    case: "editFileErrorDetails";
  } | {
    /**
     * @generated from field: aiserver.v1.ToolResultError.SearchReplaceError search_replace_error_details = 6;
     */
    value: ToolResultError_SearchReplaceError;
    case: "searchReplaceErrorDetails";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ToolResultError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolResultError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_visible_error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model_visible_error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "actual_error_message_only_send_from_client_to_server_never_the_other_way_around_because_that_may_be_a_security_risk", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "edit_file_error_details", kind: "message", T: ToolResultError_EditFileError, oneof: "error_details" },
    { no: 6, name: "search_replace_error_details", kind: "message", T: ToolResultError_SearchReplaceError, oneof: "error_details" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolResultError {
    return new ToolResultError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolResultError {
    return new ToolResultError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolResultError {
    return new ToolResultError().fromJsonString(jsonString, options);
  }

  static equals(a: ToolResultError | PlainMessage<ToolResultError> | undefined, b: ToolResultError | PlainMessage<ToolResultError> | undefined): boolean {
    return proto3.util.equals(ToolResultError, a, b);
  }
}

/**
 * aiserver.v1.ToolResultError.EditFileError
 *
 * @generated from message aiserver.v1.ToolResultError.EditFileError
 */
export class ToolResultError_EditFileError extends Message<ToolResultError_EditFileError> {
  /**
   * @generated from field: int32 num_lines_in_file_before_edit = 1;
   */
  numLinesInFileBeforeEdit = 0;

  constructor(data?: PartialMessage<ToolResultError_EditFileError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolResultError.EditFileError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "num_lines_in_file_before_edit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolResultError_EditFileError {
    return new ToolResultError_EditFileError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolResultError_EditFileError {
    return new ToolResultError_EditFileError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolResultError_EditFileError {
    return new ToolResultError_EditFileError().fromJsonString(jsonString, options);
  }

  static equals(a: ToolResultError_EditFileError | PlainMessage<ToolResultError_EditFileError> | undefined, b: ToolResultError_EditFileError | PlainMessage<ToolResultError_EditFileError> | undefined): boolean {
    return proto3.util.equals(ToolResultError_EditFileError, a, b);
  }
}

/**
 * aiserver.v1.ToolResultError.SearchReplaceError
 *
 * @generated from message aiserver.v1.ToolResultError.SearchReplaceError
 */
export class ToolResultError_SearchReplaceError extends Message<ToolResultError_SearchReplaceError> {
  /**
   * @generated from field: int32 num_lines_in_file_before_edit = 1;
   */
  numLinesInFileBeforeEdit = 0;

  constructor(data?: PartialMessage<ToolResultError_SearchReplaceError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolResultError.SearchReplaceError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "num_lines_in_file_before_edit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolResultError_SearchReplaceError {
    return new ToolResultError_SearchReplaceError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolResultError_SearchReplaceError {
    return new ToolResultError_SearchReplaceError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolResultError_SearchReplaceError {
    return new ToolResultError_SearchReplaceError().fromJsonString(jsonString, options);
  }

  static equals(a: ToolResultError_SearchReplaceError | PlainMessage<ToolResultError_SearchReplaceError> | undefined, b: ToolResultError_SearchReplaceError | PlainMessage<ToolResultError_SearchReplaceError> | undefined): boolean {
    return proto3.util.equals(ToolResultError_SearchReplaceError, a, b);
  }
}

/**
 * aiserver.v1.ClientSideToolV2Call
 *
 * @generated from message aiserver.v1.ClientSideToolV2Call
 */
export class ClientSideToolV2Call extends Message<ClientSideToolV2Call> {
  /**
   * @generated from field: aiserver.v1.ClientSideToolV2 tool = 1;
   */
  tool = ClientSideToolV2.UNSPECIFIED;

  /**
   * @generated from oneof aiserver.v1.ClientSideToolV2Call.params
   */
  params: {
    /**
     * @generated from field: aiserver.v1.ReadSemsearchFilesParams read_semsearch_files_params = 2;
     */
    value: ReadSemsearchFilesParams;
    case: "readSemsearchFilesParams";
  } | {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchParams ripgrep_search_params = 5;
     */
    value: RipgrepSearchParams;
    case: "ripgrepSearchParams";
  } | {
    /**
     * @generated from field: aiserver.v1.ReadFileParams read_file_params = 8;
     */
    value: ReadFileParams;
    case: "readFileParams";
  } | {
    /**
     * @generated from field: aiserver.v1.ListDirParams list_dir_params = 12;
     */
    value: ListDirParams;
    case: "listDirParams";
  } | {
    /**
     * @generated from field: aiserver.v1.EditFileParams edit_file_params = 13;
     */
    value: EditFileParams;
    case: "editFileParams";
  } | {
    /**
     * @generated from field: aiserver.v1.ToolCallFileSearchParams file_search_params = 16;
     */
    value: ToolCallFileSearchParams;
    case: "fileSearchParams";
  } | {
    /**
     * @generated from field: aiserver.v1.SemanticSearchFullParams semantic_search_full_params = 17;
     */
    value: SemanticSearchFullParams;
    case: "semanticSearchFullParams";
  } | {
    /**
     * @generated from field: aiserver.v1.DeleteFileParams delete_file_params = 19;
     */
    value: DeleteFileParams;
    case: "deleteFileParams";
  } | {
    /**
     * @generated from field: aiserver.v1.ReapplyParams reapply_params = 20;
     */
    value: ReapplyParams;
    case: "reapplyParams";
  } | {
    /**
     * @generated from field: aiserver.v1.RunTerminalCommandV2Params run_terminal_command_v2_params = 23;
     */
    value: RunTerminalCommandV2Params;
    case: "runTerminalCommandV2Params";
  } | {
    /**
     * @generated from field: aiserver.v1.FetchRulesParams fetch_rules_params = 24;
     */
    value: FetchRulesParams;
    case: "fetchRulesParams";
  } | {
    /**
     * @generated from field: aiserver.v1.WebSearchParams web_search_params = 26;
     */
    value: WebSearchParams;
    case: "webSearchParams";
  } | {
    /**
     * @generated from field: aiserver.v1.MCPParams mcp_params = 27;
     */
    value: MCPParams;
    case: "mcpParams";
  } | {
    /**
     * @generated from field: aiserver.v1.SearchSymbolsParams search_symbols_params = 31;
     */
    value: SearchSymbolsParams;
    case: "searchSymbolsParams";
  } | {
    /**
     * @generated from field: aiserver.v1.GotodefParams gotodef_params = 41;
     */
    value: GotodefParams;
    case: "gotodefParams";
  } | {
    /**
     * @generated from field: aiserver.v1.BackgroundComposerFollowupParams background_composer_followup_params = 32;
     */
    value: BackgroundComposerFollowupParams;
    case: "backgroundComposerFollowupParams";
  } | {
    /**
     * @generated from field: aiserver.v1.KnowledgeBaseParams knowledge_base_params = 33;
     */
    value: KnowledgeBaseParams;
    case: "knowledgeBaseParams";
  } | {
    /**
     * @generated from field: aiserver.v1.FetchPullRequestParams fetch_pull_request_params = 34;
     */
    value: FetchPullRequestParams;
    case: "fetchPullRequestParams";
  } | {
    /**
     * @generated from field: aiserver.v1.DeepSearchParams deep_search_params = 35;
     */
    value: DeepSearchParams;
    case: "deepSearchParams";
  } | {
    /**
     * @generated from field: aiserver.v1.CreateDiagramParams create_diagram_params = 36;
     */
    value: CreateDiagramParams;
    case: "createDiagramParams";
  } | {
    /**
     * @generated from field: aiserver.v1.FixLintsParams fix_lints_params = 37;
     */
    value: FixLintsParams;
    case: "fixLintsParams";
  } | {
    /**
     * @generated from field: aiserver.v1.ReadLintsParams read_lints_params = 38;
     */
    value: ReadLintsParams;
    case: "readLintsParams";
  } | {
    /**
     * @generated from field: aiserver.v1.TaskParams task_params = 42;
     */
    value: TaskParams;
    case: "taskParams";
  } | {
    /**
     * @generated from field: aiserver.v1.AwaitTaskParams await_task_params = 43;
     */
    value: AwaitTaskParams;
    case: "awaitTaskParams";
  } | {
    /**
     * @generated from field: aiserver.v1.TodoReadParams todo_read_params = 44;
     */
    value: TodoReadParams;
    case: "todoReadParams";
  } | {
    /**
     * @generated from field: aiserver.v1.TodoWriteParams todo_write_params = 45;
     */
    value: TodoWriteParams;
    case: "todoWriteParams";
  } | {
    /**
     * @generated from field: aiserver.v1.EditFileV2Params edit_file_v2_params = 50;
     */
    value: EditFileV2Params;
    case: "editFileV2Params";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string tool_call_id = 3;
   */
  toolCallId = "";

  /**
   * @generated from field: optional double timeout_ms = 6;
   */
  timeoutMs?: number;

  /**
   * @generated from field: string name = 9;
   */
  name = "";

  /**
   * @generated from field: bool is_streaming = 14;
   */
  isStreaming = false;

  /**
   * @generated from field: bool is_last_message = 15;
   */
  isLastMessage = false;

  /**
   * @generated from field: string raw_args = 10;
   */
  rawArgs = "";

  /**
   * @generated from field: optional uint32 tool_index = 48;
   */
  toolIndex?: number;

  /**
   * @generated from field: optional string model_call_id = 49;
   */
  modelCallId?: string;

  constructor(data?: PartialMessage<ClientSideToolV2Call>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ClientSideToolV2Call";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool", kind: "enum", T: proto3.getEnumType(ClientSideToolV2) },
    { no: 2, name: "read_semsearch_files_params", kind: "message", T: ReadSemsearchFilesParams, oneof: "params" },
    { no: 5, name: "ripgrep_search_params", kind: "message", T: RipgrepSearchParams, oneof: "params" },
    { no: 8, name: "read_file_params", kind: "message", T: ReadFileParams, oneof: "params" },
    { no: 12, name: "list_dir_params", kind: "message", T: ListDirParams, oneof: "params" },
    { no: 13, name: "edit_file_params", kind: "message", T: EditFileParams, oneof: "params" },
    { no: 16, name: "file_search_params", kind: "message", T: ToolCallFileSearchParams, oneof: "params" },
    { no: 17, name: "semantic_search_full_params", kind: "message", T: SemanticSearchFullParams, oneof: "params" },
    { no: 19, name: "delete_file_params", kind: "message", T: DeleteFileParams, oneof: "params" },
    { no: 20, name: "reapply_params", kind: "message", T: ReapplyParams, oneof: "params" },
    { no: 23, name: "run_terminal_command_v2_params", kind: "message", T: RunTerminalCommandV2Params, oneof: "params" },
    { no: 24, name: "fetch_rules_params", kind: "message", T: FetchRulesParams, oneof: "params" },
    { no: 26, name: "web_search_params", kind: "message", T: WebSearchParams, oneof: "params" },
    { no: 27, name: "mcp_params", kind: "message", T: MCPParams, oneof: "params" },
    { no: 31, name: "search_symbols_params", kind: "message", T: SearchSymbolsParams, oneof: "params" },
    { no: 41, name: "gotodef_params", kind: "message", T: GotodefParams, oneof: "params" },
    { no: 32, name: "background_composer_followup_params", kind: "message", T: BackgroundComposerFollowupParams, oneof: "params" },
    { no: 33, name: "knowledge_base_params", kind: "message", T: KnowledgeBaseParams, oneof: "params" },
    { no: 34, name: "fetch_pull_request_params", kind: "message", T: FetchPullRequestParams, oneof: "params" },
    { no: 35, name: "deep_search_params", kind: "message", T: DeepSearchParams, oneof: "params" },
    { no: 36, name: "create_diagram_params", kind: "message", T: CreateDiagramParams, oneof: "params" },
    { no: 37, name: "fix_lints_params", kind: "message", T: FixLintsParams, oneof: "params" },
    { no: 38, name: "read_lints_params", kind: "message", T: ReadLintsParams, oneof: "params" },
    { no: 42, name: "task_params", kind: "message", T: TaskParams, oneof: "params" },
    { no: 43, name: "await_task_params", kind: "message", T: AwaitTaskParams, oneof: "params" },
    { no: 44, name: "todo_read_params", kind: "message", T: TodoReadParams, oneof: "params" },
    { no: 45, name: "todo_write_params", kind: "message", T: TodoWriteParams, oneof: "params" },
    { no: 50, name: "edit_file_v2_params", kind: "message", T: EditFileV2Params, oneof: "params" },
    { no: 3, name: "tool_call_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timeout_ms", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 9, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "is_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "is_last_message", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "raw_args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 48, name: "tool_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 49, name: "model_call_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientSideToolV2Call {
    return new ClientSideToolV2Call().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientSideToolV2Call {
    return new ClientSideToolV2Call().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientSideToolV2Call {
    return new ClientSideToolV2Call().fromJsonString(jsonString, options);
  }

  static equals(a: ClientSideToolV2Call | PlainMessage<ClientSideToolV2Call> | undefined, b: ClientSideToolV2Call | PlainMessage<ClientSideToolV2Call> | undefined): boolean {
    return proto3.util.equals(ClientSideToolV2Call, a, b);
  }
}

/**
 * aiserver.v1.ClientSideToolV2Result
 *
 * @generated from message aiserver.v1.ClientSideToolV2Result
 */
export class ClientSideToolV2Result extends Message<ClientSideToolV2Result> {
  /**
   * @generated from field: aiserver.v1.ClientSideToolV2 tool = 1;
   */
  tool = ClientSideToolV2.UNSPECIFIED;

  /**
   * @generated from oneof aiserver.v1.ClientSideToolV2Result.result
   */
  result: {
    /**
     * @generated from field: aiserver.v1.ReadSemsearchFilesResult read_semsearch_files_result = 2;
     */
    value: ReadSemsearchFilesResult;
    case: "readSemsearchFilesResult";
  } | {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchResult ripgrep_search_result = 4;
     */
    value: RipgrepSearchResult;
    case: "ripgrepSearchResult";
  } | {
    /**
     * @generated from field: aiserver.v1.ReadFileResult read_file_result = 6;
     */
    value: ReadFileResult;
    case: "readFileResult";
  } | {
    /**
     * @generated from field: aiserver.v1.ListDirResult list_dir_result = 9;
     */
    value: ListDirResult;
    case: "listDirResult";
  } | {
    /**
     * @generated from field: aiserver.v1.EditFileResult edit_file_result = 10;
     */
    value: EditFileResult;
    case: "editFileResult";
  } | {
    /**
     * @generated from field: aiserver.v1.ToolCallFileSearchResult file_search_result = 11;
     */
    value: ToolCallFileSearchResult;
    case: "fileSearchResult";
  } | {
    /**
     * @generated from field: aiserver.v1.SemanticSearchFullResult semantic_search_full_result = 18;
     */
    value: SemanticSearchFullResult;
    case: "semanticSearchFullResult";
  } | {
    /**
     * @generated from field: aiserver.v1.DeleteFileResult delete_file_result = 20;
     */
    value: DeleteFileResult;
    case: "deleteFileResult";
  } | {
    /**
     * @generated from field: aiserver.v1.ReapplyResult reapply_result = 21;
     */
    value: ReapplyResult;
    case: "reapplyResult";
  } | {
    /**
     * @generated from field: aiserver.v1.RunTerminalCommandV2Result run_terminal_command_v2_result = 24;
     */
    value: RunTerminalCommandV2Result;
    case: "runTerminalCommandV2Result";
  } | {
    /**
     * @generated from field: aiserver.v1.FetchRulesResult fetch_rules_result = 25;
     */
    value: FetchRulesResult;
    case: "fetchRulesResult";
  } | {
    /**
     * @generated from field: aiserver.v1.WebSearchResult web_search_result = 27;
     */
    value: WebSearchResult;
    case: "webSearchResult";
  } | {
    /**
     * @generated from field: aiserver.v1.MCPResult mcp_result = 28;
     */
    value: MCPResult;
    case: "mcpResult";
  } | {
    /**
     * @generated from field: aiserver.v1.SearchSymbolsResult search_symbols_result = 32;
     */
    value: SearchSymbolsResult;
    case: "searchSymbolsResult";
  } | {
    /**
     * @generated from field: aiserver.v1.BackgroundComposerFollowupResult background_composer_followup_result = 33;
     */
    value: BackgroundComposerFollowupResult;
    case: "backgroundComposerFollowupResult";
  } | {
    /**
     * @generated from field: aiserver.v1.KnowledgeBaseResult knowledge_base_result = 34;
     */
    value: KnowledgeBaseResult;
    case: "knowledgeBaseResult";
  } | {
    /**
     * @generated from field: aiserver.v1.FetchPullRequestResult fetch_pull_request_result = 36;
     */
    value: FetchPullRequestResult;
    case: "fetchPullRequestResult";
  } | {
    /**
     * @generated from field: aiserver.v1.DeepSearchResult deep_search_result = 37;
     */
    value: DeepSearchResult;
    case: "deepSearchResult";
  } | {
    /**
     * @generated from field: aiserver.v1.CreateDiagramResult create_diagram_result = 38;
     */
    value: CreateDiagramResult;
    case: "createDiagramResult";
  } | {
    /**
     * @generated from field: aiserver.v1.FixLintsResult fix_lints_result = 39;
     */
    value: FixLintsResult;
    case: "fixLintsResult";
  } | {
    /**
     * @generated from field: aiserver.v1.ReadLintsResult read_lints_result = 40;
     */
    value: ReadLintsResult;
    case: "readLintsResult";
  } | {
    /**
     * @generated from field: aiserver.v1.GotodefResult gotodef_result = 41;
     */
    value: GotodefResult;
    case: "gotodefResult";
  } | {
    /**
     * @generated from field: aiserver.v1.TaskResult task_result = 42;
     */
    value: TaskResult;
    case: "taskResult";
  } | {
    /**
     * @generated from field: aiserver.v1.AwaitTaskResult await_task_result = 43;
     */
    value: AwaitTaskResult;
    case: "awaitTaskResult";
  } | {
    /**
     * @generated from field: aiserver.v1.TodoReadResult todo_read_result = 44;
     */
    value: TodoReadResult;
    case: "todoReadResult";
  } | {
    /**
     * @generated from field: aiserver.v1.TodoWriteResult todo_write_result = 45;
     */
    value: TodoWriteResult;
    case: "todoWriteResult";
  } | {
    /**
     * @generated from field: aiserver.v1.EditFileV2Result edit_file_v2_result = 51;
     */
    value: EditFileV2Result;
    case: "editFileV2Result";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string tool_call_id = 35;
   */
  toolCallId = "";

  /**
   * @generated from field: optional aiserver.v1.ToolResultError error = 8;
   */
  error?: ToolResultError;

  /**
   * @generated from field: optional string model_call_id = 48;
   */
  modelCallId?: string;

  /**
   * @generated from field: optional uint32 tool_index = 49;
   */
  toolIndex?: number;

  /**
   * @generated from field: optional aiserver.v1.ToolResultAttachments attachments = 50;
   */
  attachments?: ToolResultAttachments;

  constructor(data?: PartialMessage<ClientSideToolV2Result>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ClientSideToolV2Result";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool", kind: "enum", T: proto3.getEnumType(ClientSideToolV2) },
    { no: 2, name: "read_semsearch_files_result", kind: "message", T: ReadSemsearchFilesResult, oneof: "result" },
    { no: 4, name: "ripgrep_search_result", kind: "message", T: RipgrepSearchResult, oneof: "result" },
    { no: 6, name: "read_file_result", kind: "message", T: ReadFileResult, oneof: "result" },
    { no: 9, name: "list_dir_result", kind: "message", T: ListDirResult, oneof: "result" },
    { no: 10, name: "edit_file_result", kind: "message", T: EditFileResult, oneof: "result" },
    { no: 11, name: "file_search_result", kind: "message", T: ToolCallFileSearchResult, oneof: "result" },
    { no: 18, name: "semantic_search_full_result", kind: "message", T: SemanticSearchFullResult, oneof: "result" },
    { no: 20, name: "delete_file_result", kind: "message", T: DeleteFileResult, oneof: "result" },
    { no: 21, name: "reapply_result", kind: "message", T: ReapplyResult, oneof: "result" },
    { no: 24, name: "run_terminal_command_v2_result", kind: "message", T: RunTerminalCommandV2Result, oneof: "result" },
    { no: 25, name: "fetch_rules_result", kind: "message", T: FetchRulesResult, oneof: "result" },
    { no: 27, name: "web_search_result", kind: "message", T: WebSearchResult, oneof: "result" },
    { no: 28, name: "mcp_result", kind: "message", T: MCPResult, oneof: "result" },
    { no: 32, name: "search_symbols_result", kind: "message", T: SearchSymbolsResult, oneof: "result" },
    { no: 33, name: "background_composer_followup_result", kind: "message", T: BackgroundComposerFollowupResult, oneof: "result" },
    { no: 34, name: "knowledge_base_result", kind: "message", T: KnowledgeBaseResult, oneof: "result" },
    { no: 36, name: "fetch_pull_request_result", kind: "message", T: FetchPullRequestResult, oneof: "result" },
    { no: 37, name: "deep_search_result", kind: "message", T: DeepSearchResult, oneof: "result" },
    { no: 38, name: "create_diagram_result", kind: "message", T: CreateDiagramResult, oneof: "result" },
    { no: 39, name: "fix_lints_result", kind: "message", T: FixLintsResult, oneof: "result" },
    { no: 40, name: "read_lints_result", kind: "message", T: ReadLintsResult, oneof: "result" },
    { no: 41, name: "gotodef_result", kind: "message", T: GotodefResult, oneof: "result" },
    { no: 42, name: "task_result", kind: "message", T: TaskResult, oneof: "result" },
    { no: 43, name: "await_task_result", kind: "message", T: AwaitTaskResult, oneof: "result" },
    { no: 44, name: "todo_read_result", kind: "message", T: TodoReadResult, oneof: "result" },
    { no: 45, name: "todo_write_result", kind: "message", T: TodoWriteResult, oneof: "result" },
    { no: 51, name: "edit_file_v2_result", kind: "message", T: EditFileV2Result, oneof: "result" },
    { no: 35, name: "tool_call_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "error", kind: "message", T: ToolResultError, opt: true },
    { no: 48, name: "model_call_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 49, name: "tool_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 50, name: "attachments", kind: "message", T: ToolResultAttachments, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientSideToolV2Result {
    return new ClientSideToolV2Result().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientSideToolV2Result {
    return new ClientSideToolV2Result().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientSideToolV2Result {
    return new ClientSideToolV2Result().fromJsonString(jsonString, options);
  }

  static equals(a: ClientSideToolV2Result | PlainMessage<ClientSideToolV2Result> | undefined, b: ClientSideToolV2Result | PlainMessage<ClientSideToolV2Result> | undefined): boolean {
    return proto3.util.equals(ClientSideToolV2Result, a, b);
  }
}

/**
 * aiserver.v1.NudgeMessage
 *
 * @generated from message aiserver.v1.NudgeMessage
 */
export class NudgeMessage extends Message<NudgeMessage> {
  /**
   * @generated from field: string raw_message = 1;
   */
  rawMessage = "";

  constructor(data?: PartialMessage<NudgeMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.NudgeMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "raw_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NudgeMessage {
    return new NudgeMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NudgeMessage {
    return new NudgeMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NudgeMessage {
    return new NudgeMessage().fromJsonString(jsonString, options);
  }

  static equals(a: NudgeMessage | PlainMessage<NudgeMessage> | undefined, b: NudgeMessage | PlainMessage<NudgeMessage> | undefined): boolean {
    return proto3.util.equals(NudgeMessage, a, b);
  }
}

/**
 * aiserver.v1.ToolResultAttachments
 *
 * @generated from message aiserver.v1.ToolResultAttachments
 */
export class ToolResultAttachments extends Message<ToolResultAttachments> {
  /**
   * @generated from field: repeated aiserver.v1.TodoItem original_todos = 1;
   */
  originalTodos: TodoItem[] = [];

  /**
   * @generated from field: repeated aiserver.v1.TodoItem updated_todos = 2;
   */
  updatedTodos: TodoItem[] = [];

  /**
   * @generated from field: repeated aiserver.v1.NudgeMessage nudge_messages = 3;
   */
  nudgeMessages: NudgeMessage[] = [];

  /**
   * @generated from field: bool should_show_todo_write_reminder = 4;
   */
  shouldShowTodoWriteReminder = false;

  constructor(data?: PartialMessage<ToolResultAttachments>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolResultAttachments";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_todos", kind: "message", T: TodoItem, repeated: true },
    { no: 2, name: "updated_todos", kind: "message", T: TodoItem, repeated: true },
    { no: 3, name: "nudge_messages", kind: "message", T: NudgeMessage, repeated: true },
    { no: 4, name: "should_show_todo_write_reminder", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolResultAttachments {
    return new ToolResultAttachments().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolResultAttachments {
    return new ToolResultAttachments().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolResultAttachments {
    return new ToolResultAttachments().fromJsonString(jsonString, options);
  }

  static equals(a: ToolResultAttachments | PlainMessage<ToolResultAttachments> | undefined, b: ToolResultAttachments | PlainMessage<ToolResultAttachments> | undefined): boolean {
    return proto3.util.equals(ToolResultAttachments, a, b);
  }
}

/**
 * aiserver.v1.EditFileV2Params
 *
 * @generated from message aiserver.v1.EditFileV2Params
 */
export class EditFileV2Params extends Message<EditFileV2Params> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: optional string contents_after_edit = 2;
   */
  contentsAfterEdit?: string;

  /**
   * @generated from field: optional bool waiting_for_file_contents = 3;
   */
  waitingForFileContents?: boolean;

  /**
   * @generated from oneof aiserver.v1.EditFileV2Params.streaming_edit
   */
  streamingEdit: {
    /**
     * @generated from field: aiserver.v1.EditFileV2Params.StreamingEditText text = 4;
     */
    value: EditFileV2Params_StreamingEditText;
    case: "text";
  } | {
    /**
     * @generated from field: aiserver.v1.EditFileV2Params.StreamingEditCode code = 5;
     */
    value: EditFileV2Params_StreamingEditCode;
    case: "code";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: bool should_send_back_linter_errors = 6;
   */
  shouldSendBackLinterErrors = false;

  /**
   * @generated from field: optional aiserver.v1.EditFileResult.FileDiff diff = 7;
   */
  diff?: EditFileResult_FileDiff;

  /**
   * @generated from field: string result_for_model = 8;
   */
  resultForModel = "";

  constructor(data?: PartialMessage<EditFileV2Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileV2Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents_after_edit", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "waiting_for_file_contents", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "text", kind: "message", T: EditFileV2Params_StreamingEditText, oneof: "streaming_edit" },
    { no: 5, name: "code", kind: "message", T: EditFileV2Params_StreamingEditCode, oneof: "streaming_edit" },
    { no: 6, name: "should_send_back_linter_errors", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "diff", kind: "message", T: EditFileResult_FileDiff, opt: true },
    { no: 8, name: "result_for_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileV2Params {
    return new EditFileV2Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileV2Params {
    return new EditFileV2Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileV2Params {
    return new EditFileV2Params().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileV2Params | PlainMessage<EditFileV2Params> | undefined, b: EditFileV2Params | PlainMessage<EditFileV2Params> | undefined): boolean {
    return proto3.util.equals(EditFileV2Params, a, b);
  }
}

/**
 * aiserver.v1.EditFileV2Params.StreamingEditText
 *
 * @generated from message aiserver.v1.EditFileV2Params.StreamingEditText
 */
export class EditFileV2Params_StreamingEditText extends Message<EditFileV2Params_StreamingEditText> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<EditFileV2Params_StreamingEditText>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileV2Params.StreamingEditText";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileV2Params_StreamingEditText {
    return new EditFileV2Params_StreamingEditText().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileV2Params_StreamingEditText {
    return new EditFileV2Params_StreamingEditText().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileV2Params_StreamingEditText {
    return new EditFileV2Params_StreamingEditText().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileV2Params_StreamingEditText | PlainMessage<EditFileV2Params_StreamingEditText> | undefined, b: EditFileV2Params_StreamingEditText | PlainMessage<EditFileV2Params_StreamingEditText> | undefined): boolean {
    return proto3.util.equals(EditFileV2Params_StreamingEditText, a, b);
  }
}

/**
 * aiserver.v1.EditFileV2Params.StreamingEditCode
 *
 * @generated from message aiserver.v1.EditFileV2Params.StreamingEditCode
 */
export class EditFileV2Params_StreamingEditCode extends Message<EditFileV2Params_StreamingEditCode> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<EditFileV2Params_StreamingEditCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileV2Params.StreamingEditCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileV2Params_StreamingEditCode {
    return new EditFileV2Params_StreamingEditCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileV2Params_StreamingEditCode {
    return new EditFileV2Params_StreamingEditCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileV2Params_StreamingEditCode {
    return new EditFileV2Params_StreamingEditCode().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileV2Params_StreamingEditCode | PlainMessage<EditFileV2Params_StreamingEditCode> | undefined, b: EditFileV2Params_StreamingEditCode | PlainMessage<EditFileV2Params_StreamingEditCode> | undefined): boolean {
    return proto3.util.equals(EditFileV2Params_StreamingEditCode, a, b);
  }
}

/**
 * aiserver.v1.EditFileV2Result
 *
 * @generated from message aiserver.v1.EditFileV2Result
 */
export class EditFileV2Result extends Message<EditFileV2Result> {
  /**
   * @generated from field: optional string contents_before_edit = 1;
   */
  contentsBeforeEdit?: string;

  /**
   * @generated from field: optional string eol_sequence = 9;
   */
  eolSequence?: string;

  /**
   * @generated from field: bool file_was_created = 2;
   */
  fileWasCreated = false;

  /**
   * @generated from field: optional aiserver.v1.EditFileResult.FileDiff diff = 3;
   */
  diff?: EditFileResult_FileDiff;

  /**
   * @generated from field: optional bool rejected = 4;
   */
  rejected?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.LinterError linter_errors = 5;
   */
  linterErrors: LinterError[] = [];

  /**
   * @generated from field: bool sent_back_linter_errors = 6;
   */
  sentBackLinterErrors = false;

  /**
   * @generated from field: bool should_auto_fix_lints = 8;
   */
  shouldAutoFixLints = false;

  /**
   * @generated from field: optional aiserver.v1.HumanReview human_review_v2 = 7;
   */
  humanReviewV2?: HumanReview;

  /**
   * @generated from field: string result_for_model = 10;
   */
  resultForModel = "";

  constructor(data?: PartialMessage<EditFileV2Result>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileV2Result";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contents_before_edit", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "eol_sequence", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "file_was_created", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "diff", kind: "message", T: EditFileResult_FileDiff, opt: true },
    { no: 4, name: "rejected", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "linter_errors", kind: "message", T: LinterError, repeated: true },
    { no: 6, name: "sent_back_linter_errors", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "should_auto_fix_lints", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "human_review_v2", kind: "message", T: HumanReview, opt: true },
    { no: 10, name: "result_for_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileV2Result {
    return new EditFileV2Result().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileV2Result {
    return new EditFileV2Result().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileV2Result {
    return new EditFileV2Result().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileV2Result | PlainMessage<EditFileV2Result> | undefined, b: EditFileV2Result | PlainMessage<EditFileV2Result> | undefined): boolean {
    return proto3.util.equals(EditFileV2Result, a, b);
  }
}

/**
 * aiserver.v1.EditFileParams
 *
 * @generated from message aiserver.v1.EditFileParams
 */
export class EditFileParams extends Message<EditFileParams> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string language = 2;
   */
  language = "";

  /**
   * @generated from field: bool blocking = 4;
   */
  blocking = false;

  /**
   * @generated from field: string contents = 3;
   */
  contents = "";

  /**
   * @generated from field: optional string instructions = 5;
   */
  instructions?: string;

  /**
   * @generated from field: optional bool should_edit_file_fail_for_large_files = 12;
   */
  shouldEditFileFailForLargeFiles?: boolean;

  /**
   * @generated from field: optional string old_string = 6;
   */
  oldString?: string;

  /**
   * @generated from field: optional string new_string = 7;
   */
  newString?: string;

  /**
   * @generated from field: optional bool allow_multiple_matches = 8;
   */
  allowMultipleMatches?: boolean;

  /**
   * @generated from field: optional bool use_whitespace_insensitive_fallback = 10;
   */
  useWhitespaceInsensitiveFallback?: boolean;

  /**
   * @generated from field: optional bool use_did_you_mean_fuzzy_match = 11;
   */
  useDidYouMeanFuzzyMatch?: boolean;

  /**
   * @generated from field: optional bool gracefully_handle_recoverable_errors = 16;
   */
  gracefullyHandleRecoverableErrors?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.LineRange line_ranges = 9;
   */
  lineRanges: LineRange[] = [];

  /**
   * @generated from field: optional int32 notebook_cell_idx = 13;
   */
  notebookCellIdx?: number;

  /**
   * @generated from field: optional bool is_new_cell = 14;
   */
  isNewCell?: boolean;

  /**
   * @generated from field: optional string cell_language = 15;
   */
  cellLanguage?: string;

  /**
   * @generated from field: optional string edit_category = 17;
   */
  editCategory?: string;

  /**
   * @generated from field: optional bool should_eagerly_process_lints = 18;
   */
  shouldEagerlyProcessLints?: boolean;

  constructor(data?: PartialMessage<EditFileParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "blocking", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "should_edit_file_fail_for_large_files", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "old_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "new_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "allow_multiple_matches", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 10, name: "use_whitespace_insensitive_fallback", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "use_did_you_mean_fuzzy_match", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 16, name: "gracefully_handle_recoverable_errors", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "line_ranges", kind: "message", T: LineRange, repeated: true },
    { no: 13, name: "notebook_cell_idx", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 14, name: "is_new_cell", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 15, name: "cell_language", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 17, name: "edit_category", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: "should_eagerly_process_lints", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileParams {
    return new EditFileParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileParams {
    return new EditFileParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileParams {
    return new EditFileParams().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileParams | PlainMessage<EditFileParams> | undefined, b: EditFileParams | PlainMessage<EditFileParams> | undefined): boolean {
    return proto3.util.equals(EditFileParams, a, b);
  }
}

/**
 * aiserver.v1.EditFileResult
 *
 * @generated from message aiserver.v1.EditFileResult
 */
export class EditFileResult extends Message<EditFileResult> {
  /**
   * @generated from field: aiserver.v1.EditFileResult.FileDiff diff = 1;
   */
  diff?: EditFileResult_FileDiff;

  /**
   * @generated from field: bool is_applied = 2;
   */
  isApplied = false;

  /**
   * @generated from field: bool apply_failed = 3;
   */
  applyFailed = false;

  /**
   * @generated from field: repeated aiserver.v1.LinterError linter_errors = 4;
   */
  linterErrors: LinterError[] = [];

  /**
   * @generated from field: optional bool rejected = 5;
   */
  rejected?: boolean;

  /**
   * @generated from field: optional int32 num_matches = 6;
   */
  numMatches?: number;

  /**
   * @generated from field: optional bool whitespace_insensitive_fallback_found_match = 7;
   */
  whitespaceInsensitiveFallbackFoundMatch?: boolean;

  /**
   * @generated from field: optional bool no_match_found_in_line_ranges = 8;
   */
  noMatchFoundInLineRanges?: boolean;

  /**
   * @generated from field: optional aiserver.v1.EditFileResult.RecoverableError recoverable_error = 11;
   */
  recoverableError?: EditFileResult_RecoverableError;

  /**
   * @generated from field: optional int32 num_lines_in_file = 9;
   */
  numLinesInFile?: number;

  /**
   * @generated from field: optional bool is_subagent_edit = 10;
   */
  isSubagentEdit?: boolean;

  /**
   * @generated from field: optional bool diff_became_no_op_due_to_on_save_fixes = 12;
   */
  diffBecameNoOpDueToOnSaveFixes?: boolean;

  /**
   * @generated from field: optional aiserver.v1.EditFileResult.EditFileHumanReview human_review = 13;
   */
  humanReview?: EditFileResult_EditFileHumanReview;

  /**
   * @generated from field: optional aiserver.v1.EditFileResult.HumanFeedback human_feedback = 14;
   */
  humanFeedback?: EditFileResult_HumanFeedback;

  /**
   * @generated from field: optional bool should_eagerly_process_lints = 15;
   */
  shouldEagerlyProcessLints?: boolean;

  /**
   * @generated from field: optional aiserver.v1.HumanReview human_review_v2 = 16;
   */
  humanReviewV2?: HumanReview;

  /**
   * @generated from field: optional bool were_all_new_linter_errors_resolved_by_this_edit = 17;
   */
  wereAllNewLinterErrorsResolvedByThisEdit?: boolean;

  constructor(data?: PartialMessage<EditFileResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "diff", kind: "message", T: EditFileResult_FileDiff },
    { no: 2, name: "is_applied", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "apply_failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "linter_errors", kind: "message", T: LinterError, repeated: true },
    { no: 5, name: "rejected", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "num_matches", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "whitespace_insensitive_fallback_found_match", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "no_match_found_in_line_ranges", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "recoverable_error", kind: "message", T: EditFileResult_RecoverableError, opt: true },
    { no: 9, name: "num_lines_in_file", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 10, name: "is_subagent_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "diff_became_no_op_due_to_on_save_fixes", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 13, name: "human_review", kind: "message", T: EditFileResult_EditFileHumanReview, opt: true },
    { no: 14, name: "human_feedback", kind: "message", T: EditFileResult_HumanFeedback, opt: true },
    { no: 15, name: "should_eagerly_process_lints", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 16, name: "human_review_v2", kind: "message", T: HumanReview, opt: true },
    { no: 17, name: "were_all_new_linter_errors_resolved_by_this_edit", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileResult {
    return new EditFileResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileResult {
    return new EditFileResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileResult {
    return new EditFileResult().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileResult | PlainMessage<EditFileResult> | undefined, b: EditFileResult | PlainMessage<EditFileResult> | undefined): boolean {
    return proto3.util.equals(EditFileResult, a, b);
  }
}

/**
 * aiserver.v1.EditFileResult.FileDiff
 *
 * @generated from message aiserver.v1.EditFileResult.FileDiff
 */
export class EditFileResult_FileDiff extends Message<EditFileResult_FileDiff> {
  /**
   * @generated from field: repeated aiserver.v1.EditFileResult.FileDiff.ChunkDiff chunks = 1;
   */
  chunks: EditFileResult_FileDiff_ChunkDiff[] = [];

  /**
   * @generated from field: aiserver.v1.EditFileResult.FileDiff.Editor editor = 2;
   */
  editor = EditFileResult_FileDiff_Editor.UNSPECIFIED;

  /**
   * @generated from field: bool hit_timeout = 3;
   */
  hitTimeout = false;

  constructor(data?: PartialMessage<EditFileResult_FileDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileResult.FileDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunks", kind: "message", T: EditFileResult_FileDiff_ChunkDiff, repeated: true },
    { no: 2, name: "editor", kind: "enum", T: proto3.getEnumType(EditFileResult_FileDiff_Editor) },
    { no: 3, name: "hit_timeout", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileResult_FileDiff {
    return new EditFileResult_FileDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileResult_FileDiff {
    return new EditFileResult_FileDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileResult_FileDiff {
    return new EditFileResult_FileDiff().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileResult_FileDiff | PlainMessage<EditFileResult_FileDiff> | undefined, b: EditFileResult_FileDiff | PlainMessage<EditFileResult_FileDiff> | undefined): boolean {
    return proto3.util.equals(EditFileResult_FileDiff, a, b);
  }
}

/**
 * aiserver.v1.EditFileResult.FileDiff.Editor
 *
 * @generated from enum aiserver.v1.EditFileResult.FileDiff.Editor
 */
export enum EditFileResult_FileDiff_Editor {
  /**
   * @generated from enum value: EDITOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EDITOR_AI = 1;
   */
  AI = 1,

  /**
   * @generated from enum value: EDITOR_HUMAN = 2;
   */
  HUMAN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EditFileResult_FileDiff_Editor)
proto3.util.setEnumType(EditFileResult_FileDiff_Editor, "aiserver.v1.EditFileResult.FileDiff.Editor", [
  { no: 0, name: "EDITOR_UNSPECIFIED" },
  { no: 1, name: "EDITOR_AI" },
  { no: 2, name: "EDITOR_HUMAN" },
]);

/**
 * aiserver.v1.EditFileResult.FileDiff.ChunkDiff
 *
 * @generated from message aiserver.v1.EditFileResult.FileDiff.ChunkDiff
 */
export class EditFileResult_FileDiff_ChunkDiff extends Message<EditFileResult_FileDiff_ChunkDiff> {
  /**
   * @generated from field: string diff_string = 1;
   */
  diffString = "";

  /**
   * @generated from field: int32 old_start = 2;
   */
  oldStart = 0;

  /**
   * @generated from field: int32 new_start = 3;
   */
  newStart = 0;

  /**
   * @generated from field: int32 old_lines = 4;
   */
  oldLines = 0;

  /**
   * @generated from field: int32 new_lines = 5;
   */
  newLines = 0;

  /**
   * @generated from field: int32 lines_removed = 6;
   */
  linesRemoved = 0;

  /**
   * @generated from field: int32 lines_added = 7;
   */
  linesAdded = 0;

  constructor(data?: PartialMessage<EditFileResult_FileDiff_ChunkDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileResult.FileDiff.ChunkDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "diff_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "old_start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "new_start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "old_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "new_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "lines_removed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "lines_added", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileResult_FileDiff_ChunkDiff {
    return new EditFileResult_FileDiff_ChunkDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileResult_FileDiff_ChunkDiff {
    return new EditFileResult_FileDiff_ChunkDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileResult_FileDiff_ChunkDiff {
    return new EditFileResult_FileDiff_ChunkDiff().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileResult_FileDiff_ChunkDiff | PlainMessage<EditFileResult_FileDiff_ChunkDiff> | undefined, b: EditFileResult_FileDiff_ChunkDiff | PlainMessage<EditFileResult_FileDiff_ChunkDiff> | undefined): boolean {
    return proto3.util.equals(EditFileResult_FileDiff_ChunkDiff, a, b);
  }
}

/**
 * aiserver.v1.EditFileResult.RecoverableError
 *
 * @generated from message aiserver.v1.EditFileResult.RecoverableError
 */
export class EditFileResult_RecoverableError extends Message<EditFileResult_RecoverableError> {
  /**
   * @generated from field: aiserver.v1.EditFileResult.RecoverableError.RecoverableErrorType error_type = 1;
   */
  errorType = EditFileResult_RecoverableError_RecoverableErrorType.UNSPECIFIED;

  /**
   * @generated from field: string model_message = 2;
   */
  modelMessage = "";

  constructor(data?: PartialMessage<EditFileResult_RecoverableError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileResult.RecoverableError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error_type", kind: "enum", T: proto3.getEnumType(EditFileResult_RecoverableError_RecoverableErrorType) },
    { no: 2, name: "model_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileResult_RecoverableError {
    return new EditFileResult_RecoverableError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileResult_RecoverableError {
    return new EditFileResult_RecoverableError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileResult_RecoverableError {
    return new EditFileResult_RecoverableError().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileResult_RecoverableError | PlainMessage<EditFileResult_RecoverableError> | undefined, b: EditFileResult_RecoverableError | PlainMessage<EditFileResult_RecoverableError> | undefined): boolean {
    return proto3.util.equals(EditFileResult_RecoverableError, a, b);
  }
}

/**
 * aiserver.v1.EditFileResult.RecoverableError.RecoverableErrorType
 *
 * @generated from enum aiserver.v1.EditFileResult.RecoverableError.RecoverableErrorType
 */
export enum EditFileResult_RecoverableError_RecoverableErrorType {
  /**
   * @generated from enum value: RECOVERABLE_ERROR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RECOVERABLE_ERROR_TYPE_SEARCH_STRING_NOT_FOUND = 1;
   */
  SEARCH_STRING_NOT_FOUND = 1,

  /**
   * @generated from enum value: RECOVERABLE_ERROR_TYPE_AMBIGUOUS_SEARCH_STRING = 2;
   */
  AMBIGUOUS_SEARCH_STRING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EditFileResult_RecoverableError_RecoverableErrorType)
proto3.util.setEnumType(EditFileResult_RecoverableError_RecoverableErrorType, "aiserver.v1.EditFileResult.RecoverableError.RecoverableErrorType", [
  { no: 0, name: "RECOVERABLE_ERROR_TYPE_UNSPECIFIED" },
  { no: 1, name: "RECOVERABLE_ERROR_TYPE_SEARCH_STRING_NOT_FOUND" },
  { no: 2, name: "RECOVERABLE_ERROR_TYPE_AMBIGUOUS_SEARCH_STRING" },
]);

/**
 * aiserver.v1.EditFileResult.EditFileHumanReview
 *
 * @generated from message aiserver.v1.EditFileResult.EditFileHumanReview
 */
export class EditFileResult_EditFileHumanReview extends Message<EditFileResult_EditFileHumanReview> {
  /**
   * @generated from field: bool is_edit_accepted = 1;
   */
  isEditAccepted = false;

  /**
   * @generated from field: string text_result = 2;
   */
  textResult = "";

  /**
   * @generated from field: bool stop_and_get_new_user_input = 3;
   */
  stopAndGetNewUserInput = false;

  constructor(data?: PartialMessage<EditFileResult_EditFileHumanReview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileResult.EditFileHumanReview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_edit_accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "text_result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stop_and_get_new_user_input", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileResult_EditFileHumanReview {
    return new EditFileResult_EditFileHumanReview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileResult_EditFileHumanReview {
    return new EditFileResult_EditFileHumanReview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileResult_EditFileHumanReview {
    return new EditFileResult_EditFileHumanReview().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileResult_EditFileHumanReview | PlainMessage<EditFileResult_EditFileHumanReview> | undefined, b: EditFileResult_EditFileHumanReview | PlainMessage<EditFileResult_EditFileHumanReview> | undefined): boolean {
    return proto3.util.equals(EditFileResult_EditFileHumanReview, a, b);
  }
}

/**
 * aiserver.v1.EditFileResult.HumanFeedback
 *
 * @generated from message aiserver.v1.EditFileResult.HumanFeedback
 */
export class EditFileResult_HumanFeedback extends Message<EditFileResult_HumanFeedback> {
  /**
   * @generated from field: string selected_option = 1;
   */
  selectedOption = "";

  /**
   * @generated from field: string feedback_text = 2;
   */
  feedbackText = "";

  /**
   * @generated from field: bool submit_feedback_as_new_message = 3;
   */
  submitFeedbackAsNewMessage = false;

  /**
   * @generated from field: string bubble_id = 4;
   */
  bubbleId = "";

  constructor(data?: PartialMessage<EditFileResult_HumanFeedback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.EditFileResult.HumanFeedback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "selected_option", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feedback_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "submit_feedback_as_new_message", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "bubble_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditFileResult_HumanFeedback {
    return new EditFileResult_HumanFeedback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditFileResult_HumanFeedback {
    return new EditFileResult_HumanFeedback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditFileResult_HumanFeedback {
    return new EditFileResult_HumanFeedback().fromJsonString(jsonString, options);
  }

  static equals(a: EditFileResult_HumanFeedback | PlainMessage<EditFileResult_HumanFeedback> | undefined, b: EditFileResult_HumanFeedback | PlainMessage<EditFileResult_HumanFeedback> | undefined): boolean {
    return proto3.util.equals(EditFileResult_HumanFeedback, a, b);
  }
}

/**
 * aiserver.v1.HumanReview
 *
 * @generated from message aiserver.v1.HumanReview
 */
export class HumanReview extends Message<HumanReview> {
  /**
   * @generated from field: string selected_option = 1;
   */
  selectedOption = "";

  /**
   * @generated from field: string feedback_text = 2;
   */
  feedbackText = "";

  /**
   * @generated from field: bool submit_feedback_as_new_message = 3;
   */
  submitFeedbackAsNewMessage = false;

  /**
   * @generated from field: string bubble_id = 4;
   */
  bubbleId = "";

  constructor(data?: PartialMessage<HumanReview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.HumanReview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "selected_option", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feedback_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "submit_feedback_as_new_message", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "bubble_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanReview {
    return new HumanReview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanReview {
    return new HumanReview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanReview {
    return new HumanReview().fromJsonString(jsonString, options);
  }

  static equals(a: HumanReview | PlainMessage<HumanReview> | undefined, b: HumanReview | PlainMessage<HumanReview> | undefined): boolean {
    return proto3.util.equals(HumanReview, a, b);
  }
}

/**
 * aiserver.v1.ToolCallFileSearchParams
 *
 * @generated from message aiserver.v1.ToolCallFileSearchParams
 */
export class ToolCallFileSearchParams extends Message<ToolCallFileSearchParams> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<ToolCallFileSearchParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolCallFileSearchParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolCallFileSearchParams {
    return new ToolCallFileSearchParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolCallFileSearchParams {
    return new ToolCallFileSearchParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolCallFileSearchParams {
    return new ToolCallFileSearchParams().fromJsonString(jsonString, options);
  }

  static equals(a: ToolCallFileSearchParams | PlainMessage<ToolCallFileSearchParams> | undefined, b: ToolCallFileSearchParams | PlainMessage<ToolCallFileSearchParams> | undefined): boolean {
    return proto3.util.equals(ToolCallFileSearchParams, a, b);
  }
}

/**
 * aiserver.v1.ToolCallFileSearchResult
 *
 * @generated from message aiserver.v1.ToolCallFileSearchResult
 */
export class ToolCallFileSearchResult extends Message<ToolCallFileSearchResult> {
  /**
   * @generated from field: repeated aiserver.v1.ToolCallFileSearchResult.File files = 1;
   */
  files: ToolCallFileSearchResult_File[] = [];

  /**
   * @generated from field: optional bool limit_hit = 2;
   */
  limitHit?: boolean;

  /**
   * @generated from field: int32 num_results = 3;
   */
  numResults = 0;

  constructor(data?: PartialMessage<ToolCallFileSearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolCallFileSearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: ToolCallFileSearchResult_File, repeated: true },
    { no: 2, name: "limit_hit", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "num_results", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolCallFileSearchResult {
    return new ToolCallFileSearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolCallFileSearchResult {
    return new ToolCallFileSearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolCallFileSearchResult {
    return new ToolCallFileSearchResult().fromJsonString(jsonString, options);
  }

  static equals(a: ToolCallFileSearchResult | PlainMessage<ToolCallFileSearchResult> | undefined, b: ToolCallFileSearchResult | PlainMessage<ToolCallFileSearchResult> | undefined): boolean {
    return proto3.util.equals(ToolCallFileSearchResult, a, b);
  }
}

/**
 * aiserver.v1.ToolCallFileSearchResult.File
 *
 * @generated from message aiserver.v1.ToolCallFileSearchResult.File
 */
export class ToolCallFileSearchResult_File extends Message<ToolCallFileSearchResult_File> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  constructor(data?: PartialMessage<ToolCallFileSearchResult_File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolCallFileSearchResult.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolCallFileSearchResult_File {
    return new ToolCallFileSearchResult_File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolCallFileSearchResult_File {
    return new ToolCallFileSearchResult_File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolCallFileSearchResult_File {
    return new ToolCallFileSearchResult_File().fromJsonString(jsonString, options);
  }

  static equals(a: ToolCallFileSearchResult_File | PlainMessage<ToolCallFileSearchResult_File> | undefined, b: ToolCallFileSearchResult_File | PlainMessage<ToolCallFileSearchResult_File> | undefined): boolean {
    return proto3.util.equals(ToolCallFileSearchResult_File, a, b);
  }
}

/**
 * aiserver.v1.ListDirParams
 *
 * @generated from message aiserver.v1.ListDirParams
 */
export class ListDirParams extends Message<ListDirParams> {
  /**
   * @generated from field: string directory_path = 1;
   */
  directoryPath = "";

  constructor(data?: PartialMessage<ListDirParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListDirParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "directory_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDirParams {
    return new ListDirParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDirParams {
    return new ListDirParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDirParams {
    return new ListDirParams().fromJsonString(jsonString, options);
  }

  static equals(a: ListDirParams | PlainMessage<ListDirParams> | undefined, b: ListDirParams | PlainMessage<ListDirParams> | undefined): boolean {
    return proto3.util.equals(ListDirParams, a, b);
  }
}

/**
 * aiserver.v1.ListDirResult
 *
 * @generated from message aiserver.v1.ListDirResult
 */
export class ListDirResult extends Message<ListDirResult> {
  /**
   * @generated from field: repeated aiserver.v1.ListDirResult.File files = 1;
   */
  files: ListDirResult_File[] = [];

  /**
   * @generated from field: string directory_relative_workspace_path = 2;
   */
  directoryRelativeWorkspacePath = "";

  constructor(data?: PartialMessage<ListDirResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListDirResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: ListDirResult_File, repeated: true },
    { no: 2, name: "directory_relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDirResult {
    return new ListDirResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDirResult {
    return new ListDirResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDirResult {
    return new ListDirResult().fromJsonString(jsonString, options);
  }

  static equals(a: ListDirResult | PlainMessage<ListDirResult> | undefined, b: ListDirResult | PlainMessage<ListDirResult> | undefined): boolean {
    return proto3.util.equals(ListDirResult, a, b);
  }
}

/**
 * aiserver.v1.ListDirResult.File
 *
 * @generated from message aiserver.v1.ListDirResult.File
 */
export class ListDirResult_File extends Message<ListDirResult_File> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool is_directory = 2;
   */
  isDirectory = false;

  /**
   * @generated from field: optional int64 size = 3;
   */
  size?: bigint;

  /**
   * @generated from field: optional google.protobuf.Timestamp last_modified = 4;
   */
  lastModified?: Timestamp;

  /**
   * @generated from field: optional int32 num_children = 5;
   */
  numChildren?: number;

  /**
   * @generated from field: optional int32 num_lines = 6;
   */
  numLines?: number;

  constructor(data?: PartialMessage<ListDirResult_File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ListDirResult.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_directory", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 4, name: "last_modified", kind: "message", T: Timestamp, opt: true },
    { no: 5, name: "num_children", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "num_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDirResult_File {
    return new ListDirResult_File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDirResult_File {
    return new ListDirResult_File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDirResult_File {
    return new ListDirResult_File().fromJsonString(jsonString, options);
  }

  static equals(a: ListDirResult_File | PlainMessage<ListDirResult_File> | undefined, b: ListDirResult_File | PlainMessage<ListDirResult_File> | undefined): boolean {
    return proto3.util.equals(ListDirResult_File, a, b);
  }
}

/**
 * aiserver.v1.ReadFileParams
 *
 * @generated from message aiserver.v1.ReadFileParams
 */
export class ReadFileParams extends Message<ReadFileParams> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: bool read_entire_file = 2;
   */
  readEntireFile = false;

  /**
   * @generated from field: optional int32 start_line_one_indexed = 3;
   */
  startLineOneIndexed?: number;

  /**
   * @generated from field: optional int32 end_line_one_indexed_inclusive = 4;
   */
  endLineOneIndexedInclusive?: number;

  /**
   * @generated from field: bool file_is_allowed_to_be_read_entirely = 5;
   */
  fileIsAllowedToBeReadEntirely = false;

  /**
   * @generated from field: optional int32 max_lines = 6;
   */
  maxLines?: number;

  /**
   * @generated from field: optional int32 max_chars = 7;
   */
  maxChars?: number;

  /**
   * @generated from field: optional int32 min_lines = 8;
   */
  minLines?: number;

  constructor(data?: PartialMessage<ReadFileParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReadFileParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "read_entire_file", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "start_line_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "end_line_one_indexed_inclusive", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "file_is_allowed_to_be_read_entirely", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "max_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "max_chars", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 8, name: "min_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadFileParams {
    return new ReadFileParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadFileParams {
    return new ReadFileParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadFileParams {
    return new ReadFileParams().fromJsonString(jsonString, options);
  }

  static equals(a: ReadFileParams | PlainMessage<ReadFileParams> | undefined, b: ReadFileParams | PlainMessage<ReadFileParams> | undefined): boolean {
    return proto3.util.equals(ReadFileParams, a, b);
  }
}

/**
 * aiserver.v1.ReadFileResult
 *
 * @generated from message aiserver.v1.ReadFileResult
 */
export class ReadFileResult extends Message<ReadFileResult> {
  /**
   * @generated from field: string contents = 1;
   */
  contents = "";

  /**
   * @generated from field: bool did_downgrade_to_line_range = 2;
   */
  didDowngradeToLineRange = false;

  /**
   * @generated from field: bool did_shorten_line_range = 3;
   */
  didShortenLineRange = false;

  /**
   * @generated from field: bool did_set_default_line_range = 4;
   */
  didSetDefaultLineRange = false;

  /**
   * @generated from field: optional string full_file_contents = 5;
   */
  fullFileContents?: string;

  /**
   * @generated from field: optional string outline = 6;
   */
  outline?: string;

  /**
   * @generated from field: optional int32 start_line_one_indexed = 7;
   */
  startLineOneIndexed?: number;

  /**
   * @generated from field: optional int32 end_line_one_indexed_inclusive = 8;
   */
  endLineOneIndexedInclusive?: number;

  /**
   * @generated from field: string relative_workspace_path = 9;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: bool did_shorten_char_range = 10;
   */
  didShortenCharRange = false;

  /**
   * @generated from field: optional bool read_full_file = 11;
   */
  readFullFile?: boolean;

  /**
   * @generated from field: optional int32 total_lines = 12;
   */
  totalLines?: number;

  /**
   * @generated from field: repeated aiserver.v1.CursorRule matching_cursor_rules = 13;
   */
  matchingCursorRules: CursorRule[] = [];

  /**
   * @generated from field: aiserver.v1.FileGit file_git_context = 14;
   */
  fileGitContext?: FileGit;

  constructor(data?: PartialMessage<ReadFileResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReadFileResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "did_downgrade_to_line_range", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "did_shorten_line_range", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "did_set_default_line_range", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "full_file_contents", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "outline", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "start_line_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 8, name: "end_line_one_indexed_inclusive", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "did_shorten_char_range", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "read_full_file", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "total_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 13, name: "matching_cursor_rules", kind: "message", T: CursorRule, repeated: true },
    { no: 14, name: "file_git_context", kind: "message", T: FileGit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadFileResult {
    return new ReadFileResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadFileResult {
    return new ReadFileResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadFileResult {
    return new ReadFileResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReadFileResult | PlainMessage<ReadFileResult> | undefined, b: ReadFileResult | PlainMessage<ReadFileResult> | undefined): boolean {
    return proto3.util.equals(ReadFileResult, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams
 *
 * @generated from message aiserver.v1.RipgrepSearchParams
 */
export class RipgrepSearchParams extends Message<RipgrepSearchParams> {
  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto options = 1;
   */
  options?: RipgrepSearchParams_ITextQueryBuilderOptionsProto;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.IPatternInfoProto pattern_info = 2;
   */
  patternInfo?: RipgrepSearchParams_IPatternInfoProto;

  constructor(data?: PartialMessage<RipgrepSearchParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "message", T: RipgrepSearchParams_ITextQueryBuilderOptionsProto },
    { no: 2, name: "pattern_info", kind: "message", T: RipgrepSearchParams_IPatternInfoProto },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams {
    return new RipgrepSearchParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams {
    return new RipgrepSearchParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams {
    return new RipgrepSearchParams().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams | PlainMessage<RipgrepSearchParams> | undefined, b: RipgrepSearchParams | PlainMessage<RipgrepSearchParams> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.IPatternInfoProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.IPatternInfoProto
 */
export class RipgrepSearchParams_IPatternInfoProto extends Message<RipgrepSearchParams_IPatternInfoProto> {
  /**
   * @generated from field: string pattern = 1;
   */
  pattern = "";

  /**
   * @generated from field: optional bool is_reg_exp = 2;
   */
  isRegExp?: boolean;

  /**
   * @generated from field: optional bool is_word_match = 3;
   */
  isWordMatch?: boolean;

  /**
   * @generated from field: optional string word_separators = 4;
   */
  wordSeparators?: string;

  /**
   * @generated from field: optional bool is_multiline = 5;
   */
  isMultiline?: boolean;

  /**
   * @generated from field: optional bool is_unicode = 6;
   */
  isUnicode?: boolean;

  /**
   * @generated from field: optional bool is_case_sensitive = 7;
   */
  isCaseSensitive?: boolean;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.IPatternInfoProto.INotebookPatternInfoProto notebook_info = 8;
   */
  notebookInfo?: RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto;

  /**
   * @generated from field: optional bool pattern_was_escaped = 9;
   */
  patternWasEscaped?: boolean;

  constructor(data?: PartialMessage<RipgrepSearchParams_IPatternInfoProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.IPatternInfoProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_reg_exp", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "is_word_match", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "word_separators", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "is_multiline", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "is_unicode", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "is_case_sensitive", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "notebook_info", kind: "message", T: RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto },
    { no: 9, name: "pattern_was_escaped", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_IPatternInfoProto {
    return new RipgrepSearchParams_IPatternInfoProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_IPatternInfoProto {
    return new RipgrepSearchParams_IPatternInfoProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_IPatternInfoProto {
    return new RipgrepSearchParams_IPatternInfoProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_IPatternInfoProto | PlainMessage<RipgrepSearchParams_IPatternInfoProto> | undefined, b: RipgrepSearchParams_IPatternInfoProto | PlainMessage<RipgrepSearchParams_IPatternInfoProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_IPatternInfoProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.IPatternInfoProto.INotebookPatternInfoProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.IPatternInfoProto.INotebookPatternInfoProto
 */
export class RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto extends Message<RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto> {
  /**
   * @generated from field: optional bool is_in_notebook_markdown_input = 1;
   */
  isInNotebookMarkdownInput?: boolean;

  /**
   * @generated from field: optional bool is_in_notebook_markdown_preview = 2;
   */
  isInNotebookMarkdownPreview?: boolean;

  /**
   * @generated from field: optional bool is_in_notebook_cell_input = 3;
   */
  isInNotebookCellInput?: boolean;

  /**
   * @generated from field: optional bool is_in_notebook_cell_output = 4;
   */
  isInNotebookCellOutput?: boolean;

  constructor(data?: PartialMessage<RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.IPatternInfoProto.INotebookPatternInfoProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_in_notebook_markdown_input", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "is_in_notebook_markdown_preview", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "is_in_notebook_cell_input", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "is_in_notebook_cell_output", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto {
    return new RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto {
    return new RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto {
    return new RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto | PlainMessage<RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto> | undefined, b: RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto | PlainMessage<RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_IPatternInfoProto_INotebookPatternInfoProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto
 */
export class RipgrepSearchParams_ITextQueryBuilderOptionsProto extends Message<RipgrepSearchParams_ITextQueryBuilderOptionsProto> {
  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ITextSearchPreviewOptionsProto preview_options = 1;
   */
  previewOptions?: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto;

  /**
   * @generated from field: optional string file_encoding = 2;
   */
  fileEncoding?: string;

  /**
   * @generated from field: optional int32 surrounding_context = 3;
   */
  surroundingContext?: number;

  /**
   * @generated from field: optional bool is_smart_case = 4;
   */
  isSmartCase?: boolean;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.INotebookSearchConfigProto notebook_search_config = 5;
   */
  notebookSearchConfig?: RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExcludePatternProto exclude_pattern = 6;
   */
  excludePattern?: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPathPatternBuilderProto include_pattern = 7;
   */
  includePattern?: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto;

  /**
   * @generated from field: optional bool expand_patterns = 8;
   */
  expandPatterns?: boolean;

  /**
   * @generated from field: optional int32 max_results = 9;
   */
  maxResults?: number;

  /**
   * @generated from field: optional int32 max_file_size = 10;
   */
  maxFileSize?: number;

  /**
   * @generated from field: optional bool disregard_ignore_files = 11;
   */
  disregardIgnoreFiles?: boolean;

  /**
   * @generated from field: optional bool disregard_global_ignore_files = 12;
   */
  disregardGlobalIgnoreFiles?: boolean;

  /**
   * @generated from field: optional bool disregard_parent_ignore_files = 13;
   */
  disregardParentIgnoreFiles?: boolean;

  /**
   * @generated from field: optional bool disregard_exclude_settings = 14;
   */
  disregardExcludeSettings?: boolean;

  /**
   * @generated from field: optional bool disregard_search_exclude_settings = 15;
   */
  disregardSearchExcludeSettings?: boolean;

  /**
   * @generated from field: optional bool ignore_symlinks = 16;
   */
  ignoreSymlinks?: boolean;

  /**
   * @generated from field: optional bool only_open_editors = 17;
   */
  onlyOpenEditors?: boolean;

  /**
   * @generated from field: optional bool only_file_scheme = 18;
   */
  onlyFileScheme?: boolean;

  /**
   * @generated from field: optional string reason = 19;
   */
  reason?: string;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExtraFileResourcesProto extra_file_resources = 20;
   */
  extraFileResources?: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto;

  constructor(data?: PartialMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preview_options", kind: "message", T: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto },
    { no: 2, name: "file_encoding", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "surrounding_context", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "is_smart_case", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "notebook_search_config", kind: "message", T: RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto },
    { no: 6, name: "exclude_pattern", kind: "message", T: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto },
    { no: 7, name: "include_pattern", kind: "message", T: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto },
    { no: 8, name: "expand_patterns", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "max_results", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 10, name: "max_file_size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 11, name: "disregard_ignore_files", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "disregard_global_ignore_files", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 13, name: "disregard_parent_ignore_files", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 14, name: "disregard_exclude_settings", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 15, name: "disregard_search_exclude_settings", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 16, name: "ignore_symlinks", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 17, name: "only_open_editors", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 18, name: "only_file_scheme", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 19, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 20, name: "extra_file_resources", kind: "message", T: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_ITextQueryBuilderOptionsProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto> | undefined, b: RipgrepSearchParams_ITextQueryBuilderOptionsProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_ITextQueryBuilderOptionsProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExtraFileResourcesProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExtraFileResourcesProto
 */
export class RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto extends Message<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto> {
  /**
   * @generated from field: repeated string extra_file_resources = 1;
   */
  extraFileResources: string[] = [];

  constructor(data?: PartialMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExtraFileResourcesProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "extra_file_resources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto> | undefined, b: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExtraFileResourcesProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExcludePatternProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExcludePatternProto
 */
export class RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto extends Message<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto> {
  /**
   * @generated from field: repeated aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPatternBuilderProto exclude_pattern = 1;
   */
  excludePattern: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto[] = [];

  constructor(data?: PartialMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExcludePatternProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exclude_pattern", kind: "message", T: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto> | undefined, b: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_ITextQueryBuilderOptionsProto_ExcludePatternProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPatternBuilderProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPatternBuilderProto
 */
export class RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto extends Message<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto> {
  /**
   * @generated from field: optional string uri = 1;
   */
  uri?: string;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPathPatternBuilderProto pattern = 2;
   */
  pattern?: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto;

  constructor(data?: PartialMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPatternBuilderProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pattern", kind: "message", T: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto> | undefined, b: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPatternBuilderProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPathPatternBuilderProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPathPatternBuilderProto
 */
export class RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto extends Message<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto> {
  /**
   * @generated from field: optional string pattern = 1;
   */
  pattern?: string;

  /**
   * @generated from field: repeated string patterns = 2;
   */
  patterns: string[] = [];

  constructor(data?: PartialMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPathPatternBuilderProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "patterns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto> | undefined, b: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_ITextQueryBuilderOptionsProto_ISearchPathPatternBuilderProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ITextSearchPreviewOptionsProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ITextSearchPreviewOptionsProto
 */
export class RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto extends Message<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto> {
  /**
   * @generated from field: int32 match_lines = 1;
   */
  matchLines = 0;

  /**
   * @generated from field: int32 chars_per_line = 2;
   */
  charsPerLine = 0;

  constructor(data?: PartialMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ITextSearchPreviewOptionsProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "match_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "chars_per_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto> | undefined, b: RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_ITextQueryBuilderOptionsProto_ITextSearchPreviewOptionsProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.INotebookSearchConfigProto
 *
 * @generated from message aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.INotebookSearchConfigProto
 */
export class RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto extends Message<RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto> {
  /**
   * @generated from field: bool include_markup_input = 1;
   */
  includeMarkupInput = false;

  /**
   * @generated from field: bool include_markup_preview = 2;
   */
  includeMarkupPreview = false;

  /**
   * @generated from field: bool include_code_input = 3;
   */
  includeCodeInput = false;

  /**
   * @generated from field: bool include_output = 4;
   */
  includeOutput = false;

  constructor(data?: PartialMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.INotebookSearchConfigProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include_markup_input", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "include_markup_preview", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "include_code_input", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "include_output", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto {
    return new RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto> | undefined, b: RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto | PlainMessage<RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchParams_ITextQueryBuilderOptionsProto_INotebookSearchConfigProto, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResult
 *
 * @generated from message aiserver.v1.RipgrepSearchResult
 */
export class RipgrepSearchResult extends Message<RipgrepSearchResult> {
  /**
   * @generated from field: aiserver.v1.RipgrepSearchResultInternal internal = 1;
   */
  internal?: RipgrepSearchResultInternal;

  constructor(data?: PartialMessage<RipgrepSearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "internal", kind: "message", T: RipgrepSearchResultInternal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResult {
    return new RipgrepSearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResult {
    return new RipgrepSearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResult {
    return new RipgrepSearchResult().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResult | PlainMessage<RipgrepSearchResult> | undefined, b: RipgrepSearchResult | PlainMessage<RipgrepSearchResult> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResult, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal
 */
export class RipgrepSearchResultInternal extends Message<RipgrepSearchResultInternal> {
  /**
   * @generated from field: repeated aiserver.v1.RipgrepSearchResultInternal.IFileMatch results = 1;
   */
  results: RipgrepSearchResultInternal_IFileMatch[] = [];

  /**
   * @generated from field: optional aiserver.v1.RipgrepSearchResultInternal.SearchCompletionExitCode exit = 2;
   */
  exit?: RipgrepSearchResultInternal_SearchCompletionExitCode;

  /**
   * @generated from field: optional bool limit_hit = 3;
   */
  limitHit?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.RipgrepSearchResultInternal.ITextSearchCompleteMessage messages = 4;
   */
  messages: RipgrepSearchResultInternal_ITextSearchCompleteMessage[] = [];

  /**
   * @generated from oneof aiserver.v1.RipgrepSearchResultInternal.stats
   */
  stats: {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats file_search_stats = 5;
     */
    value: RipgrepSearchResultInternal_IFileSearchStats;
    case: "fileSearchStats";
  } | {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats text_search_stats = 6;
     */
    value: RipgrepSearchResultInternal_ITextSearchStats;
    case: "textSearchStats";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RipgrepSearchResultInternal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: RipgrepSearchResultInternal_IFileMatch, repeated: true },
    { no: 2, name: "exit", kind: "enum", T: proto3.getEnumType(RipgrepSearchResultInternal_SearchCompletionExitCode), opt: true },
    { no: 3, name: "limit_hit", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "messages", kind: "message", T: RipgrepSearchResultInternal_ITextSearchCompleteMessage, repeated: true },
    { no: 5, name: "file_search_stats", kind: "message", T: RipgrepSearchResultInternal_IFileSearchStats, oneof: "stats" },
    { no: 6, name: "text_search_stats", kind: "message", T: RipgrepSearchResultInternal_ITextSearchStats, oneof: "stats" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal {
    return new RipgrepSearchResultInternal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal {
    return new RipgrepSearchResultInternal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal {
    return new RipgrepSearchResultInternal().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal | PlainMessage<RipgrepSearchResultInternal> | undefined, b: RipgrepSearchResultInternal | PlainMessage<RipgrepSearchResultInternal> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.TextSearchCompleteMessageType
 *
 * @generated from enum aiserver.v1.RipgrepSearchResultInternal.TextSearchCompleteMessageType
 */
export enum RipgrepSearchResultInternal_TextSearchCompleteMessageType {
  /**
   * @generated from enum value: TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_INFORMATION = 1;
   */
  INFORMATION = 1,

  /**
   * @generated from enum value: TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_WARNING = 2;
   */
  WARNING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RipgrepSearchResultInternal_TextSearchCompleteMessageType)
proto3.util.setEnumType(RipgrepSearchResultInternal_TextSearchCompleteMessageType, "aiserver.v1.RipgrepSearchResultInternal.TextSearchCompleteMessageType", [
  { no: 0, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_INFORMATION" },
  { no: 2, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_WARNING" },
]);

/**
 * aiserver.v1.RipgrepSearchResultInternal.SearchCompletionExitCode
 *
 * @generated from enum aiserver.v1.RipgrepSearchResultInternal.SearchCompletionExitCode
 */
export enum RipgrepSearchResultInternal_SearchCompletionExitCode {
  /**
   * @generated from enum value: SEARCH_COMPLETION_EXIT_CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SEARCH_COMPLETION_EXIT_CODE_NORMAL = 1;
   */
  NORMAL = 1,

  /**
   * @generated from enum value: SEARCH_COMPLETION_EXIT_CODE_NEW_SEARCH_STARTED = 2;
   */
  NEW_SEARCH_STARTED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RipgrepSearchResultInternal_SearchCompletionExitCode)
proto3.util.setEnumType(RipgrepSearchResultInternal_SearchCompletionExitCode, "aiserver.v1.RipgrepSearchResultInternal.SearchCompletionExitCode", [
  { no: 0, name: "SEARCH_COMPLETION_EXIT_CODE_UNSPECIFIED" },
  { no: 1, name: "SEARCH_COMPLETION_EXIT_CODE_NORMAL" },
  { no: 2, name: "SEARCH_COMPLETION_EXIT_CODE_NEW_SEARCH_STARTED" },
]);

/**
 * aiserver.v1.RipgrepSearchResultInternal.IFileMatch
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.IFileMatch
 */
export class RipgrepSearchResultInternal_IFileMatch extends Message<RipgrepSearchResultInternal_IFileMatch> {
  /**
   * @generated from field: string resource = 1;
   */
  resource = "";

  /**
   * @generated from field: repeated aiserver.v1.RipgrepSearchResultInternal.ITextSearchResult results = 2;
   */
  results: RipgrepSearchResultInternal_ITextSearchResult[] = [];

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_IFileMatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.IFileMatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: RipgrepSearchResultInternal_ITextSearchResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_IFileMatch {
    return new RipgrepSearchResultInternal_IFileMatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_IFileMatch {
    return new RipgrepSearchResultInternal_IFileMatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_IFileMatch {
    return new RipgrepSearchResultInternal_IFileMatch().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_IFileMatch | PlainMessage<RipgrepSearchResultInternal_IFileMatch> | undefined, b: RipgrepSearchResultInternal_IFileMatch | PlainMessage<RipgrepSearchResultInternal_IFileMatch> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_IFileMatch, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.ITextSearchResult
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ITextSearchResult
 */
export class RipgrepSearchResultInternal_ITextSearchResult extends Message<RipgrepSearchResultInternal_ITextSearchResult> {
  /**
   * @generated from oneof aiserver.v1.RipgrepSearchResultInternal.ITextSearchResult.result
   */
  result: {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchResultInternal.ITextSearchMatch match = 1;
     */
    value: RipgrepSearchResultInternal_ITextSearchMatch;
    case: "match";
  } | {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchResultInternal.ITextSearchContext context = 2;
     */
    value: RipgrepSearchResultInternal_ITextSearchContext;
    case: "context";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ITextSearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ITextSearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "match", kind: "message", T: RipgrepSearchResultInternal_ITextSearchMatch, oneof: "result" },
    { no: 2, name: "context", kind: "message", T: RipgrepSearchResultInternal_ITextSearchContext, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ITextSearchResult {
    return new RipgrepSearchResultInternal_ITextSearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchResult {
    return new RipgrepSearchResultInternal_ITextSearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchResult {
    return new RipgrepSearchResultInternal_ITextSearchResult().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ITextSearchResult | PlainMessage<RipgrepSearchResultInternal_ITextSearchResult> | undefined, b: RipgrepSearchResultInternal_ITextSearchResult | PlainMessage<RipgrepSearchResultInternal_ITextSearchResult> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ITextSearchResult, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.ITextSearchMatch
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ITextSearchMatch
 */
export class RipgrepSearchResultInternal_ITextSearchMatch extends Message<RipgrepSearchResultInternal_ITextSearchMatch> {
  /**
   * @generated from field: optional string uri = 1;
   */
  uri?: string;

  /**
   * @generated from field: repeated aiserver.v1.RipgrepSearchResultInternal.ISearchRangeSetPairing range_locations = 2;
   */
  rangeLocations: RipgrepSearchResultInternal_ISearchRangeSetPairing[] = [];

  /**
   * @generated from field: string preview_text = 3;
   */
  previewText = "";

  /**
   * @generated from field: optional int32 webview_index = 4;
   */
  webviewIndex?: number;

  /**
   * @generated from field: optional string cell_fragment = 5;
   */
  cellFragment?: string;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ITextSearchMatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ITextSearchMatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "range_locations", kind: "message", T: RipgrepSearchResultInternal_ISearchRangeSetPairing, repeated: true },
    { no: 3, name: "preview_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "webview_index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "cell_fragment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ITextSearchMatch {
    return new RipgrepSearchResultInternal_ITextSearchMatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchMatch {
    return new RipgrepSearchResultInternal_ITextSearchMatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchMatch {
    return new RipgrepSearchResultInternal_ITextSearchMatch().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ITextSearchMatch | PlainMessage<RipgrepSearchResultInternal_ITextSearchMatch> | undefined, b: RipgrepSearchResultInternal_ITextSearchMatch | PlainMessage<RipgrepSearchResultInternal_ITextSearchMatch> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ITextSearchMatch, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.ITextSearchContext
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ITextSearchContext
 */
export class RipgrepSearchResultInternal_ITextSearchContext extends Message<RipgrepSearchResultInternal_ITextSearchContext> {
  /**
   * @generated from field: optional string uri = 1;
   */
  uri?: string;

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: int32 line_number = 3;
   */
  lineNumber = 0;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ITextSearchContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ITextSearchContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ITextSearchContext {
    return new RipgrepSearchResultInternal_ITextSearchContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchContext {
    return new RipgrepSearchResultInternal_ITextSearchContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchContext {
    return new RipgrepSearchResultInternal_ITextSearchContext().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ITextSearchContext | PlainMessage<RipgrepSearchResultInternal_ITextSearchContext> | undefined, b: RipgrepSearchResultInternal_ITextSearchContext | PlainMessage<RipgrepSearchResultInternal_ITextSearchContext> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ITextSearchContext, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.ISearchRangeSetPairing
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ISearchRangeSetPairing
 */
export class RipgrepSearchResultInternal_ISearchRangeSetPairing extends Message<RipgrepSearchResultInternal_ISearchRangeSetPairing> {
  /**
   * @generated from field: aiserver.v1.RipgrepSearchResultInternal.ISearchRange source = 1;
   */
  source?: RipgrepSearchResultInternal_ISearchRange;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchResultInternal.ISearchRange preview = 2;
   */
  preview?: RipgrepSearchResultInternal_ISearchRange;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ISearchRangeSetPairing>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ISearchRangeSetPairing";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: RipgrepSearchResultInternal_ISearchRange },
    { no: 2, name: "preview", kind: "message", T: RipgrepSearchResultInternal_ISearchRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ISearchRangeSetPairing {
    return new RipgrepSearchResultInternal_ISearchRangeSetPairing().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ISearchRangeSetPairing {
    return new RipgrepSearchResultInternal_ISearchRangeSetPairing().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ISearchRangeSetPairing {
    return new RipgrepSearchResultInternal_ISearchRangeSetPairing().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ISearchRangeSetPairing | PlainMessage<RipgrepSearchResultInternal_ISearchRangeSetPairing> | undefined, b: RipgrepSearchResultInternal_ISearchRangeSetPairing | PlainMessage<RipgrepSearchResultInternal_ISearchRangeSetPairing> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ISearchRangeSetPairing, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.ISearchRange
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ISearchRange
 */
export class RipgrepSearchResultInternal_ISearchRange extends Message<RipgrepSearchResultInternal_ISearchRange> {
  /**
   * @generated from field: int32 start_line_number = 1;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 start_column = 2;
   */
  startColumn = 0;

  /**
   * @generated from field: int32 end_line_number = 3;
   */
  endLineNumber = 0;

  /**
   * @generated from field: int32 end_column = 4;
   */
  endColumn = 0;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ISearchRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ISearchRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "start_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ISearchRange {
    return new RipgrepSearchResultInternal_ISearchRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ISearchRange {
    return new RipgrepSearchResultInternal_ISearchRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ISearchRange {
    return new RipgrepSearchResultInternal_ISearchRange().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ISearchRange | PlainMessage<RipgrepSearchResultInternal_ISearchRange> | undefined, b: RipgrepSearchResultInternal_ISearchRange | PlainMessage<RipgrepSearchResultInternal_ISearchRange> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ISearchRange, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.ITextSearchCompleteMessage
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ITextSearchCompleteMessage
 */
export class RipgrepSearchResultInternal_ITextSearchCompleteMessage extends Message<RipgrepSearchResultInternal_ITextSearchCompleteMessage> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: aiserver.v1.RipgrepSearchResultInternal.TextSearchCompleteMessageType type = 2;
   */
  type = RipgrepSearchResultInternal_TextSearchCompleteMessageType.UNSPECIFIED;

  /**
   * @generated from field: optional bool trusted = 3;
   */
  trusted?: boolean;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ITextSearchCompleteMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ITextSearchCompleteMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(RipgrepSearchResultInternal_TextSearchCompleteMessageType) },
    { no: 3, name: "trusted", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ITextSearchCompleteMessage {
    return new RipgrepSearchResultInternal_ITextSearchCompleteMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchCompleteMessage {
    return new RipgrepSearchResultInternal_ITextSearchCompleteMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchCompleteMessage {
    return new RipgrepSearchResultInternal_ITextSearchCompleteMessage().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ITextSearchCompleteMessage | PlainMessage<RipgrepSearchResultInternal_ITextSearchCompleteMessage> | undefined, b: RipgrepSearchResultInternal_ITextSearchCompleteMessage | PlainMessage<RipgrepSearchResultInternal_ITextSearchCompleteMessage> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ITextSearchCompleteMessage, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats
 */
export class RipgrepSearchResultInternal_IFileSearchStats extends Message<RipgrepSearchResultInternal_IFileSearchStats> {
  /**
   * @generated from field: bool from_cache = 1;
   */
  fromCache = false;

  /**
   * @generated from oneof aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats.detail_stats
   */
  detailStats: {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchResultInternal.ISearchEngineStats search_engine_stats = 2;
     */
    value: RipgrepSearchResultInternal_ISearchEngineStats;
    case: "searchEngineStats";
  } | {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchResultInternal.ICachedSearchStats cached_search_stats = 3;
     */
    value: RipgrepSearchResultInternal_ICachedSearchStats;
    case: "cachedSearchStats";
  } | {
    /**
     * @generated from field: aiserver.v1.RipgrepSearchResultInternal.IFileSearchProviderStats file_search_provider_stats = 4;
     */
    value: RipgrepSearchResultInternal_IFileSearchProviderStats;
    case: "fileSearchProviderStats";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: int32 result_count = 5;
   */
  resultCount = 0;

  /**
   * @generated from field: aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats.FileSearchProviderType type = 6;
   */
  type = RipgrepSearchResultInternal_IFileSearchStats_FileSearchProviderType.UNSPECIFIED;

  /**
   * @generated from field: optional int32 sorting_time = 7;
   */
  sortingTime?: number;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_IFileSearchStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "search_engine_stats", kind: "message", T: RipgrepSearchResultInternal_ISearchEngineStats, oneof: "detail_stats" },
    { no: 3, name: "cached_search_stats", kind: "message", T: RipgrepSearchResultInternal_ICachedSearchStats, oneof: "detail_stats" },
    { no: 4, name: "file_search_provider_stats", kind: "message", T: RipgrepSearchResultInternal_IFileSearchProviderStats, oneof: "detail_stats" },
    { no: 5, name: "result_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "type", kind: "enum", T: proto3.getEnumType(RipgrepSearchResultInternal_IFileSearchStats_FileSearchProviderType) },
    { no: 7, name: "sorting_time", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_IFileSearchStats {
    return new RipgrepSearchResultInternal_IFileSearchStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_IFileSearchStats {
    return new RipgrepSearchResultInternal_IFileSearchStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_IFileSearchStats {
    return new RipgrepSearchResultInternal_IFileSearchStats().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_IFileSearchStats | PlainMessage<RipgrepSearchResultInternal_IFileSearchStats> | undefined, b: RipgrepSearchResultInternal_IFileSearchStats | PlainMessage<RipgrepSearchResultInternal_IFileSearchStats> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_IFileSearchStats, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats.FileSearchProviderType
 *
 * @generated from enum aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats.FileSearchProviderType
 */
export enum RipgrepSearchResultInternal_IFileSearchStats_FileSearchProviderType {
  /**
   * @generated from enum value: FILE_SEARCH_PROVIDER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FILE_SEARCH_PROVIDER_TYPE_FILE_SEARCH_PROVIDER = 1;
   */
  FILE_SEARCH_PROVIDER = 1,

  /**
   * @generated from enum value: FILE_SEARCH_PROVIDER_TYPE_SEARCH_PROCESS = 2;
   */
  SEARCH_PROCESS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RipgrepSearchResultInternal_IFileSearchStats_FileSearchProviderType)
proto3.util.setEnumType(RipgrepSearchResultInternal_IFileSearchStats_FileSearchProviderType, "aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats.FileSearchProviderType", [
  { no: 0, name: "FILE_SEARCH_PROVIDER_TYPE_UNSPECIFIED" },
  { no: 1, name: "FILE_SEARCH_PROVIDER_TYPE_FILE_SEARCH_PROVIDER" },
  { no: 2, name: "FILE_SEARCH_PROVIDER_TYPE_SEARCH_PROCESS" },
]);

/**
 * aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats
 */
export class RipgrepSearchResultInternal_ITextSearchStats extends Message<RipgrepSearchResultInternal_ITextSearchStats> {
  /**
   * @generated from field: aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats.TextSearchProviderType type = 1;
   */
  type = RipgrepSearchResultInternal_ITextSearchStats_TextSearchProviderType.UNSPECIFIED;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ITextSearchStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(RipgrepSearchResultInternal_ITextSearchStats_TextSearchProviderType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ITextSearchStats {
    return new RipgrepSearchResultInternal_ITextSearchStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchStats {
    return new RipgrepSearchResultInternal_ITextSearchStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ITextSearchStats {
    return new RipgrepSearchResultInternal_ITextSearchStats().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ITextSearchStats | PlainMessage<RipgrepSearchResultInternal_ITextSearchStats> | undefined, b: RipgrepSearchResultInternal_ITextSearchStats | PlainMessage<RipgrepSearchResultInternal_ITextSearchStats> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ITextSearchStats, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats.TextSearchProviderType
 *
 * @generated from enum aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats.TextSearchProviderType
 */
export enum RipgrepSearchResultInternal_ITextSearchStats_TextSearchProviderType {
  /**
   * @generated from enum value: TEXT_SEARCH_PROVIDER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TEXT_SEARCH_PROVIDER_TYPE_TEXT_SEARCH_PROVIDER = 1;
   */
  TEXT_SEARCH_PROVIDER = 1,

  /**
   * @generated from enum value: TEXT_SEARCH_PROVIDER_TYPE_SEARCH_PROCESS = 2;
   */
  SEARCH_PROCESS = 2,

  /**
   * @generated from enum value: TEXT_SEARCH_PROVIDER_TYPE_AI_TEXT_SEARCH_PROVIDER = 3;
   */
  AI_TEXT_SEARCH_PROVIDER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RipgrepSearchResultInternal_ITextSearchStats_TextSearchProviderType)
proto3.util.setEnumType(RipgrepSearchResultInternal_ITextSearchStats_TextSearchProviderType, "aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats.TextSearchProviderType", [
  { no: 0, name: "TEXT_SEARCH_PROVIDER_TYPE_UNSPECIFIED" },
  { no: 1, name: "TEXT_SEARCH_PROVIDER_TYPE_TEXT_SEARCH_PROVIDER" },
  { no: 2, name: "TEXT_SEARCH_PROVIDER_TYPE_SEARCH_PROCESS" },
  { no: 3, name: "TEXT_SEARCH_PROVIDER_TYPE_AI_TEXT_SEARCH_PROVIDER" },
]);

/**
 * aiserver.v1.RipgrepSearchResultInternal.ISearchEngineStats
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ISearchEngineStats
 */
export class RipgrepSearchResultInternal_ISearchEngineStats extends Message<RipgrepSearchResultInternal_ISearchEngineStats> {
  /**
   * @generated from field: int32 file_walk_time = 1;
   */
  fileWalkTime = 0;

  /**
   * @generated from field: int32 directories_walked = 2;
   */
  directoriesWalked = 0;

  /**
   * @generated from field: int32 files_walked = 3;
   */
  filesWalked = 0;

  /**
   * @generated from field: int32 cmd_time = 4;
   */
  cmdTime = 0;

  /**
   * @generated from field: optional int32 cmd_result_count = 5;
   */
  cmdResultCount?: number;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ISearchEngineStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ISearchEngineStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_walk_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "directories_walked", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "files_walked", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "cmd_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "cmd_result_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ISearchEngineStats {
    return new RipgrepSearchResultInternal_ISearchEngineStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ISearchEngineStats {
    return new RipgrepSearchResultInternal_ISearchEngineStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ISearchEngineStats {
    return new RipgrepSearchResultInternal_ISearchEngineStats().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ISearchEngineStats | PlainMessage<RipgrepSearchResultInternal_ISearchEngineStats> | undefined, b: RipgrepSearchResultInternal_ISearchEngineStats | PlainMessage<RipgrepSearchResultInternal_ISearchEngineStats> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ISearchEngineStats, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.ICachedSearchStats
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.ICachedSearchStats
 */
export class RipgrepSearchResultInternal_ICachedSearchStats extends Message<RipgrepSearchResultInternal_ICachedSearchStats> {
  /**
   * @generated from field: bool cache_was_resolved = 1;
   */
  cacheWasResolved = false;

  /**
   * @generated from field: int32 cache_lookup_time = 2;
   */
  cacheLookupTime = 0;

  /**
   * @generated from field: int32 cache_filter_time = 3;
   */
  cacheFilterTime = 0;

  /**
   * @generated from field: int32 cache_entry_count = 4;
   */
  cacheEntryCount = 0;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_ICachedSearchStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.ICachedSearchStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cache_was_resolved", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "cache_lookup_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cache_filter_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "cache_entry_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_ICachedSearchStats {
    return new RipgrepSearchResultInternal_ICachedSearchStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ICachedSearchStats {
    return new RipgrepSearchResultInternal_ICachedSearchStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_ICachedSearchStats {
    return new RipgrepSearchResultInternal_ICachedSearchStats().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_ICachedSearchStats | PlainMessage<RipgrepSearchResultInternal_ICachedSearchStats> | undefined, b: RipgrepSearchResultInternal_ICachedSearchStats | PlainMessage<RipgrepSearchResultInternal_ICachedSearchStats> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_ICachedSearchStats, a, b);
  }
}

/**
 * aiserver.v1.RipgrepSearchResultInternal.IFileSearchProviderStats
 *
 * @generated from message aiserver.v1.RipgrepSearchResultInternal.IFileSearchProviderStats
 */
export class RipgrepSearchResultInternal_IFileSearchProviderStats extends Message<RipgrepSearchResultInternal_IFileSearchProviderStats> {
  /**
   * @generated from field: int32 provider_time = 1;
   */
  providerTime = 0;

  /**
   * @generated from field: int32 post_process_time = 2;
   */
  postProcessTime = 0;

  constructor(data?: PartialMessage<RipgrepSearchResultInternal_IFileSearchProviderStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RipgrepSearchResultInternal.IFileSearchProviderStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "post_process_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RipgrepSearchResultInternal_IFileSearchProviderStats {
    return new RipgrepSearchResultInternal_IFileSearchProviderStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_IFileSearchProviderStats {
    return new RipgrepSearchResultInternal_IFileSearchProviderStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RipgrepSearchResultInternal_IFileSearchProviderStats {
    return new RipgrepSearchResultInternal_IFileSearchProviderStats().fromJsonString(jsonString, options);
  }

  static equals(a: RipgrepSearchResultInternal_IFileSearchProviderStats | PlainMessage<RipgrepSearchResultInternal_IFileSearchProviderStats> | undefined, b: RipgrepSearchResultInternal_IFileSearchProviderStats | PlainMessage<RipgrepSearchResultInternal_IFileSearchProviderStats> | undefined): boolean {
    return proto3.util.equals(RipgrepSearchResultInternal_IFileSearchProviderStats, a, b);
  }
}

/**
 * aiserver.v1.ReadSemsearchFilesParams
 *
 * @generated from message aiserver.v1.ReadSemsearchFilesParams
 */
export class ReadSemsearchFilesParams extends Message<ReadSemsearchFilesParams> {
  /**
   * @generated from field: aiserver.v1.RepositoryInfo repository_info = 1;
   */
  repositoryInfo?: RepositoryInfo;

  /**
   * @generated from field: repeated aiserver.v1.CodeResult code_results = 2;
   */
  codeResults: CodeResult[] = [];

  /**
   * @generated from field: string query = 3;
   */
  query = "";

  /**
   * @generated from field: repeated aiserver.v1.PullRequestReference pr_references = 4;
   */
  prReferences: PullRequestReference[] = [];

  /**
   * @generated from field: optional bool pr_search_on = 5;
   */
  prSearchOn?: boolean;

  constructor(data?: PartialMessage<ReadSemsearchFilesParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReadSemsearchFilesParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository_info", kind: "message", T: RepositoryInfo },
    { no: 2, name: "code_results", kind: "message", T: CodeResult, repeated: true },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pr_references", kind: "message", T: PullRequestReference, repeated: true },
    { no: 5, name: "pr_search_on", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadSemsearchFilesParams {
    return new ReadSemsearchFilesParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadSemsearchFilesParams {
    return new ReadSemsearchFilesParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadSemsearchFilesParams {
    return new ReadSemsearchFilesParams().fromJsonString(jsonString, options);
  }

  static equals(a: ReadSemsearchFilesParams | PlainMessage<ReadSemsearchFilesParams> | undefined, b: ReadSemsearchFilesParams | PlainMessage<ReadSemsearchFilesParams> | undefined): boolean {
    return proto3.util.equals(ReadSemsearchFilesParams, a, b);
  }
}

/**
 * aiserver.v1.MissingFile
 *
 * @generated from message aiserver.v1.MissingFile
 */
export class MissingFile extends Message<MissingFile> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: aiserver.v1.MissingFile.MissingReason missing_reason = 2;
   */
  missingReason = MissingFile_MissingReason.UNSPECIFIED;

  /**
   * @generated from field: optional int32 num_lines = 3;
   */
  numLines?: number;

  constructor(data?: PartialMessage<MissingFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MissingFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "missing_reason", kind: "enum", T: proto3.getEnumType(MissingFile_MissingReason) },
    { no: 3, name: "num_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MissingFile {
    return new MissingFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MissingFile {
    return new MissingFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MissingFile {
    return new MissingFile().fromJsonString(jsonString, options);
  }

  static equals(a: MissingFile | PlainMessage<MissingFile> | undefined, b: MissingFile | PlainMessage<MissingFile> | undefined): boolean {
    return proto3.util.equals(MissingFile, a, b);
  }
}

/**
 * aiserver.v1.MissingFile.MissingReason
 *
 * @generated from enum aiserver.v1.MissingFile.MissingReason
 */
export enum MissingFile_MissingReason {
  /**
   * @generated from enum value: MISSING_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MISSING_REASON_TOO_LARGE = 1;
   */
  TOO_LARGE = 1,

  /**
   * @generated from enum value: MISSING_REASON_NOT_FOUND = 2;
   */
  NOT_FOUND = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MissingFile_MissingReason)
proto3.util.setEnumType(MissingFile_MissingReason, "aiserver.v1.MissingFile.MissingReason", [
  { no: 0, name: "MISSING_REASON_UNSPECIFIED" },
  { no: 1, name: "MISSING_REASON_TOO_LARGE" },
  { no: 2, name: "MISSING_REASON_NOT_FOUND" },
]);

/**
 * aiserver.v1.Knowledge
 *
 * @generated from message aiserver.v1.Knowledge
 */
export class Knowledge extends Message<Knowledge> {
  /**
   * @generated from field: string knowledge = 1;
   */
  knowledge = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  constructor(data?: PartialMessage<Knowledge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.Knowledge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "knowledge", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Knowledge {
    return new Knowledge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Knowledge {
    return new Knowledge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Knowledge {
    return new Knowledge().fromJsonString(jsonString, options);
  }

  static equals(a: Knowledge | PlainMessage<Knowledge> | undefined, b: Knowledge | PlainMessage<Knowledge> | undefined): boolean {
    return proto3.util.equals(Knowledge, a, b);
  }
}

/**
 * aiserver.v1.ToolPullRequestResult
 *
 * @generated from message aiserver.v1.ToolPullRequestResult
 */
export class ToolPullRequestResult extends Message<ToolPullRequestResult> {
  /**
   * @generated from field: string sha = 1;
   */
  sha = "";

  /**
   * @generated from field: string full_pr_contents = 2;
   */
  fullPrContents = "";

  /**
   * @generated from field: float score = 3;
   */
  score = 0;

  /**
   * @generated from field: optional string title = 4;
   */
  title?: string;

  /**
   * @generated from field: optional string summary = 5;
   */
  summary?: string;

  /**
   * @generated from field: optional uint32 pr_number = 6;
   */
  prNumber?: number;

  /**
   * @generated from field: repeated string changed_files = 7;
   */
  changedFiles: string[] = [];

  /**
   * @generated from field: optional string author = 8;
   */
  author?: string;

  /**
   * @generated from field: optional string date = 9;
   */
  date?: string;

  constructor(data?: PartialMessage<ToolPullRequestResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ToolPullRequestResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "full_pr_contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "pr_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 7, name: "changed_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolPullRequestResult {
    return new ToolPullRequestResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolPullRequestResult {
    return new ToolPullRequestResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolPullRequestResult {
    return new ToolPullRequestResult().fromJsonString(jsonString, options);
  }

  static equals(a: ToolPullRequestResult | PlainMessage<ToolPullRequestResult> | undefined, b: ToolPullRequestResult | PlainMessage<ToolPullRequestResult> | undefined): boolean {
    return proto3.util.equals(ToolPullRequestResult, a, b);
  }
}

/**
 * aiserver.v1.ReadSemsearchFilesResult
 *
 * @generated from message aiserver.v1.ReadSemsearchFilesResult
 */
export class ReadSemsearchFilesResult extends Message<ReadSemsearchFilesResult> {
  /**
   * @generated from field: repeated aiserver.v1.CodeResult code_results = 1;
   */
  codeResults: CodeResult[] = [];

  /**
   * @generated from field: repeated aiserver.v1.File all_files = 2;
   */
  allFiles: File[] = [];

  /**
   * @generated from field: repeated aiserver.v1.MissingFile missing_files = 3;
   */
  missingFiles: MissingFile[] = [];

  /**
   * @generated from field: repeated aiserver.v1.Knowledge knowledge_results = 4;
   */
  knowledgeResults: Knowledge[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ToolPullRequestResult pr_results = 5;
   */
  prResults: ToolPullRequestResult[] = [];

  /**
   * @generated from field: optional string git_remote_url = 6;
   */
  gitRemoteUrl?: string;

  /**
   * @generated from field: optional bool pr_hydration_timed_out = 7;
   */
  prHydrationTimedOut?: boolean;

  constructor(data?: PartialMessage<ReadSemsearchFilesResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReadSemsearchFilesResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_results", kind: "message", T: CodeResult, repeated: true },
    { no: 2, name: "all_files", kind: "message", T: File, repeated: true },
    { no: 3, name: "missing_files", kind: "message", T: MissingFile, repeated: true },
    { no: 4, name: "knowledge_results", kind: "message", T: Knowledge, repeated: true },
    { no: 5, name: "pr_results", kind: "message", T: ToolPullRequestResult, repeated: true },
    { no: 6, name: "git_remote_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "pr_hydration_timed_out", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadSemsearchFilesResult {
    return new ReadSemsearchFilesResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadSemsearchFilesResult {
    return new ReadSemsearchFilesResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadSemsearchFilesResult {
    return new ReadSemsearchFilesResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReadSemsearchFilesResult | PlainMessage<ReadSemsearchFilesResult> | undefined, b: ReadSemsearchFilesResult | PlainMessage<ReadSemsearchFilesResult> | undefined): boolean {
    return proto3.util.equals(ReadSemsearchFilesResult, a, b);
  }
}

/**
 * aiserver.v1.SemanticSearchFullParams
 *
 * @generated from message aiserver.v1.SemanticSearchFullParams
 */
export class SemanticSearchFullParams extends Message<SemanticSearchFullParams> {
  /**
   * @generated from field: aiserver.v1.RepositoryInfo repository_info = 1;
   */
  repositoryInfo?: RepositoryInfo;

  /**
   * @generated from field: string query = 2;
   */
  query = "";

  /**
   * @generated from field: optional string include_pattern = 3;
   */
  includePattern?: string;

  /**
   * @generated from field: optional string exclude_pattern = 4;
   */
  excludePattern?: string;

  /**
   * @generated from field: int32 top_k = 5;
   */
  topK = 0;

  /**
   * @generated from field: repeated aiserver.v1.PullRequestReference pr_references = 6;
   */
  prReferences: PullRequestReference[] = [];

  /**
   * @generated from field: optional bool pr_search_on = 7;
   */
  prSearchOn?: boolean;

  constructor(data?: PartialMessage<SemanticSearchFullParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SemanticSearchFullParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository_info", kind: "message", T: RepositoryInfo },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "include_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "exclude_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "top_k", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "pr_references", kind: "message", T: PullRequestReference, repeated: true },
    { no: 7, name: "pr_search_on", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SemanticSearchFullParams {
    return new SemanticSearchFullParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SemanticSearchFullParams {
    return new SemanticSearchFullParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SemanticSearchFullParams {
    return new SemanticSearchFullParams().fromJsonString(jsonString, options);
  }

  static equals(a: SemanticSearchFullParams | PlainMessage<SemanticSearchFullParams> | undefined, b: SemanticSearchFullParams | PlainMessage<SemanticSearchFullParams> | undefined): boolean {
    return proto3.util.equals(SemanticSearchFullParams, a, b);
  }
}

/**
 * aiserver.v1.SemanticSearchFullResult
 *
 * @generated from message aiserver.v1.SemanticSearchFullResult
 */
export class SemanticSearchFullResult extends Message<SemanticSearchFullResult> {
  /**
   * @generated from field: repeated aiserver.v1.CodeResult code_results = 1;
   */
  codeResults: CodeResult[] = [];

  /**
   * @generated from field: repeated aiserver.v1.File all_files = 2;
   */
  allFiles: File[] = [];

  /**
   * @generated from field: repeated aiserver.v1.MissingFile missing_files = 3;
   */
  missingFiles: MissingFile[] = [];

  /**
   * @generated from field: repeated aiserver.v1.Knowledge knowledge_results = 4;
   */
  knowledgeResults: Knowledge[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ToolPullRequestResult pr_results = 5;
   */
  prResults: ToolPullRequestResult[] = [];

  /**
   * @generated from field: optional string git_remote_url = 6;
   */
  gitRemoteUrl?: string;

  /**
   * @generated from field: optional bool pr_hydration_timed_out = 7;
   */
  prHydrationTimedOut?: boolean;

  constructor(data?: PartialMessage<SemanticSearchFullResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SemanticSearchFullResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code_results", kind: "message", T: CodeResult, repeated: true },
    { no: 2, name: "all_files", kind: "message", T: File, repeated: true },
    { no: 3, name: "missing_files", kind: "message", T: MissingFile, repeated: true },
    { no: 4, name: "knowledge_results", kind: "message", T: Knowledge, repeated: true },
    { no: 5, name: "pr_results", kind: "message", T: ToolPullRequestResult, repeated: true },
    { no: 6, name: "git_remote_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "pr_hydration_timed_out", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SemanticSearchFullResult {
    return new SemanticSearchFullResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SemanticSearchFullResult {
    return new SemanticSearchFullResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SemanticSearchFullResult {
    return new SemanticSearchFullResult().fromJsonString(jsonString, options);
  }

  static equals(a: SemanticSearchFullResult | PlainMessage<SemanticSearchFullResult> | undefined, b: SemanticSearchFullResult | PlainMessage<SemanticSearchFullResult> | undefined): boolean {
    return proto3.util.equals(SemanticSearchFullResult, a, b);
  }
}

/**
 * aiserver.v1.DeleteFileParams
 *
 * @generated from message aiserver.v1.DeleteFileParams
 */
export class DeleteFileParams extends Message<DeleteFileParams> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  constructor(data?: PartialMessage<DeleteFileParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DeleteFileParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileParams {
    return new DeleteFileParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileParams {
    return new DeleteFileParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileParams {
    return new DeleteFileParams().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileParams | PlainMessage<DeleteFileParams> | undefined, b: DeleteFileParams | PlainMessage<DeleteFileParams> | undefined): boolean {
    return proto3.util.equals(DeleteFileParams, a, b);
  }
}

/**
 * aiserver.v1.DeleteFileResult
 *
 * @generated from message aiserver.v1.DeleteFileResult
 */
export class DeleteFileResult extends Message<DeleteFileResult> {
  /**
   * @generated from field: bool rejected = 1;
   */
  rejected = false;

  /**
   * @generated from field: bool file_non_existent = 2;
   */
  fileNonExistent = false;

  /**
   * @generated from field: bool file_deleted_successfully = 3;
   */
  fileDeletedSuccessfully = false;

  constructor(data?: PartialMessage<DeleteFileResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DeleteFileResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rejected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "file_non_existent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "file_deleted_successfully", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileResult {
    return new DeleteFileResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileResult {
    return new DeleteFileResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileResult {
    return new DeleteFileResult().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileResult | PlainMessage<DeleteFileResult> | undefined, b: DeleteFileResult | PlainMessage<DeleteFileResult> | undefined): boolean {
    return proto3.util.equals(DeleteFileResult, a, b);
  }
}

/**
 * aiserver.v1.Range
 *
 * @generated from message aiserver.v1.Range
 */
export class Range extends Message<Range> {
  /**
   * @generated from field: int32 start_line = 1;
   */
  startLine = 0;

  /**
   * @generated from field: int32 start_character = 2;
   */
  startCharacter = 0;

  /**
   * @generated from field: int32 end_line = 3;
   */
  endLine = 0;

  /**
   * @generated from field: int32 end_character = 4;
   */
  endCharacter = 0;

  constructor(data?: PartialMessage<Range>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.Range";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "start_character", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end_character", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Range {
    return new Range().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Range {
    return new Range().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Range {
    return new Range().fromJsonString(jsonString, options);
  }

  static equals(a: Range | PlainMessage<Range> | undefined, b: Range | PlainMessage<Range> | undefined): boolean {
    return proto3.util.equals(Range, a, b);
  }
}

/**
 * aiserver.v1.MatchRange
 *
 * @generated from message aiserver.v1.MatchRange
 */
export class MatchRange extends Message<MatchRange> {
  /**
   * @generated from field: int32 start = 1;
   */
  start = 0;

  /**
   * @generated from field: int32 end = 2;
   */
  end = 0;

  constructor(data?: PartialMessage<MatchRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MatchRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchRange {
    return new MatchRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchRange {
    return new MatchRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchRange {
    return new MatchRange().fromJsonString(jsonString, options);
  }

  static equals(a: MatchRange | PlainMessage<MatchRange> | undefined, b: MatchRange | PlainMessage<MatchRange> | undefined): boolean {
    return proto3.util.equals(MatchRange, a, b);
  }
}

/**
 * aiserver.v1.GotodefParams
 *
 * @generated from message aiserver.v1.GotodefParams
 */
export class GotodefParams extends Message<GotodefParams> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string symbol = 2;
   */
  symbol = "";

  /**
   * @generated from field: int32 start_line = 3;
   */
  startLine = 0;

  /**
   * @generated from field: int32 end_line = 4;
   */
  endLine = 0;

  constructor(data?: PartialMessage<GotodefParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GotodefParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GotodefParams {
    return new GotodefParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GotodefParams {
    return new GotodefParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GotodefParams {
    return new GotodefParams().fromJsonString(jsonString, options);
  }

  static equals(a: GotodefParams | PlainMessage<GotodefParams> | undefined, b: GotodefParams | PlainMessage<GotodefParams> | undefined): boolean {
    return proto3.util.equals(GotodefParams, a, b);
  }
}

/**
 * aiserver.v1.GotodefDefinition
 *
 * @generated from message aiserver.v1.GotodefDefinition
 */
export class GotodefDefinition extends Message<GotodefDefinition> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: optional string fully_qualified_name = 2;
   */
  fullyQualifiedName?: string;

  /**
   * @generated from field: optional string symbol_kind = 3;
   */
  symbolKind?: string;

  /**
   * @generated from field: int32 start_line = 4;
   */
  startLine = 0;

  /**
   * @generated from field: int32 end_line = 5;
   */
  endLine = 0;

  /**
   * @generated from field: repeated string code_context_lines = 6;
   */
  codeContextLines: string[] = [];

  constructor(data?: PartialMessage<GotodefDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GotodefDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fully_qualified_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "symbol_kind", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "end_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "code_context_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GotodefDefinition {
    return new GotodefDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GotodefDefinition {
    return new GotodefDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GotodefDefinition {
    return new GotodefDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: GotodefDefinition | PlainMessage<GotodefDefinition> | undefined, b: GotodefDefinition | PlainMessage<GotodefDefinition> | undefined): boolean {
    return proto3.util.equals(GotodefDefinition, a, b);
  }
}

/**
 * aiserver.v1.GotodefResult
 *
 * @generated from message aiserver.v1.GotodefResult
 */
export class GotodefResult extends Message<GotodefResult> {
  /**
   * @generated from field: repeated aiserver.v1.GotodefDefinition definitions = 1;
   */
  definitions: GotodefDefinition[] = [];

  constructor(data?: PartialMessage<GotodefResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GotodefResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "definitions", kind: "message", T: GotodefDefinition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GotodefResult {
    return new GotodefResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GotodefResult {
    return new GotodefResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GotodefResult {
    return new GotodefResult().fromJsonString(jsonString, options);
  }

  static equals(a: GotodefResult | PlainMessage<GotodefResult> | undefined, b: GotodefResult | PlainMessage<GotodefResult> | undefined): boolean {
    return proto3.util.equals(GotodefResult, a, b);
  }
}

/**
 * aiserver.v1.ShellCommandParsingResult
 *
 * @generated from message aiserver.v1.ShellCommandParsingResult
 */
export class ShellCommandParsingResult extends Message<ShellCommandParsingResult> {
  /**
   * @generated from field: bool parsing_failed = 1;
   */
  parsingFailed = false;

  /**
   * @generated from field: repeated aiserver.v1.ShellCommandParsingResult.ExecutableCommand executable_commands = 2;
   */
  executableCommands: ShellCommandParsingResult_ExecutableCommand[] = [];

  /**
   * @generated from field: bool has_redirects = 3;
   */
  hasRedirects = false;

  /**
   * @generated from field: bool has_command_substitution = 4;
   */
  hasCommandSubstitution = false;

  constructor(data?: PartialMessage<ShellCommandParsingResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ShellCommandParsingResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parsing_failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "executable_commands", kind: "message", T: ShellCommandParsingResult_ExecutableCommand, repeated: true },
    { no: 3, name: "has_redirects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_command_substitution", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShellCommandParsingResult {
    return new ShellCommandParsingResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShellCommandParsingResult {
    return new ShellCommandParsingResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShellCommandParsingResult {
    return new ShellCommandParsingResult().fromJsonString(jsonString, options);
  }

  static equals(a: ShellCommandParsingResult | PlainMessage<ShellCommandParsingResult> | undefined, b: ShellCommandParsingResult | PlainMessage<ShellCommandParsingResult> | undefined): boolean {
    return proto3.util.equals(ShellCommandParsingResult, a, b);
  }
}

/**
 * aiserver.v1.ShellCommandParsingResult.ExecutableCommandArg
 *
 * @generated from message aiserver.v1.ShellCommandParsingResult.ExecutableCommandArg
 */
export class ShellCommandParsingResult_ExecutableCommandArg extends Message<ShellCommandParsingResult_ExecutableCommandArg> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<ShellCommandParsingResult_ExecutableCommandArg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ShellCommandParsingResult.ExecutableCommandArg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShellCommandParsingResult_ExecutableCommandArg {
    return new ShellCommandParsingResult_ExecutableCommandArg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShellCommandParsingResult_ExecutableCommandArg {
    return new ShellCommandParsingResult_ExecutableCommandArg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShellCommandParsingResult_ExecutableCommandArg {
    return new ShellCommandParsingResult_ExecutableCommandArg().fromJsonString(jsonString, options);
  }

  static equals(a: ShellCommandParsingResult_ExecutableCommandArg | PlainMessage<ShellCommandParsingResult_ExecutableCommandArg> | undefined, b: ShellCommandParsingResult_ExecutableCommandArg | PlainMessage<ShellCommandParsingResult_ExecutableCommandArg> | undefined): boolean {
    return proto3.util.equals(ShellCommandParsingResult_ExecutableCommandArg, a, b);
  }
}

/**
 * aiserver.v1.ShellCommandParsingResult.ExecutableCommand
 *
 * @generated from message aiserver.v1.ShellCommandParsingResult.ExecutableCommand
 */
export class ShellCommandParsingResult_ExecutableCommand extends Message<ShellCommandParsingResult_ExecutableCommand> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated aiserver.v1.ShellCommandParsingResult.ExecutableCommandArg args = 2;
   */
  args: ShellCommandParsingResult_ExecutableCommandArg[] = [];

  /**
   * @generated from field: string full_text = 3;
   */
  fullText = "";

  constructor(data?: PartialMessage<ShellCommandParsingResult_ExecutableCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ShellCommandParsingResult.ExecutableCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "args", kind: "message", T: ShellCommandParsingResult_ExecutableCommandArg, repeated: true },
    { no: 3, name: "full_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShellCommandParsingResult_ExecutableCommand {
    return new ShellCommandParsingResult_ExecutableCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShellCommandParsingResult_ExecutableCommand {
    return new ShellCommandParsingResult_ExecutableCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShellCommandParsingResult_ExecutableCommand {
    return new ShellCommandParsingResult_ExecutableCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ShellCommandParsingResult_ExecutableCommand | PlainMessage<ShellCommandParsingResult_ExecutableCommand> | undefined, b: ShellCommandParsingResult_ExecutableCommand | PlainMessage<ShellCommandParsingResult_ExecutableCommand> | undefined): boolean {
    return proto3.util.equals(ShellCommandParsingResult_ExecutableCommand, a, b);
  }
}

/**
 * aiserver.v1.RunTerminalCommandV2Params
 *
 * @generated from message aiserver.v1.RunTerminalCommandV2Params
 */
export class RunTerminalCommandV2Params extends Message<RunTerminalCommandV2Params> {
  /**
   * @generated from field: string command = 1;
   */
  command = "";

  /**
   * @generated from field: optional string cwd = 2;
   */
  cwd?: string;

  /**
   * @generated from field: optional bool new_session = 3;
   */
  newSession?: boolean;

  /**
   * @generated from field: optional aiserver.v1.RunTerminalCommandV2Params.ExecutionOptions options = 4;
   */
  options?: RunTerminalCommandV2Params_ExecutionOptions;

  /**
   * @generated from field: bool is_background = 5;
   */
  isBackground = false;

  /**
   * @generated from field: bool require_user_approval = 6;
   */
  requireUserApproval = false;

  /**
   * @generated from field: optional aiserver.v1.ShellCommandParsingResult parsing_result = 7;
   */
  parsingResult?: ShellCommandParsingResult;

  constructor(data?: PartialMessage<RunTerminalCommandV2Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RunTerminalCommandV2Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cwd", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "new_session", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "options", kind: "message", T: RunTerminalCommandV2Params_ExecutionOptions, opt: true },
    { no: 5, name: "is_background", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "require_user_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "parsing_result", kind: "message", T: ShellCommandParsingResult, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunTerminalCommandV2Params {
    return new RunTerminalCommandV2Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunTerminalCommandV2Params {
    return new RunTerminalCommandV2Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunTerminalCommandV2Params {
    return new RunTerminalCommandV2Params().fromJsonString(jsonString, options);
  }

  static equals(a: RunTerminalCommandV2Params | PlainMessage<RunTerminalCommandV2Params> | undefined, b: RunTerminalCommandV2Params | PlainMessage<RunTerminalCommandV2Params> | undefined): boolean {
    return proto3.util.equals(RunTerminalCommandV2Params, a, b);
  }
}

/**
 * aiserver.v1.RunTerminalCommandV2Params.ExecutionOptions
 *
 * @generated from message aiserver.v1.RunTerminalCommandV2Params.ExecutionOptions
 */
export class RunTerminalCommandV2Params_ExecutionOptions extends Message<RunTerminalCommandV2Params_ExecutionOptions> {
  /**
   * @generated from field: optional int32 timeout = 1;
   */
  timeout?: number;

  /**
   * @generated from field: optional bool skip_ai_check = 2;
   */
  skipAiCheck?: boolean;

  /**
   * @generated from field: optional int32 command_run_timeout_ms = 3;
   */
  commandRunTimeoutMs?: number;

  /**
   * @generated from field: optional int32 command_change_check_interval_ms = 4;
   */
  commandChangeCheckIntervalMs?: number;

  /**
   * @generated from field: optional int32 ai_finish_check_max_attempts = 5;
   */
  aiFinishCheckMaxAttempts?: number;

  /**
   * @generated from field: optional int32 ai_finish_check_interval_ms = 6;
   */
  aiFinishCheckIntervalMs?: number;

  /**
   * @generated from field: optional int32 delayer_interval_ms = 7;
   */
  delayerIntervalMs?: number;

  constructor(data?: PartialMessage<RunTerminalCommandV2Params_ExecutionOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RunTerminalCommandV2Params.ExecutionOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timeout", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "skip_ai_check", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "command_run_timeout_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "command_change_check_interval_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "ai_finish_check_max_attempts", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "ai_finish_check_interval_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "delayer_interval_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunTerminalCommandV2Params_ExecutionOptions {
    return new RunTerminalCommandV2Params_ExecutionOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunTerminalCommandV2Params_ExecutionOptions {
    return new RunTerminalCommandV2Params_ExecutionOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunTerminalCommandV2Params_ExecutionOptions {
    return new RunTerminalCommandV2Params_ExecutionOptions().fromJsonString(jsonString, options);
  }

  static equals(a: RunTerminalCommandV2Params_ExecutionOptions | PlainMessage<RunTerminalCommandV2Params_ExecutionOptions> | undefined, b: RunTerminalCommandV2Params_ExecutionOptions | PlainMessage<RunTerminalCommandV2Params_ExecutionOptions> | undefined): boolean {
    return proto3.util.equals(RunTerminalCommandV2Params_ExecutionOptions, a, b);
  }
}

/**
 * aiserver.v1.RunTerminalCommandV2Result
 *
 * @generated from message aiserver.v1.RunTerminalCommandV2Result
 */
export class RunTerminalCommandV2Result extends Message<RunTerminalCommandV2Result> {
  /**
   * @generated from field: string output = 1;
   */
  output = "";

  /**
   * @generated from field: int32 exit_code = 2;
   */
  exitCode = 0;

  /**
   * @generated from field: optional bool rejected = 3;
   */
  rejected?: boolean;

  /**
   * @generated from field: bool popped_out_into_background = 4;
   */
  poppedOutIntoBackground = false;

  /**
   * @generated from field: bool is_running_in_background = 5;
   */
  isRunningInBackground = false;

  /**
   * @generated from field: bool not_interrupted = 6;
   */
  notInterrupted = false;

  /**
   * @generated from field: string resulting_working_directory = 7;
   */
  resultingWorkingDirectory = "";

  /**
   * @generated from field: bool did_user_change = 8;
   */
  didUserChange = false;

  /**
   * @generated from field: aiserver.v1.RunTerminalCommandEndedReason ended_reason = 9;
   */
  endedReason = RunTerminalCommandEndedReason.UNSPECIFIED;

  /**
   * @generated from field: optional int32 exit_code_v2 = 10;
   */
  exitCodeV2?: number;

  /**
   * @generated from field: optional string updated_command = 11;
   */
  updatedCommand?: string;

  /**
   * @generated from field: string output_raw = 12;
   */
  outputRaw = "";

  /**
   * @generated from field: optional aiserver.v1.HumanReview human_review_v2 = 13;
   */
  humanReviewV2?: HumanReview;

  constructor(data?: PartialMessage<RunTerminalCommandV2Result>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RunTerminalCommandV2Result";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "rejected", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "popped_out_into_background", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "is_running_in_background", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "not_interrupted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "resulting_working_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "did_user_change", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "ended_reason", kind: "enum", T: proto3.getEnumType(RunTerminalCommandEndedReason) },
    { no: 10, name: "exit_code_v2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 11, name: "updated_command", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "output_raw", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "human_review_v2", kind: "message", T: HumanReview, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunTerminalCommandV2Result {
    return new RunTerminalCommandV2Result().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunTerminalCommandV2Result {
    return new RunTerminalCommandV2Result().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunTerminalCommandV2Result {
    return new RunTerminalCommandV2Result().fromJsonString(jsonString, options);
  }

  static equals(a: RunTerminalCommandV2Result | PlainMessage<RunTerminalCommandV2Result> | undefined, b: RunTerminalCommandV2Result | PlainMessage<RunTerminalCommandV2Result> | undefined): boolean {
    return proto3.util.equals(RunTerminalCommandV2Result, a, b);
  }
}

/**
 * aiserver.v1.WebSearchParams
 *
 * @generated from message aiserver.v1.WebSearchParams
 */
export class WebSearchParams extends Message<WebSearchParams> {
  /**
   * @generated from field: string search_term = 1;
   */
  searchTerm = "";

  constructor(data?: PartialMessage<WebSearchParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.WebSearchParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "search_term", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebSearchParams {
    return new WebSearchParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebSearchParams {
    return new WebSearchParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebSearchParams {
    return new WebSearchParams().fromJsonString(jsonString, options);
  }

  static equals(a: WebSearchParams | PlainMessage<WebSearchParams> | undefined, b: WebSearchParams | PlainMessage<WebSearchParams> | undefined): boolean {
    return proto3.util.equals(WebSearchParams, a, b);
  }
}

/**
 * aiserver.v1.WebSearchResult
 *
 * @generated from message aiserver.v1.WebSearchResult
 */
export class WebSearchResult extends Message<WebSearchResult> {
  /**
   * @generated from field: repeated aiserver.v1.WebSearchResult.WebReference references = 1;
   */
  references: WebSearchResult_WebReference[] = [];

  /**
   * @generated from field: optional bool is_final = 2;
   */
  isFinal?: boolean;

  /**
   * @generated from field: optional bool rejected = 3;
   */
  rejected?: boolean;

  constructor(data?: PartialMessage<WebSearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.WebSearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "references", kind: "message", T: WebSearchResult_WebReference, repeated: true },
    { no: 2, name: "is_final", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "rejected", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebSearchResult {
    return new WebSearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebSearchResult {
    return new WebSearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebSearchResult {
    return new WebSearchResult().fromJsonString(jsonString, options);
  }

  static equals(a: WebSearchResult | PlainMessage<WebSearchResult> | undefined, b: WebSearchResult | PlainMessage<WebSearchResult> | undefined): boolean {
    return proto3.util.equals(WebSearchResult, a, b);
  }
}

/**
 * aiserver.v1.WebSearchResult.WebReference
 *
 * @generated from message aiserver.v1.WebSearchResult.WebReference
 */
export class WebSearchResult_WebReference extends Message<WebSearchResult_WebReference> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: string chunk = 3;
   */
  chunk = "";

  constructor(data?: PartialMessage<WebSearchResult_WebReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.WebSearchResult.WebReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chunk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebSearchResult_WebReference {
    return new WebSearchResult_WebReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebSearchResult_WebReference {
    return new WebSearchResult_WebReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebSearchResult_WebReference {
    return new WebSearchResult_WebReference().fromJsonString(jsonString, options);
  }

  static equals(a: WebSearchResult_WebReference | PlainMessage<WebSearchResult_WebReference> | undefined, b: WebSearchResult_WebReference | PlainMessage<WebSearchResult_WebReference> | undefined): boolean {
    return proto3.util.equals(WebSearchResult_WebReference, a, b);
  }
}

/**
 * aiserver.v1.MCPParams
 *
 * @generated from message aiserver.v1.MCPParams
 */
export class MCPParams extends Message<MCPParams> {
  /**
   * @generated from field: repeated aiserver.v1.MCPParams.Tool tools = 1;
   */
  tools: MCPParams_Tool[] = [];

  constructor(data?: PartialMessage<MCPParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MCPParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tools", kind: "message", T: MCPParams_Tool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MCPParams {
    return new MCPParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MCPParams {
    return new MCPParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MCPParams {
    return new MCPParams().fromJsonString(jsonString, options);
  }

  static equals(a: MCPParams | PlainMessage<MCPParams> | undefined, b: MCPParams | PlainMessage<MCPParams> | undefined): boolean {
    return proto3.util.equals(MCPParams, a, b);
  }
}

/**
 * aiserver.v1.MCPParams.Tool
 *
 * @generated from message aiserver.v1.MCPParams.Tool
 */
export class MCPParams_Tool extends Message<MCPParams_Tool> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string parameters = 3;
   */
  parameters = "";

  /**
   * @generated from field: string server_name = 4;
   */
  serverName = "";

  constructor(data?: PartialMessage<MCPParams_Tool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MCPParams.Tool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parameters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "server_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MCPParams_Tool {
    return new MCPParams_Tool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MCPParams_Tool {
    return new MCPParams_Tool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MCPParams_Tool {
    return new MCPParams_Tool().fromJsonString(jsonString, options);
  }

  static equals(a: MCPParams_Tool | PlainMessage<MCPParams_Tool> | undefined, b: MCPParams_Tool | PlainMessage<MCPParams_Tool> | undefined): boolean {
    return proto3.util.equals(MCPParams_Tool, a, b);
  }
}

/**
 * aiserver.v1.MCPResult
 *
 * @generated from message aiserver.v1.MCPResult
 */
export class MCPResult extends Message<MCPResult> {
  /**
   * @generated from field: string selected_tool = 1;
   */
  selectedTool = "";

  /**
   * @generated from field: string result = 2;
   */
  result = "";

  constructor(data?: PartialMessage<MCPResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.MCPResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "selected_tool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MCPResult {
    return new MCPResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MCPResult {
    return new MCPResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MCPResult {
    return new MCPResult().fromJsonString(jsonString, options);
  }

  static equals(a: MCPResult | PlainMessage<MCPResult> | undefined, b: MCPResult | PlainMessage<MCPResult> | undefined): boolean {
    return proto3.util.equals(MCPResult, a, b);
  }
}

/**
 * aiserver.v1.SearchSymbolsParams
 *
 * @generated from message aiserver.v1.SearchSymbolsParams
 */
export class SearchSymbolsParams extends Message<SearchSymbolsParams> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<SearchSymbolsParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SearchSymbolsParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchSymbolsParams {
    return new SearchSymbolsParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchSymbolsParams {
    return new SearchSymbolsParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchSymbolsParams {
    return new SearchSymbolsParams().fromJsonString(jsonString, options);
  }

  static equals(a: SearchSymbolsParams | PlainMessage<SearchSymbolsParams> | undefined, b: SearchSymbolsParams | PlainMessage<SearchSymbolsParams> | undefined): boolean {
    return proto3.util.equals(SearchSymbolsParams, a, b);
  }
}

/**
 * aiserver.v1.SearchSymbolsResult
 *
 * @generated from message aiserver.v1.SearchSymbolsResult
 */
export class SearchSymbolsResult extends Message<SearchSymbolsResult> {
  /**
   * @generated from field: repeated aiserver.v1.SearchSymbolsResult.SymbolMatch matches = 1;
   */
  matches: SearchSymbolsResult_SymbolMatch[] = [];

  /**
   * @generated from field: optional bool rejected = 2;
   */
  rejected?: boolean;

  constructor(data?: PartialMessage<SearchSymbolsResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SearchSymbolsResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "matches", kind: "message", T: SearchSymbolsResult_SymbolMatch, repeated: true },
    { no: 2, name: "rejected", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchSymbolsResult {
    return new SearchSymbolsResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchSymbolsResult {
    return new SearchSymbolsResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchSymbolsResult {
    return new SearchSymbolsResult().fromJsonString(jsonString, options);
  }

  static equals(a: SearchSymbolsResult | PlainMessage<SearchSymbolsResult> | undefined, b: SearchSymbolsResult | PlainMessage<SearchSymbolsResult> | undefined): boolean {
    return proto3.util.equals(SearchSymbolsResult, a, b);
  }
}

/**
 * aiserver.v1.SearchSymbolsResult.SymbolMatch
 *
 * @generated from message aiserver.v1.SearchSymbolsResult.SymbolMatch
 */
export class SearchSymbolsResult_SymbolMatch extends Message<SearchSymbolsResult_SymbolMatch> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string uri = 2;
   */
  uri = "";

  /**
   * @generated from field: aiserver.v1.Range range = 3;
   */
  range?: Range;

  /**
   * @generated from field: string secondary_text = 4;
   */
  secondaryText = "";

  /**
   * @generated from field: repeated aiserver.v1.MatchRange label_matches = 5;
   */
  labelMatches: MatchRange[] = [];

  /**
   * @generated from field: repeated aiserver.v1.MatchRange description_matches = 6;
   */
  descriptionMatches: MatchRange[] = [];

  /**
   * @generated from field: double score = 7;
   */
  score = 0;

  constructor(data?: PartialMessage<SearchSymbolsResult_SymbolMatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SearchSymbolsResult.SymbolMatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "range", kind: "message", T: Range },
    { no: 4, name: "secondary_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "label_matches", kind: "message", T: MatchRange, repeated: true },
    { no: 6, name: "description_matches", kind: "message", T: MatchRange, repeated: true },
    { no: 7, name: "score", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchSymbolsResult_SymbolMatch {
    return new SearchSymbolsResult_SymbolMatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchSymbolsResult_SymbolMatch {
    return new SearchSymbolsResult_SymbolMatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchSymbolsResult_SymbolMatch {
    return new SearchSymbolsResult_SymbolMatch().fromJsonString(jsonString, options);
  }

  static equals(a: SearchSymbolsResult_SymbolMatch | PlainMessage<SearchSymbolsResult_SymbolMatch> | undefined, b: SearchSymbolsResult_SymbolMatch | PlainMessage<SearchSymbolsResult_SymbolMatch> | undefined): boolean {
    return proto3.util.equals(SearchSymbolsResult_SymbolMatch, a, b);
  }
}

/**
 * aiserver.v1.BackgroundComposerFollowupParams
 *
 * @generated from message aiserver.v1.BackgroundComposerFollowupParams
 */
export class BackgroundComposerFollowupParams extends Message<BackgroundComposerFollowupParams> {
  /**
   * @generated from field: string proposed_followup = 1;
   */
  proposedFollowup = "";

  /**
   * @generated from field: string bc_id = 2;
   */
  bcId = "";

  constructor(data?: PartialMessage<BackgroundComposerFollowupParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BackgroundComposerFollowupParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposed_followup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bc_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundComposerFollowupParams {
    return new BackgroundComposerFollowupParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundComposerFollowupParams {
    return new BackgroundComposerFollowupParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundComposerFollowupParams {
    return new BackgroundComposerFollowupParams().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundComposerFollowupParams | PlainMessage<BackgroundComposerFollowupParams> | undefined, b: BackgroundComposerFollowupParams | PlainMessage<BackgroundComposerFollowupParams> | undefined): boolean {
    return proto3.util.equals(BackgroundComposerFollowupParams, a, b);
  }
}

/**
 * aiserver.v1.BackgroundComposerFollowupResult
 *
 * @generated from message aiserver.v1.BackgroundComposerFollowupResult
 */
export class BackgroundComposerFollowupResult extends Message<BackgroundComposerFollowupResult> {
  /**
   * @generated from field: string proposed_followup = 1;
   */
  proposedFollowup = "";

  /**
   * @generated from field: bool is_sent = 2;
   */
  isSent = false;

  constructor(data?: PartialMessage<BackgroundComposerFollowupResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.BackgroundComposerFollowupResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposed_followup", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_sent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackgroundComposerFollowupResult {
    return new BackgroundComposerFollowupResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackgroundComposerFollowupResult {
    return new BackgroundComposerFollowupResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackgroundComposerFollowupResult {
    return new BackgroundComposerFollowupResult().fromJsonString(jsonString, options);
  }

  static equals(a: BackgroundComposerFollowupResult | PlainMessage<BackgroundComposerFollowupResult> | undefined, b: BackgroundComposerFollowupResult | PlainMessage<BackgroundComposerFollowupResult> | undefined): boolean {
    return proto3.util.equals(BackgroundComposerFollowupResult, a, b);
  }
}

/**
 * aiserver.v1.KnowledgeBaseParams
 *
 * @generated from message aiserver.v1.KnowledgeBaseParams
 */
export class KnowledgeBaseParams extends Message<KnowledgeBaseParams> {
  /**
   * @generated from field: string knowledge_to_store = 1;
   */
  knowledgeToStore = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: optional string existing_knowledge_id = 3;
   */
  existingKnowledgeId?: string;

  /**
   * @generated from field: optional string action = 4;
   */
  action?: string;

  constructor(data?: PartialMessage<KnowledgeBaseParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.KnowledgeBaseParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "knowledge_to_store", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "existing_knowledge_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KnowledgeBaseParams {
    return new KnowledgeBaseParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KnowledgeBaseParams {
    return new KnowledgeBaseParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KnowledgeBaseParams {
    return new KnowledgeBaseParams().fromJsonString(jsonString, options);
  }

  static equals(a: KnowledgeBaseParams | PlainMessage<KnowledgeBaseParams> | undefined, b: KnowledgeBaseParams | PlainMessage<KnowledgeBaseParams> | undefined): boolean {
    return proto3.util.equals(KnowledgeBaseParams, a, b);
  }
}

/**
 * aiserver.v1.KnowledgeBaseResult
 *
 * @generated from message aiserver.v1.KnowledgeBaseResult
 */
export class KnowledgeBaseResult extends Message<KnowledgeBaseResult> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string confirmation_message = 2;
   */
  confirmationMessage = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  constructor(data?: PartialMessage<KnowledgeBaseResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.KnowledgeBaseResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "confirmation_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KnowledgeBaseResult {
    return new KnowledgeBaseResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KnowledgeBaseResult {
    return new KnowledgeBaseResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KnowledgeBaseResult {
    return new KnowledgeBaseResult().fromJsonString(jsonString, options);
  }

  static equals(a: KnowledgeBaseResult | PlainMessage<KnowledgeBaseResult> | undefined, b: KnowledgeBaseResult | PlainMessage<KnowledgeBaseResult> | undefined): boolean {
    return proto3.util.equals(KnowledgeBaseResult, a, b);
  }
}

/**
 * aiserver.v1.FetchPullRequestParams
 *
 * @generated from message aiserver.v1.FetchPullRequestParams
 */
export class FetchPullRequestParams extends Message<FetchPullRequestParams> {
  /**
   * @generated from field: string pull_number_or_commit_hash = 1;
   */
  pullNumberOrCommitHash = "";

  /**
   * @generated from field: optional string repo = 2;
   */
  repo?: string;

  /**
   * @generated from field: optional bool is_github = 3;
   */
  isGithub?: boolean;

  constructor(data?: PartialMessage<FetchPullRequestParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FetchPullRequestParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pull_number_or_commit_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "is_github", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchPullRequestParams {
    return new FetchPullRequestParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchPullRequestParams {
    return new FetchPullRequestParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchPullRequestParams {
    return new FetchPullRequestParams().fromJsonString(jsonString, options);
  }

  static equals(a: FetchPullRequestParams | PlainMessage<FetchPullRequestParams> | undefined, b: FetchPullRequestParams | PlainMessage<FetchPullRequestParams> | undefined): boolean {
    return proto3.util.equals(FetchPullRequestParams, a, b);
  }
}

/**
 * aiserver.v1.FetchPullRequestResult
 *
 * @generated from message aiserver.v1.FetchPullRequestResult
 */
export class FetchPullRequestResult extends Message<FetchPullRequestResult> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: uint32 pr_number = 2;
   */
  prNumber = 0;

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: string body = 4;
   */
  body = "";

  /**
   * @generated from field: string author = 5;
   */
  author = "";

  /**
   * @generated from field: string date = 6;
   */
  date = "";

  /**
   * @generated from field: string diff = 7;
   */
  diff = "";

  /**
   * @generated from field: optional string sha = 8;
   */
  sha?: string;

  /**
   * @generated from field: optional string external_link = 9;
   */
  externalLink?: string;

  /**
   * @generated from field: optional string url = 10;
   */
  url?: string;

  /**
   * @generated from field: repeated aiserver.v1.IssueComment comments = 11;
   */
  comments: IssueComment[] = [];

  /**
   * @generated from field: repeated string labels = 12;
   */
  labels: string[] = [];

  /**
   * @generated from field: repeated string assignees = 13;
   */
  assignees: string[] = [];

  /**
   * @generated from field: optional bool is_issue = 14;
   */
  isIssue?: boolean;

  /**
   * @generated from field: optional string state = 15;
   */
  state?: string;

  /**
   * @generated from field: optional bool prompt_connect_github = 16;
   */
  promptConnectGithub?: boolean;

  constructor(data?: PartialMessage<FetchPullRequestResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FetchPullRequestResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pr_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "diff", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "external_link", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "comments", kind: "message", T: IssueComment, repeated: true },
    { no: 12, name: "labels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "assignees", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "is_issue", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 15, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "prompt_connect_github", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchPullRequestResult {
    return new FetchPullRequestResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchPullRequestResult {
    return new FetchPullRequestResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchPullRequestResult {
    return new FetchPullRequestResult().fromJsonString(jsonString, options);
  }

  static equals(a: FetchPullRequestResult | PlainMessage<FetchPullRequestResult> | undefined, b: FetchPullRequestResult | PlainMessage<FetchPullRequestResult> | undefined): boolean {
    return proto3.util.equals(FetchPullRequestResult, a, b);
  }
}

/**
 * aiserver.v1.IssueComment
 *
 * @generated from message aiserver.v1.IssueComment
 */
export class IssueComment extends Message<IssueComment> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * @generated from field: optional string author = 3;
   */
  author?: string;

  /**
   * @generated from field: string created_at = 4;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 5;
   */
  updatedAt = "";

  /**
   * @generated from field: optional string author_association = 6;
   */
  authorAssociation?: string;

  constructor(data?: PartialMessage<IssueComment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IssueComment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "author_association", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueComment {
    return new IssueComment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueComment {
    return new IssueComment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueComment {
    return new IssueComment().fromJsonString(jsonString, options);
  }

  static equals(a: IssueComment | PlainMessage<IssueComment> | undefined, b: IssueComment | PlainMessage<IssueComment> | undefined): boolean {
    return proto3.util.equals(IssueComment, a, b);
  }
}

/**
 * aiserver.v1.PullRequestReference
 *
 * @generated from message aiserver.v1.PullRequestReference
 */
export class PullRequestReference extends Message<PullRequestReference> {
  /**
   * @generated from field: string sha = 1;
   */
  sha = "";

  /**
   * @generated from field: float score = 2;
   */
  score = 0;

  /**
   * @generated from field: optional string title = 3;
   */
  title?: string;

  /**
   * @generated from field: optional string summary = 4;
   */
  summary?: string;

  /**
   * @generated from field: optional uint32 pr_number = 5;
   */
  prNumber?: number;

  /**
   * @generated from field: optional string author = 6;
   */
  author?: string;

  /**
   * @generated from field: optional string date = 7;
   */
  date?: string;

  /**
   * @generated from field: repeated string changed_files = 8;
   */
  changedFiles: string[] = [];

  constructor(data?: PartialMessage<PullRequestReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.PullRequestReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "pr_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "changed_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullRequestReference {
    return new PullRequestReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullRequestReference {
    return new PullRequestReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullRequestReference {
    return new PullRequestReference().fromJsonString(jsonString, options);
  }

  static equals(a: PullRequestReference | PlainMessage<PullRequestReference> | undefined, b: PullRequestReference | PlainMessage<PullRequestReference> | undefined): boolean {
    return proto3.util.equals(PullRequestReference, a, b);
  }
}

/**
 * aiserver.v1.DeepSearchParams
 *
 * @generated from message aiserver.v1.DeepSearchParams
 */
export class DeepSearchParams extends Message<DeepSearchParams> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<DeepSearchParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DeepSearchParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepSearchParams {
    return new DeepSearchParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepSearchParams {
    return new DeepSearchParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepSearchParams {
    return new DeepSearchParams().fromJsonString(jsonString, options);
  }

  static equals(a: DeepSearchParams | PlainMessage<DeepSearchParams> | undefined, b: DeepSearchParams | PlainMessage<DeepSearchParams> | undefined): boolean {
    return proto3.util.equals(DeepSearchParams, a, b);
  }
}

/**
 * aiserver.v1.DeepSearchResult
 *
 * @generated from message aiserver.v1.DeepSearchResult
 */
export class DeepSearchResult extends Message<DeepSearchResult> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string result = 2;
   */
  result = "";

  constructor(data?: PartialMessage<DeepSearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DeepSearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepSearchResult {
    return new DeepSearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepSearchResult {
    return new DeepSearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepSearchResult {
    return new DeepSearchResult().fromJsonString(jsonString, options);
  }

  static equals(a: DeepSearchResult | PlainMessage<DeepSearchResult> | undefined, b: DeepSearchResult | PlainMessage<DeepSearchResult> | undefined): boolean {
    return proto3.util.equals(DeepSearchResult, a, b);
  }
}

/**
 * aiserver.v1.CreateDiagramParams
 *
 * @generated from message aiserver.v1.CreateDiagramParams
 */
export class CreateDiagramParams extends Message<CreateDiagramParams> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<CreateDiagramParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CreateDiagramParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDiagramParams {
    return new CreateDiagramParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDiagramParams {
    return new CreateDiagramParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDiagramParams {
    return new CreateDiagramParams().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDiagramParams | PlainMessage<CreateDiagramParams> | undefined, b: CreateDiagramParams | PlainMessage<CreateDiagramParams> | undefined): boolean {
    return proto3.util.equals(CreateDiagramParams, a, b);
  }
}

/**
 * aiserver.v1.CreateDiagramResult
 *
 * @generated from message aiserver.v1.CreateDiagramResult
 */
export class CreateDiagramResult extends Message<CreateDiagramResult> {
  /**
   * @generated from field: optional string error = 1;
   */
  error?: string;

  constructor(data?: PartialMessage<CreateDiagramResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CreateDiagramResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDiagramResult {
    return new CreateDiagramResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDiagramResult {
    return new CreateDiagramResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDiagramResult {
    return new CreateDiagramResult().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDiagramResult | PlainMessage<CreateDiagramResult> | undefined, b: CreateDiagramResult | PlainMessage<CreateDiagramResult> | undefined): boolean {
    return proto3.util.equals(CreateDiagramResult, a, b);
  }
}

/**
 * aiserver.v1.FixLintsParams
 *
 * @generated from message aiserver.v1.FixLintsParams
 */
export class FixLintsParams extends Message<FixLintsParams> {
  constructor(data?: PartialMessage<FixLintsParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FixLintsParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixLintsParams {
    return new FixLintsParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixLintsParams {
    return new FixLintsParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixLintsParams {
    return new FixLintsParams().fromJsonString(jsonString, options);
  }

  static equals(a: FixLintsParams | PlainMessage<FixLintsParams> | undefined, b: FixLintsParams | PlainMessage<FixLintsParams> | undefined): boolean {
    return proto3.util.equals(FixLintsParams, a, b);
  }
}

/**
 * aiserver.v1.FixLintsResult
 *
 * @generated from message aiserver.v1.FixLintsResult
 */
export class FixLintsResult extends Message<FixLintsResult> {
  /**
   * @generated from field: repeated aiserver.v1.FixLintsResult.FileResult file_results = 1;
   */
  fileResults: FixLintsResult_FileResult[] = [];

  constructor(data?: PartialMessage<FixLintsResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FixLintsResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_results", kind: "message", T: FixLintsResult_FileResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixLintsResult {
    return new FixLintsResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixLintsResult {
    return new FixLintsResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixLintsResult {
    return new FixLintsResult().fromJsonString(jsonString, options);
  }

  static equals(a: FixLintsResult | PlainMessage<FixLintsResult> | undefined, b: FixLintsResult | PlainMessage<FixLintsResult> | undefined): boolean {
    return proto3.util.equals(FixLintsResult, a, b);
  }
}

/**
 * aiserver.v1.FixLintsResult.FileResult
 *
 * @generated from message aiserver.v1.FixLintsResult.FileResult
 */
export class FixLintsResult_FileResult extends Message<FixLintsResult_FileResult> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: aiserver.v1.EditFileResult.FileDiff diff = 2;
   */
  diff?: EditFileResult_FileDiff;

  /**
   * @generated from field: bool is_applied = 3;
   */
  isApplied = false;

  /**
   * @generated from field: bool apply_failed = 4;
   */
  applyFailed = false;

  /**
   * @generated from field: optional string error = 5;
   */
  error?: string;

  /**
   * @generated from field: repeated aiserver.v1.LinterError linter_errors = 6;
   */
  linterErrors: LinterError[] = [];

  constructor(data?: PartialMessage<FixLintsResult_FileResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FixLintsResult.FileResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "diff", kind: "message", T: EditFileResult_FileDiff },
    { no: 3, name: "is_applied", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "apply_failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "linter_errors", kind: "message", T: LinterError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixLintsResult_FileResult {
    return new FixLintsResult_FileResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixLintsResult_FileResult {
    return new FixLintsResult_FileResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixLintsResult_FileResult {
    return new FixLintsResult_FileResult().fromJsonString(jsonString, options);
  }

  static equals(a: FixLintsResult_FileResult | PlainMessage<FixLintsResult_FileResult> | undefined, b: FixLintsResult_FileResult | PlainMessage<FixLintsResult_FileResult> | undefined): boolean {
    return proto3.util.equals(FixLintsResult_FileResult, a, b);
  }
}

/**
 * aiserver.v1.ReadLintsParams
 *
 * @generated from message aiserver.v1.ReadLintsParams
 */
export class ReadLintsParams extends Message<ReadLintsParams> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: repeated string paths = 2;
   */
  paths: string[] = [];

  constructor(data?: PartialMessage<ReadLintsParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReadLintsParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadLintsParams {
    return new ReadLintsParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadLintsParams {
    return new ReadLintsParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadLintsParams {
    return new ReadLintsParams().fromJsonString(jsonString, options);
  }

  static equals(a: ReadLintsParams | PlainMessage<ReadLintsParams> | undefined, b: ReadLintsParams | PlainMessage<ReadLintsParams> | undefined): boolean {
    return proto3.util.equals(ReadLintsParams, a, b);
  }
}

/**
 * aiserver.v1.ReadLintsResult
 *
 * @generated from message aiserver.v1.ReadLintsResult
 */
export class ReadLintsResult extends Message<ReadLintsResult> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: repeated aiserver.v1.LinterError linter_errors = 2;
   */
  linterErrors: LinterError[] = [];

  /**
   * @generated from field: repeated aiserver.v1.LinterErrors linter_errors_by_file = 3;
   */
  linterErrorsByFile: LinterErrors[] = [];

  constructor(data?: PartialMessage<ReadLintsResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ReadLintsResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "linter_errors", kind: "message", T: LinterError, repeated: true },
    { no: 3, name: "linter_errors_by_file", kind: "message", T: LinterErrors, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadLintsResult {
    return new ReadLintsResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadLintsResult {
    return new ReadLintsResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadLintsResult {
    return new ReadLintsResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReadLintsResult | PlainMessage<ReadLintsResult> | undefined, b: ReadLintsResult | PlainMessage<ReadLintsResult> | undefined): boolean {
    return proto3.util.equals(ReadLintsResult, a, b);
  }
}

/**
 * aiserver.v1.TaskParams
 *
 * @generated from message aiserver.v1.TaskParams
 */
export class TaskParams extends Message<TaskParams> {
  /**
   * @generated from field: string task_description = 1;
   */
  taskDescription = "";

  /**
   * @generated from field: string task_title = 4;
   */
  taskTitle = "";

  /**
   * @generated from field: optional bool async = 2;
   */
  async?: boolean;

  /**
   * @generated from field: repeated string allowed_write_directories = 3;
   */
  allowedWriteDirectories: string[] = [];

  /**
   * @generated from field: optional string model_override = 5;
   */
  modelOverride?: string;

  /**
   * @generated from field: optional bool max_mode_override = 6;
   */
  maxModeOverride?: boolean;

  /**
   * @generated from field: optional bool default_expanded_while_running = 7;
   */
  defaultExpandedWhileRunning?: boolean;

  constructor(data?: PartialMessage<TaskParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TaskParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "task_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "async", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "allowed_write_directories", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "model_override", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "max_mode_override", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "default_expanded_while_running", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskParams {
    return new TaskParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskParams {
    return new TaskParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskParams {
    return new TaskParams().fromJsonString(jsonString, options);
  }

  static equals(a: TaskParams | PlainMessage<TaskParams> | undefined, b: TaskParams | PlainMessage<TaskParams> | undefined): boolean {
    return proto3.util.equals(TaskParams, a, b);
  }
}

/**
 * aiserver.v1.TaskResult
 *
 * @generated from message aiserver.v1.TaskResult
 */
export class TaskResult extends Message<TaskResult> {
  /**
   * @generated from oneof aiserver.v1.TaskResult.result
   */
  result: {
    /**
     * @generated from field: aiserver.v1.TaskResult.CompletedTaskResult completed_task_result = 1;
     */
    value: TaskResult_CompletedTaskResult;
    case: "completedTaskResult";
  } | {
    /**
     * @generated from field: aiserver.v1.TaskResult.AsyncTaskResult async_task_result = 2;
     */
    value: TaskResult_AsyncTaskResult;
    case: "asyncTaskResult";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TaskResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TaskResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "completed_task_result", kind: "message", T: TaskResult_CompletedTaskResult, oneof: "result" },
    { no: 2, name: "async_task_result", kind: "message", T: TaskResult_AsyncTaskResult, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskResult {
    return new TaskResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskResult {
    return new TaskResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskResult {
    return new TaskResult().fromJsonString(jsonString, options);
  }

  static equals(a: TaskResult | PlainMessage<TaskResult> | undefined, b: TaskResult | PlainMessage<TaskResult> | undefined): boolean {
    return proto3.util.equals(TaskResult, a, b);
  }
}

/**
 * aiserver.v1.TaskResult.CompletedTaskResult
 *
 * @generated from message aiserver.v1.TaskResult.CompletedTaskResult
 */
export class TaskResult_CompletedTaskResult extends Message<TaskResult_CompletedTaskResult> {
  /**
   * @generated from field: string summary = 1;
   */
  summary = "";

  /**
   * @generated from field: repeated aiserver.v1.FixLintsResult.FileResult file_results = 2;
   */
  fileResults: FixLintsResult_FileResult[] = [];

  /**
   * @generated from field: bool user_aborted = 3;
   */
  userAborted = false;

  /**
   * @generated from field: bool subagent_errored = 4;
   */
  subagentErrored = false;

  constructor(data?: PartialMessage<TaskResult_CompletedTaskResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TaskResult.CompletedTaskResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_results", kind: "message", T: FixLintsResult_FileResult, repeated: true },
    { no: 3, name: "user_aborted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "subagent_errored", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskResult_CompletedTaskResult {
    return new TaskResult_CompletedTaskResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskResult_CompletedTaskResult {
    return new TaskResult_CompletedTaskResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskResult_CompletedTaskResult {
    return new TaskResult_CompletedTaskResult().fromJsonString(jsonString, options);
  }

  static equals(a: TaskResult_CompletedTaskResult | PlainMessage<TaskResult_CompletedTaskResult> | undefined, b: TaskResult_CompletedTaskResult | PlainMessage<TaskResult_CompletedTaskResult> | undefined): boolean {
    return proto3.util.equals(TaskResult_CompletedTaskResult, a, b);
  }
}

/**
 * aiserver.v1.TaskResult.AsyncTaskResult
 *
 * @generated from message aiserver.v1.TaskResult.AsyncTaskResult
 */
export class TaskResult_AsyncTaskResult extends Message<TaskResult_AsyncTaskResult> {
  /**
   * @generated from field: string task_id = 1;
   */
  taskId = "";

  /**
   * @generated from field: bool user_aborted = 2;
   */
  userAborted = false;

  /**
   * @generated from field: bool subagent_errored = 3;
   */
  subagentErrored = false;

  constructor(data?: PartialMessage<TaskResult_AsyncTaskResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TaskResult.AsyncTaskResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_aborted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "subagent_errored", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskResult_AsyncTaskResult {
    return new TaskResult_AsyncTaskResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskResult_AsyncTaskResult {
    return new TaskResult_AsyncTaskResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskResult_AsyncTaskResult {
    return new TaskResult_AsyncTaskResult().fromJsonString(jsonString, options);
  }

  static equals(a: TaskResult_AsyncTaskResult | PlainMessage<TaskResult_AsyncTaskResult> | undefined, b: TaskResult_AsyncTaskResult | PlainMessage<TaskResult_AsyncTaskResult> | undefined): boolean {
    return proto3.util.equals(TaskResult_AsyncTaskResult, a, b);
  }
}

/**
 * aiserver.v1.AwaitTaskParams
 *
 * @generated from message aiserver.v1.AwaitTaskParams
 */
export class AwaitTaskParams extends Message<AwaitTaskParams> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<AwaitTaskParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AwaitTaskParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwaitTaskParams {
    return new AwaitTaskParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwaitTaskParams {
    return new AwaitTaskParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwaitTaskParams {
    return new AwaitTaskParams().fromJsonString(jsonString, options);
  }

  static equals(a: AwaitTaskParams | PlainMessage<AwaitTaskParams> | undefined, b: AwaitTaskParams | PlainMessage<AwaitTaskParams> | undefined): boolean {
    return proto3.util.equals(AwaitTaskParams, a, b);
  }
}

/**
 * aiserver.v1.AwaitTaskResult
 *
 * @generated from message aiserver.v1.AwaitTaskResult
 */
export class AwaitTaskResult extends Message<AwaitTaskResult> {
  /**
   * @generated from field: repeated aiserver.v1.AwaitTaskResult.TaskResultItem task_results = 1;
   */
  taskResults: AwaitTaskResult_TaskResultItem[] = [];

  /**
   * @generated from field: repeated string missing_task_ids = 2;
   */
  missingTaskIds: string[] = [];

  constructor(data?: PartialMessage<AwaitTaskResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AwaitTaskResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_results", kind: "message", T: AwaitTaskResult_TaskResultItem, repeated: true },
    { no: 2, name: "missing_task_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwaitTaskResult {
    return new AwaitTaskResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwaitTaskResult {
    return new AwaitTaskResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwaitTaskResult {
    return new AwaitTaskResult().fromJsonString(jsonString, options);
  }

  static equals(a: AwaitTaskResult | PlainMessage<AwaitTaskResult> | undefined, b: AwaitTaskResult | PlainMessage<AwaitTaskResult> | undefined): boolean {
    return proto3.util.equals(AwaitTaskResult, a, b);
  }
}

/**
 * aiserver.v1.AwaitTaskResult.TaskResultItem
 *
 * @generated from message aiserver.v1.AwaitTaskResult.TaskResultItem
 */
export class AwaitTaskResult_TaskResultItem extends Message<AwaitTaskResult_TaskResultItem> {
  /**
   * @generated from field: string task_id = 1;
   */
  taskId = "";

  /**
   * @generated from field: aiserver.v1.TaskResult.CompletedTaskResult result = 2;
   */
  result?: TaskResult_CompletedTaskResult;

  constructor(data?: PartialMessage<AwaitTaskResult_TaskResultItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.AwaitTaskResult.TaskResultItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "result", kind: "message", T: TaskResult_CompletedTaskResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwaitTaskResult_TaskResultItem {
    return new AwaitTaskResult_TaskResultItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwaitTaskResult_TaskResultItem {
    return new AwaitTaskResult_TaskResultItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwaitTaskResult_TaskResultItem {
    return new AwaitTaskResult_TaskResultItem().fromJsonString(jsonString, options);
  }

  static equals(a: AwaitTaskResult_TaskResultItem | PlainMessage<AwaitTaskResult_TaskResultItem> | undefined, b: AwaitTaskResult_TaskResultItem | PlainMessage<AwaitTaskResult_TaskResultItem> | undefined): boolean {
    return proto3.util.equals(AwaitTaskResult_TaskResultItem, a, b);
  }
}

/**
 * aiserver.v1.TodoReadParams
 *
 * @generated from message aiserver.v1.TodoReadParams
 */
export class TodoReadParams extends Message<TodoReadParams> {
  /**
   * @generated from field: bool read = 1;
   */
  read = false;

  constructor(data?: PartialMessage<TodoReadParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TodoReadParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TodoReadParams {
    return new TodoReadParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TodoReadParams {
    return new TodoReadParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TodoReadParams {
    return new TodoReadParams().fromJsonString(jsonString, options);
  }

  static equals(a: TodoReadParams | PlainMessage<TodoReadParams> | undefined, b: TodoReadParams | PlainMessage<TodoReadParams> | undefined): boolean {
    return proto3.util.equals(TodoReadParams, a, b);
  }
}

/**
 * aiserver.v1.TodoItem
 *
 * @generated from message aiserver.v1.TodoItem
 */
export class TodoItem extends Message<TodoItem> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: repeated string dependencies = 4;
   */
  dependencies: string[] = [];

  constructor(data?: PartialMessage<TodoItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TodoItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dependencies", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TodoItem {
    return new TodoItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TodoItem {
    return new TodoItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TodoItem {
    return new TodoItem().fromJsonString(jsonString, options);
  }

  static equals(a: TodoItem | PlainMessage<TodoItem> | undefined, b: TodoItem | PlainMessage<TodoItem> | undefined): boolean {
    return proto3.util.equals(TodoItem, a, b);
  }
}

/**
 * aiserver.v1.TodoReadResult
 *
 * @generated from message aiserver.v1.TodoReadResult
 */
export class TodoReadResult extends Message<TodoReadResult> {
  /**
   * @generated from field: repeated aiserver.v1.TodoItem todos = 1;
   */
  todos: TodoItem[] = [];

  constructor(data?: PartialMessage<TodoReadResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TodoReadResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "todos", kind: "message", T: TodoItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TodoReadResult {
    return new TodoReadResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TodoReadResult {
    return new TodoReadResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TodoReadResult {
    return new TodoReadResult().fromJsonString(jsonString, options);
  }

  static equals(a: TodoReadResult | PlainMessage<TodoReadResult> | undefined, b: TodoReadResult | PlainMessage<TodoReadResult> | undefined): boolean {
    return proto3.util.equals(TodoReadResult, a, b);
  }
}

/**
 * aiserver.v1.TodoWriteParams
 *
 * @generated from message aiserver.v1.TodoWriteParams
 */
export class TodoWriteParams extends Message<TodoWriteParams> {
  /**
   * @generated from field: repeated aiserver.v1.TodoItem todos = 1;
   */
  todos: TodoItem[] = [];

  /**
   * @generated from field: bool merge = 2;
   */
  merge = false;

  constructor(data?: PartialMessage<TodoWriteParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TodoWriteParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "todos", kind: "message", T: TodoItem, repeated: true },
    { no: 2, name: "merge", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TodoWriteParams {
    return new TodoWriteParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TodoWriteParams {
    return new TodoWriteParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TodoWriteParams {
    return new TodoWriteParams().fromJsonString(jsonString, options);
  }

  static equals(a: TodoWriteParams | PlainMessage<TodoWriteParams> | undefined, b: TodoWriteParams | PlainMessage<TodoWriteParams> | undefined): boolean {
    return proto3.util.equals(TodoWriteParams, a, b);
  }
}

/**
 * aiserver.v1.TodoWriteResult
 *
 * @generated from message aiserver.v1.TodoWriteResult
 */
export class TodoWriteResult extends Message<TodoWriteResult> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: repeated string ready_task_ids = 2;
   */
  readyTaskIds: string[] = [];

  /**
   * @generated from field: bool needs_in_progress_todos = 3;
   */
  needsInProgressTodos = false;

  /**
   * @generated from field: repeated aiserver.v1.TodoItem final_todos = 4;
   */
  finalTodos: TodoItem[] = [];

  /**
   * @generated from field: repeated aiserver.v1.TodoItem initial_todos = 5;
   */
  initialTodos: TodoItem[] = [];

  /**
   * @generated from field: bool was_merge = 6;
   */
  wasMerge = false;

  constructor(data?: PartialMessage<TodoWriteResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TodoWriteResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "ready_task_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "needs_in_progress_todos", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "final_todos", kind: "message", T: TodoItem, repeated: true },
    { no: 5, name: "initial_todos", kind: "message", T: TodoItem, repeated: true },
    { no: 6, name: "was_merge", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TodoWriteResult {
    return new TodoWriteResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TodoWriteResult {
    return new TodoWriteResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TodoWriteResult {
    return new TodoWriteResult().fromJsonString(jsonString, options);
  }

  static equals(a: TodoWriteResult | PlainMessage<TodoWriteResult> | undefined, b: TodoWriteResult | PlainMessage<TodoWriteResult> | undefined): boolean {
    return proto3.util.equals(TodoWriteResult, a, b);
  }
}

/**
 * aiserver.v1.GetLintsForChangeResponse
 *
 * @generated from message aiserver.v1.GetLintsForChangeResponse
 */
export class GetLintsForChangeResponse extends Message<GetLintsForChangeResponse> {
  /**
   * @generated from field: repeated aiserver.v1.GetLintsForChangeResponse.Lint lints = 1;
   */
  lints: GetLintsForChangeResponse_Lint[] = [];

  constructor(data?: PartialMessage<GetLintsForChangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetLintsForChangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lints", kind: "message", T: GetLintsForChangeResponse_Lint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLintsForChangeResponse {
    return new GetLintsForChangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLintsForChangeResponse {
    return new GetLintsForChangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLintsForChangeResponse {
    return new GetLintsForChangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLintsForChangeResponse | PlainMessage<GetLintsForChangeResponse> | undefined, b: GetLintsForChangeResponse | PlainMessage<GetLintsForChangeResponse> | undefined): boolean {
    return proto3.util.equals(GetLintsForChangeResponse, a, b);
  }
}

/**
 * aiserver.v1.GetLintsForChangeResponse.Lint
 *
 * @generated from message aiserver.v1.GetLintsForChangeResponse.Lint
 */
export class GetLintsForChangeResponse_Lint extends Message<GetLintsForChangeResponse_Lint> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string severity = 2;
   */
  severity = "";

  /**
   * @generated from field: string relative_workspace_path = 3;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: int32 start_line_number_one_indexed = 4;
   */
  startLineNumberOneIndexed = 0;

  /**
   * @generated from field: int32 start_column_one_indexed = 5;
   */
  startColumnOneIndexed = 0;

  /**
   * @generated from field: int32 end_line_number_inclusive_one_indexed = 6;
   */
  endLineNumberInclusiveOneIndexed = 0;

  /**
   * @generated from field: int32 end_column_one_indexed = 7;
   */
  endColumnOneIndexed = 0;

  /**
   * @generated from field: repeated aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix quick_fixes = 9;
   */
  quickFixes: GetLintsForChangeResponse_Lint_QuickFix[] = [];

  constructor(data?: PartialMessage<GetLintsForChangeResponse_Lint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetLintsForChangeResponse.Lint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "severity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_line_number_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "start_column_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "end_line_number_inclusive_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "end_column_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "quick_fixes", kind: "message", T: GetLintsForChangeResponse_Lint_QuickFix, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLintsForChangeResponse_Lint {
    return new GetLintsForChangeResponse_Lint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLintsForChangeResponse_Lint {
    return new GetLintsForChangeResponse_Lint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLintsForChangeResponse_Lint {
    return new GetLintsForChangeResponse_Lint().fromJsonString(jsonString, options);
  }

  static equals(a: GetLintsForChangeResponse_Lint | PlainMessage<GetLintsForChangeResponse_Lint> | undefined, b: GetLintsForChangeResponse_Lint | PlainMessage<GetLintsForChangeResponse_Lint> | undefined): boolean {
    return proto3.util.equals(GetLintsForChangeResponse_Lint, a, b);
  }
}

/**
 * aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix
 *
 * @generated from message aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix
 */
export class GetLintsForChangeResponse_Lint_QuickFix extends Message<GetLintsForChangeResponse_Lint_QuickFix> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: bool is_preferred = 3;
   */
  isPreferred = false;

  /**
   * @generated from field: repeated aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit edits = 4;
   */
  edits: GetLintsForChangeResponse_Lint_QuickFix_Edit[] = [];

  constructor(data?: PartialMessage<GetLintsForChangeResponse_Lint_QuickFix>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_preferred", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "edits", kind: "message", T: GetLintsForChangeResponse_Lint_QuickFix_Edit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLintsForChangeResponse_Lint_QuickFix {
    return new GetLintsForChangeResponse_Lint_QuickFix().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLintsForChangeResponse_Lint_QuickFix {
    return new GetLintsForChangeResponse_Lint_QuickFix().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLintsForChangeResponse_Lint_QuickFix {
    return new GetLintsForChangeResponse_Lint_QuickFix().fromJsonString(jsonString, options);
  }

  static equals(a: GetLintsForChangeResponse_Lint_QuickFix | PlainMessage<GetLintsForChangeResponse_Lint_QuickFix> | undefined, b: GetLintsForChangeResponse_Lint_QuickFix | PlainMessage<GetLintsForChangeResponse_Lint_QuickFix> | undefined): boolean {
    return proto3.util.equals(GetLintsForChangeResponse_Lint_QuickFix, a, b);
  }
}

/**
 * aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit
 *
 * @generated from message aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit
 */
export class GetLintsForChangeResponse_Lint_QuickFix_Edit extends Message<GetLintsForChangeResponse_Lint_QuickFix_Edit> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: int32 start_line_number_one_indexed = 3;
   */
  startLineNumberOneIndexed = 0;

  /**
   * @generated from field: int32 start_column_one_indexed = 4;
   */
  startColumnOneIndexed = 0;

  /**
   * @generated from field: int32 end_line_number_inclusive_one_indexed = 5;
   */
  endLineNumberInclusiveOneIndexed = 0;

  /**
   * @generated from field: int32 end_column_one_indexed = 6;
   */
  endColumnOneIndexed = 0;

  constructor(data?: PartialMessage<GetLintsForChangeResponse_Lint_QuickFix_Edit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_line_number_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "start_column_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "end_line_number_inclusive_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "end_column_one_indexed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLintsForChangeResponse_Lint_QuickFix_Edit {
    return new GetLintsForChangeResponse_Lint_QuickFix_Edit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLintsForChangeResponse_Lint_QuickFix_Edit {
    return new GetLintsForChangeResponse_Lint_QuickFix_Edit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLintsForChangeResponse_Lint_QuickFix_Edit {
    return new GetLintsForChangeResponse_Lint_QuickFix_Edit().fromJsonString(jsonString, options);
  }

  static equals(a: GetLintsForChangeResponse_Lint_QuickFix_Edit | PlainMessage<GetLintsForChangeResponse_Lint_QuickFix_Edit> | undefined, b: GetLintsForChangeResponse_Lint_QuickFix_Edit | PlainMessage<GetLintsForChangeResponse_Lint_QuickFix_Edit> | undefined): boolean {
    return proto3.util.equals(GetLintsForChangeResponse_Lint_QuickFix_Edit, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest
 */
export class ComposerCapabilityRequest extends Message<ComposerCapabilityRequest> {
  /**
   * @generated from field: aiserver.v1.ComposerCapabilityRequest.ComposerCapabilityType type = 1;
   */
  type = ComposerCapabilityRequest_ComposerCapabilityType.UNSPECIFIED;

  /**
   * @generated from oneof aiserver.v1.ComposerCapabilityRequest.data
   */
  data: {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.LoopOnLintsCapability loop_on_lints = 2;
     */
    value: ComposerCapabilityRequest_LoopOnLintsCapability;
    case: "loopOnLints";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.LoopOnTestsCapability loop_on_tests = 3;
     */
    value: ComposerCapabilityRequest_LoopOnTestsCapability;
    case: "loopOnTests";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.MegaPlannerCapability mega_planner = 4;
     */
    value: ComposerCapabilityRequest_MegaPlannerCapability;
    case: "megaPlanner";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.LoopOnCommandCapability loop_on_command = 5;
     */
    value: ComposerCapabilityRequest_LoopOnCommandCapability;
    case: "loopOnCommand";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.ToolCallCapability tool_call = 6;
     */
    value: ComposerCapabilityRequest_ToolCallCapability;
    case: "toolCall";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability diff_review = 7;
     */
    value: ComposerCapabilityRequest_DiffReviewCapability;
    case: "diffReview";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.ContextPickingCapability context_picking = 8;
     */
    value: ComposerCapabilityRequest_ContextPickingCapability;
    case: "contextPicking";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.EditTrailCapability edit_trail = 9;
     */
    value: ComposerCapabilityRequest_EditTrailCapability;
    case: "editTrail";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.AutoContextCapability auto_context = 10;
     */
    value: ComposerCapabilityRequest_AutoContextCapability;
    case: "autoContext";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.ContextPlannerCapability context_planner = 11;
     */
    value: ComposerCapabilityRequest_ContextPlannerCapability;
    case: "contextPlanner";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.RememberThisCapability remember_this = 12;
     */
    value: ComposerCapabilityRequest_RememberThisCapability;
    case: "rememberThis";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.DecomposerCapability decomposer = 13;
     */
    value: ComposerCapabilityRequest_DecomposerCapability;
    case: "decomposer";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityRequest.CursorRulesCapability cursor_rules = 14;
     */
    value: ComposerCapabilityRequest_CursorRulesCapability;
    case: "cursorRules";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ComposerCapabilityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ComposerCapabilityRequest_ComposerCapabilityType) },
    { no: 2, name: "loop_on_lints", kind: "message", T: ComposerCapabilityRequest_LoopOnLintsCapability, oneof: "data" },
    { no: 3, name: "loop_on_tests", kind: "message", T: ComposerCapabilityRequest_LoopOnTestsCapability, oneof: "data" },
    { no: 4, name: "mega_planner", kind: "message", T: ComposerCapabilityRequest_MegaPlannerCapability, oneof: "data" },
    { no: 5, name: "loop_on_command", kind: "message", T: ComposerCapabilityRequest_LoopOnCommandCapability, oneof: "data" },
    { no: 6, name: "tool_call", kind: "message", T: ComposerCapabilityRequest_ToolCallCapability, oneof: "data" },
    { no: 7, name: "diff_review", kind: "message", T: ComposerCapabilityRequest_DiffReviewCapability, oneof: "data" },
    { no: 8, name: "context_picking", kind: "message", T: ComposerCapabilityRequest_ContextPickingCapability, oneof: "data" },
    { no: 9, name: "edit_trail", kind: "message", T: ComposerCapabilityRequest_EditTrailCapability, oneof: "data" },
    { no: 10, name: "auto_context", kind: "message", T: ComposerCapabilityRequest_AutoContextCapability, oneof: "data" },
    { no: 11, name: "context_planner", kind: "message", T: ComposerCapabilityRequest_ContextPlannerCapability, oneof: "data" },
    { no: 12, name: "remember_this", kind: "message", T: ComposerCapabilityRequest_RememberThisCapability, oneof: "data" },
    { no: 13, name: "decomposer", kind: "message", T: ComposerCapabilityRequest_DecomposerCapability, oneof: "data" },
    { no: 14, name: "cursor_rules", kind: "message", T: ComposerCapabilityRequest_CursorRulesCapability, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest {
    return new ComposerCapabilityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest {
    return new ComposerCapabilityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest {
    return new ComposerCapabilityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest | PlainMessage<ComposerCapabilityRequest> | undefined, b: ComposerCapabilityRequest | PlainMessage<ComposerCapabilityRequest> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.ComposerCapabilityType
 *
 * @generated from enum aiserver.v1.ComposerCapabilityRequest.ComposerCapabilityType
 */
export enum ComposerCapabilityRequest_ComposerCapabilityType {
  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_LOOP_ON_LINTS = 1;
   */
  LOOP_ON_LINTS = 1,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_LOOP_ON_TESTS = 2;
   */
  LOOP_ON_TESTS = 2,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_MEGA_PLANNER = 3;
   */
  MEGA_PLANNER = 3,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_LOOP_ON_COMMAND = 4;
   */
  LOOP_ON_COMMAND = 4,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_TOOL_CALL = 5;
   */
  TOOL_CALL = 5,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_DIFF_REVIEW = 6;
   */
  DIFF_REVIEW = 6,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_CONTEXT_PICKING = 7;
   */
  CONTEXT_PICKING = 7,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_EDIT_TRAIL = 8;
   */
  EDIT_TRAIL = 8,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_AUTO_CONTEXT = 9;
   */
  AUTO_CONTEXT = 9,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_CONTEXT_PLANNER = 10;
   */
  CONTEXT_PLANNER = 10,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_DIFF_HISTORY = 11;
   */
  DIFF_HISTORY = 11,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_REMEMBER_THIS = 12;
   */
  REMEMBER_THIS = 12,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_DECOMPOSER = 13;
   */
  DECOMPOSER = 13,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_USES_CODEBASE = 14;
   */
  USES_CODEBASE = 14,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_TOOL_FORMER = 15;
   */
  TOOL_FORMER = 15,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_CURSOR_RULES = 16;
   */
  CURSOR_RULES = 16,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_TOKEN_COUNTER = 17;
   */
  TOKEN_COUNTER = 17,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_USAGE_DATA = 18;
   */
  USAGE_DATA = 18,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_CHIMES = 19;
   */
  CHIMES = 19,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_CODE_DECAY_TRACKER = 20;
   */
  CODE_DECAY_TRACKER = 20,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_BACKGROUND_COMPOSER = 21;
   */
  BACKGROUND_COMPOSER = 21,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_SUMMARIZATION = 22;
   */
  SUMMARIZATION = 22,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_AI_CODE_TRACKING = 23;
   */
  AI_CODE_TRACKING = 23,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_QUEUING = 24;
   */
  QUEUING = 24,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_MEMORIES = 25;
   */
  MEMORIES = 25,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_RCP_LOGS = 26;
   */
  RCP_LOGS = 26,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_KNOWLEDGE_FETCH = 27;
   */
  KNOWLEDGE_FETCH = 27,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_SLACK_INTEGRATION = 28;
   */
  SLACK_INTEGRATION = 28,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_SUB_COMPOSER = 29;
   */
  SUB_COMPOSER = 29,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_THINKING = 30;
   */
  THINKING = 30,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_CONTEXT_WINDOW = 31;
   */
  CONTEXT_WINDOW = 31,

  /**
   * @generated from enum value: COMPOSER_CAPABILITY_TYPE_ONLINE_METRICS = 32;
   */
  ONLINE_METRICS = 32,
}
// Retrieve enum metadata with: proto3.getEnumType(ComposerCapabilityRequest_ComposerCapabilityType)
proto3.util.setEnumType(ComposerCapabilityRequest_ComposerCapabilityType, "aiserver.v1.ComposerCapabilityRequest.ComposerCapabilityType", [
  { no: 0, name: "COMPOSER_CAPABILITY_TYPE_UNSPECIFIED" },
  { no: 1, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_LINTS" },
  { no: 2, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_TESTS" },
  { no: 3, name: "COMPOSER_CAPABILITY_TYPE_MEGA_PLANNER" },
  { no: 4, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_COMMAND" },
  { no: 5, name: "COMPOSER_CAPABILITY_TYPE_TOOL_CALL" },
  { no: 6, name: "COMPOSER_CAPABILITY_TYPE_DIFF_REVIEW" },
  { no: 7, name: "COMPOSER_CAPABILITY_TYPE_CONTEXT_PICKING" },
  { no: 8, name: "COMPOSER_CAPABILITY_TYPE_EDIT_TRAIL" },
  { no: 9, name: "COMPOSER_CAPABILITY_TYPE_AUTO_CONTEXT" },
  { no: 10, name: "COMPOSER_CAPABILITY_TYPE_CONTEXT_PLANNER" },
  { no: 11, name: "COMPOSER_CAPABILITY_TYPE_DIFF_HISTORY" },
  { no: 12, name: "COMPOSER_CAPABILITY_TYPE_REMEMBER_THIS" },
  { no: 13, name: "COMPOSER_CAPABILITY_TYPE_DECOMPOSER" },
  { no: 14, name: "COMPOSER_CAPABILITY_TYPE_USES_CODEBASE" },
  { no: 15, name: "COMPOSER_CAPABILITY_TYPE_TOOL_FORMER" },
  { no: 16, name: "COMPOSER_CAPABILITY_TYPE_CURSOR_RULES" },
  { no: 17, name: "COMPOSER_CAPABILITY_TYPE_TOKEN_COUNTER" },
  { no: 18, name: "COMPOSER_CAPABILITY_TYPE_USAGE_DATA" },
  { no: 19, name: "COMPOSER_CAPABILITY_TYPE_CHIMES" },
  { no: 20, name: "COMPOSER_CAPABILITY_TYPE_CODE_DECAY_TRACKER" },
  { no: 21, name: "COMPOSER_CAPABILITY_TYPE_BACKGROUND_COMPOSER" },
  { no: 22, name: "COMPOSER_CAPABILITY_TYPE_SUMMARIZATION" },
  { no: 23, name: "COMPOSER_CAPABILITY_TYPE_AI_CODE_TRACKING" },
  { no: 24, name: "COMPOSER_CAPABILITY_TYPE_QUEUING" },
  { no: 25, name: "COMPOSER_CAPABILITY_TYPE_MEMORIES" },
  { no: 26, name: "COMPOSER_CAPABILITY_TYPE_RCP_LOGS" },
  { no: 27, name: "COMPOSER_CAPABILITY_TYPE_KNOWLEDGE_FETCH" },
  { no: 28, name: "COMPOSER_CAPABILITY_TYPE_SLACK_INTEGRATION" },
  { no: 29, name: "COMPOSER_CAPABILITY_TYPE_SUB_COMPOSER" },
  { no: 30, name: "COMPOSER_CAPABILITY_TYPE_THINKING" },
  { no: 31, name: "COMPOSER_CAPABILITY_TYPE_CONTEXT_WINDOW" },
  { no: 32, name: "COMPOSER_CAPABILITY_TYPE_ONLINE_METRICS" },
]);

/**
 * aiserver.v1.ComposerCapabilityRequest.ToolType
 *
 * @generated from enum aiserver.v1.ComposerCapabilityRequest.ToolType
 */
export enum ComposerCapabilityRequest_ToolType {
  /**
   * @generated from enum value: TOOL_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TOOL_TYPE_ADD_FILE_TO_CONTEXT = 1;
   */
  ADD_FILE_TO_CONTEXT = 1,

  /**
   * @generated from enum value: TOOL_TYPE_ITERATE = 3;
   */
  ITERATE = 3,

  /**
   * @generated from enum value: TOOL_TYPE_REMOVE_FILE_FROM_CONTEXT = 4;
   */
  REMOVE_FILE_FROM_CONTEXT = 4,

  /**
   * @generated from enum value: TOOL_TYPE_SEMANTIC_SEARCH_CODEBASE = 5;
   */
  SEMANTIC_SEARCH_CODEBASE = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ComposerCapabilityRequest_ToolType)
proto3.util.setEnumType(ComposerCapabilityRequest_ToolType, "aiserver.v1.ComposerCapabilityRequest.ToolType", [
  { no: 0, name: "TOOL_TYPE_UNSPECIFIED" },
  { no: 1, name: "TOOL_TYPE_ADD_FILE_TO_CONTEXT" },
  { no: 3, name: "TOOL_TYPE_ITERATE" },
  { no: 4, name: "TOOL_TYPE_REMOVE_FILE_FROM_CONTEXT" },
  { no: 5, name: "TOOL_TYPE_SEMANTIC_SEARCH_CODEBASE" },
]);

/**
 * aiserver.v1.ComposerCapabilityRequest.ToolSchema
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.ToolSchema
 */
export class ComposerCapabilityRequest_ToolSchema extends Message<ComposerCapabilityRequest_ToolSchema> {
  /**
   * @generated from field: aiserver.v1.ComposerCapabilityRequest.ToolType type = 1;
   */
  type = ComposerCapabilityRequest_ToolType.UNSPECIFIED;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: map<string, aiserver.v1.ComposerCapabilityRequest.SchemaProperty> properties = 3;
   */
  properties: { [key: string]: ComposerCapabilityRequest_SchemaProperty } = {};

  /**
   * @generated from field: repeated string required = 4;
   */
  required: string[] = [];

  constructor(data?: PartialMessage<ComposerCapabilityRequest_ToolSchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.ToolSchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ComposerCapabilityRequest_ToolType) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ComposerCapabilityRequest_SchemaProperty} },
    { no: 4, name: "required", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_ToolSchema {
    return new ComposerCapabilityRequest_ToolSchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_ToolSchema {
    return new ComposerCapabilityRequest_ToolSchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_ToolSchema {
    return new ComposerCapabilityRequest_ToolSchema().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_ToolSchema | PlainMessage<ComposerCapabilityRequest_ToolSchema> | undefined, b: ComposerCapabilityRequest_ToolSchema | PlainMessage<ComposerCapabilityRequest_ToolSchema> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_ToolSchema, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.SchemaProperty
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.SchemaProperty
 */
export class ComposerCapabilityRequest_SchemaProperty extends Message<ComposerCapabilityRequest_SchemaProperty> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_SchemaProperty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.SchemaProperty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_SchemaProperty {
    return new ComposerCapabilityRequest_SchemaProperty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_SchemaProperty {
    return new ComposerCapabilityRequest_SchemaProperty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_SchemaProperty {
    return new ComposerCapabilityRequest_SchemaProperty().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_SchemaProperty | PlainMessage<ComposerCapabilityRequest_SchemaProperty> | undefined, b: ComposerCapabilityRequest_SchemaProperty | PlainMessage<ComposerCapabilityRequest_SchemaProperty> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_SchemaProperty, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.LoopOnLintsCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.LoopOnLintsCapability
 */
export class ComposerCapabilityRequest_LoopOnLintsCapability extends Message<ComposerCapabilityRequest_LoopOnLintsCapability> {
  /**
   * @generated from field: repeated aiserver.v1.LinterErrors linter_errors = 1;
   */
  linterErrors: LinterErrors[] = [];

  /**
   * @generated from field: optional string custom_instructions = 2;
   */
  customInstructions?: string;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_LoopOnLintsCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.LoopOnLintsCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "linter_errors", kind: "message", T: LinterErrors, repeated: true },
    { no: 2, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_LoopOnLintsCapability {
    return new ComposerCapabilityRequest_LoopOnLintsCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_LoopOnLintsCapability {
    return new ComposerCapabilityRequest_LoopOnLintsCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_LoopOnLintsCapability {
    return new ComposerCapabilityRequest_LoopOnLintsCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_LoopOnLintsCapability | PlainMessage<ComposerCapabilityRequest_LoopOnLintsCapability> | undefined, b: ComposerCapabilityRequest_LoopOnLintsCapability | PlainMessage<ComposerCapabilityRequest_LoopOnLintsCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_LoopOnLintsCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.LoopOnTestsCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.LoopOnTestsCapability
 */
export class ComposerCapabilityRequest_LoopOnTestsCapability extends Message<ComposerCapabilityRequest_LoopOnTestsCapability> {
  /**
   * @generated from field: repeated string test_names = 1;
   */
  testNames: string[] = [];

  /**
   * @generated from field: optional string custom_instructions = 2;
   */
  customInstructions?: string;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_LoopOnTestsCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.LoopOnTestsCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_LoopOnTestsCapability {
    return new ComposerCapabilityRequest_LoopOnTestsCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_LoopOnTestsCapability {
    return new ComposerCapabilityRequest_LoopOnTestsCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_LoopOnTestsCapability {
    return new ComposerCapabilityRequest_LoopOnTestsCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_LoopOnTestsCapability | PlainMessage<ComposerCapabilityRequest_LoopOnTestsCapability> | undefined, b: ComposerCapabilityRequest_LoopOnTestsCapability | PlainMessage<ComposerCapabilityRequest_LoopOnTestsCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_LoopOnTestsCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.MegaPlannerCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.MegaPlannerCapability
 */
export class ComposerCapabilityRequest_MegaPlannerCapability extends Message<ComposerCapabilityRequest_MegaPlannerCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_MegaPlannerCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.MegaPlannerCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_MegaPlannerCapability {
    return new ComposerCapabilityRequest_MegaPlannerCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_MegaPlannerCapability {
    return new ComposerCapabilityRequest_MegaPlannerCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_MegaPlannerCapability {
    return new ComposerCapabilityRequest_MegaPlannerCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_MegaPlannerCapability | PlainMessage<ComposerCapabilityRequest_MegaPlannerCapability> | undefined, b: ComposerCapabilityRequest_MegaPlannerCapability | PlainMessage<ComposerCapabilityRequest_MegaPlannerCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_MegaPlannerCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.LoopOnCommandCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.LoopOnCommandCapability
 */
export class ComposerCapabilityRequest_LoopOnCommandCapability extends Message<ComposerCapabilityRequest_LoopOnCommandCapability> {
  /**
   * @generated from field: string command = 1;
   */
  command = "";

  /**
   * @generated from field: optional string custom_instructions = 2;
   */
  customInstructions?: string;

  /**
   * @generated from field: optional string output = 3;
   */
  output?: string;

  /**
   * @generated from field: optional int32 exit_code = 4;
   */
  exitCode?: number;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_LoopOnCommandCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.LoopOnCommandCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_LoopOnCommandCapability {
    return new ComposerCapabilityRequest_LoopOnCommandCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_LoopOnCommandCapability {
    return new ComposerCapabilityRequest_LoopOnCommandCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_LoopOnCommandCapability {
    return new ComposerCapabilityRequest_LoopOnCommandCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_LoopOnCommandCapability | PlainMessage<ComposerCapabilityRequest_LoopOnCommandCapability> | undefined, b: ComposerCapabilityRequest_LoopOnCommandCapability | PlainMessage<ComposerCapabilityRequest_LoopOnCommandCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_LoopOnCommandCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.ToolCallCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.ToolCallCapability
 */
export class ComposerCapabilityRequest_ToolCallCapability extends Message<ComposerCapabilityRequest_ToolCallCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  /**
   * @generated from field: repeated aiserver.v1.ComposerCapabilityRequest.ToolSchema tool_schemas = 2;
   */
  toolSchemas: ComposerCapabilityRequest_ToolSchema[] = [];

  /**
   * @generated from field: repeated string relevant_files = 3;
   */
  relevantFiles: string[] = [];

  /**
   * @generated from field: repeated string files_in_context = 4;
   */
  filesInContext: string[] = [];

  /**
   * @generated from field: repeated string semantic_search_files = 5;
   */
  semanticSearchFiles: string[] = [];

  constructor(data?: PartialMessage<ComposerCapabilityRequest_ToolCallCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.ToolCallCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "tool_schemas", kind: "message", T: ComposerCapabilityRequest_ToolSchema, repeated: true },
    { no: 3, name: "relevant_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "files_in_context", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "semantic_search_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_ToolCallCapability {
    return new ComposerCapabilityRequest_ToolCallCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_ToolCallCapability {
    return new ComposerCapabilityRequest_ToolCallCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_ToolCallCapability {
    return new ComposerCapabilityRequest_ToolCallCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_ToolCallCapability | PlainMessage<ComposerCapabilityRequest_ToolCallCapability> | undefined, b: ComposerCapabilityRequest_ToolCallCapability | PlainMessage<ComposerCapabilityRequest_ToolCallCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_ToolCallCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability
 */
export class ComposerCapabilityRequest_DiffReviewCapability extends Message<ComposerCapabilityRequest_DiffReviewCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  /**
   * @generated from field: repeated aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff diffs = 2;
   */
  diffs: ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff[] = [];

  constructor(data?: PartialMessage<ComposerCapabilityRequest_DiffReviewCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "diffs", kind: "message", T: ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_DiffReviewCapability {
    return new ComposerCapabilityRequest_DiffReviewCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_DiffReviewCapability {
    return new ComposerCapabilityRequest_DiffReviewCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_DiffReviewCapability {
    return new ComposerCapabilityRequest_DiffReviewCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_DiffReviewCapability | PlainMessage<ComposerCapabilityRequest_DiffReviewCapability> | undefined, b: ComposerCapabilityRequest_DiffReviewCapability | PlainMessage<ComposerCapabilityRequest_DiffReviewCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_DiffReviewCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff
 */
export class ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff extends Message<ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff.Chunk chunks = 3;
   */
  chunks: ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk[] = [];

  constructor(data?: PartialMessage<ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chunks", kind: "message", T: ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff {
    return new ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff {
    return new ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff {
    return new ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff | PlainMessage<ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff> | undefined, b: ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff | PlainMessage<ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff.Chunk
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff.Chunk
 */
export class ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk extends Message<ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk> {
  /**
   * @generated from field: repeated string old_lines = 1;
   */
  oldLines: string[] = [];

  /**
   * @generated from field: repeated string new_lines = 2;
   */
  newLines: string[] = [];

  /**
   * @generated from field: aiserver.v1.LineRange old_range = 3;
   */
  oldRange?: LineRange;

  /**
   * @generated from field: aiserver.v1.LineRange new_range = 4;
   */
  newRange?: LineRange;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff.Chunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "old_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "new_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "old_range", kind: "message", T: LineRange },
    { no: 4, name: "new_range", kind: "message", T: LineRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk {
    return new ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk {
    return new ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk {
    return new ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk | PlainMessage<ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk> | undefined, b: ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk | PlainMessage<ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_DiffReviewCapability_SimpleFileDiff_Chunk, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.DecomposerCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.DecomposerCapability
 */
export class ComposerCapabilityRequest_DecomposerCapability extends Message<ComposerCapabilityRequest_DecomposerCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_DecomposerCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.DecomposerCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_DecomposerCapability {
    return new ComposerCapabilityRequest_DecomposerCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_DecomposerCapability {
    return new ComposerCapabilityRequest_DecomposerCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_DecomposerCapability {
    return new ComposerCapabilityRequest_DecomposerCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_DecomposerCapability | PlainMessage<ComposerCapabilityRequest_DecomposerCapability> | undefined, b: ComposerCapabilityRequest_DecomposerCapability | PlainMessage<ComposerCapabilityRequest_DecomposerCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_DecomposerCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.ContextPickingCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.ContextPickingCapability
 */
export class ComposerCapabilityRequest_ContextPickingCapability extends Message<ComposerCapabilityRequest_ContextPickingCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  /**
   * @generated from field: repeated string potential_context_files = 2;
   */
  potentialContextFiles: string[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CodeChunk potential_context_code_chunks = 3;
   */
  potentialContextCodeChunks: CodeChunk[] = [];

  /**
   * @generated from field: repeated string files_in_context = 4;
   */
  filesInContext: string[] = [];

  constructor(data?: PartialMessage<ComposerCapabilityRequest_ContextPickingCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.ContextPickingCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "potential_context_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "potential_context_code_chunks", kind: "message", T: CodeChunk, repeated: true },
    { no: 4, name: "files_in_context", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_ContextPickingCapability {
    return new ComposerCapabilityRequest_ContextPickingCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_ContextPickingCapability {
    return new ComposerCapabilityRequest_ContextPickingCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_ContextPickingCapability {
    return new ComposerCapabilityRequest_ContextPickingCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_ContextPickingCapability | PlainMessage<ComposerCapabilityRequest_ContextPickingCapability> | undefined, b: ComposerCapabilityRequest_ContextPickingCapability | PlainMessage<ComposerCapabilityRequest_ContextPickingCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_ContextPickingCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.EditTrailCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.EditTrailCapability
 */
export class ComposerCapabilityRequest_EditTrailCapability extends Message<ComposerCapabilityRequest_EditTrailCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_EditTrailCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.EditTrailCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_EditTrailCapability {
    return new ComposerCapabilityRequest_EditTrailCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_EditTrailCapability {
    return new ComposerCapabilityRequest_EditTrailCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_EditTrailCapability {
    return new ComposerCapabilityRequest_EditTrailCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_EditTrailCapability | PlainMessage<ComposerCapabilityRequest_EditTrailCapability> | undefined, b: ComposerCapabilityRequest_EditTrailCapability | PlainMessage<ComposerCapabilityRequest_EditTrailCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_EditTrailCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.AutoContextCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.AutoContextCapability
 */
export class ComposerCapabilityRequest_AutoContextCapability extends Message<ComposerCapabilityRequest_AutoContextCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  /**
   * @generated from field: repeated string additional_files = 2;
   */
  additionalFiles: string[] = [];

  constructor(data?: PartialMessage<ComposerCapabilityRequest_AutoContextCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.AutoContextCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "additional_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_AutoContextCapability {
    return new ComposerCapabilityRequest_AutoContextCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_AutoContextCapability {
    return new ComposerCapabilityRequest_AutoContextCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_AutoContextCapability {
    return new ComposerCapabilityRequest_AutoContextCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_AutoContextCapability | PlainMessage<ComposerCapabilityRequest_AutoContextCapability> | undefined, b: ComposerCapabilityRequest_AutoContextCapability | PlainMessage<ComposerCapabilityRequest_AutoContextCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_AutoContextCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.ContextPlannerCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.ContextPlannerCapability
 */
export class ComposerCapabilityRequest_ContextPlannerCapability extends Message<ComposerCapabilityRequest_ContextPlannerCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  /**
   * @generated from field: repeated aiserver.v1.CodeChunk attached_code_chunks = 2;
   */
  attachedCodeChunks: CodeChunk[] = [];

  constructor(data?: PartialMessage<ComposerCapabilityRequest_ContextPlannerCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.ContextPlannerCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "attached_code_chunks", kind: "message", T: CodeChunk, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_ContextPlannerCapability {
    return new ComposerCapabilityRequest_ContextPlannerCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_ContextPlannerCapability {
    return new ComposerCapabilityRequest_ContextPlannerCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_ContextPlannerCapability {
    return new ComposerCapabilityRequest_ContextPlannerCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_ContextPlannerCapability | PlainMessage<ComposerCapabilityRequest_ContextPlannerCapability> | undefined, b: ComposerCapabilityRequest_ContextPlannerCapability | PlainMessage<ComposerCapabilityRequest_ContextPlannerCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_ContextPlannerCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.RememberThisCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.RememberThisCapability
 */
export class ComposerCapabilityRequest_RememberThisCapability extends Message<ComposerCapabilityRequest_RememberThisCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  /**
   * @generated from field: string memory = 2;
   */
  memory = "";

  constructor(data?: PartialMessage<ComposerCapabilityRequest_RememberThisCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.RememberThisCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "memory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_RememberThisCapability {
    return new ComposerCapabilityRequest_RememberThisCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_RememberThisCapability {
    return new ComposerCapabilityRequest_RememberThisCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_RememberThisCapability {
    return new ComposerCapabilityRequest_RememberThisCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_RememberThisCapability | PlainMessage<ComposerCapabilityRequest_RememberThisCapability> | undefined, b: ComposerCapabilityRequest_RememberThisCapability | PlainMessage<ComposerCapabilityRequest_RememberThisCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_RememberThisCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityRequest.CursorRulesCapability
 *
 * @generated from message aiserver.v1.ComposerCapabilityRequest.CursorRulesCapability
 */
export class ComposerCapabilityRequest_CursorRulesCapability extends Message<ComposerCapabilityRequest_CursorRulesCapability> {
  /**
   * @generated from field: optional string custom_instructions = 1;
   */
  customInstructions?: string;

  constructor(data?: PartialMessage<ComposerCapabilityRequest_CursorRulesCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityRequest.CursorRulesCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityRequest_CursorRulesCapability {
    return new ComposerCapabilityRequest_CursorRulesCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_CursorRulesCapability {
    return new ComposerCapabilityRequest_CursorRulesCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityRequest_CursorRulesCapability {
    return new ComposerCapabilityRequest_CursorRulesCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityRequest_CursorRulesCapability | PlainMessage<ComposerCapabilityRequest_CursorRulesCapability> | undefined, b: ComposerCapabilityRequest_CursorRulesCapability | PlainMessage<ComposerCapabilityRequest_CursorRulesCapability> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityRequest_CursorRulesCapability, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityContext
 *
 * @generated from message aiserver.v1.ComposerCapabilityContext
 */
export class ComposerCapabilityContext extends Message<ComposerCapabilityContext> {
  /**
   * @generated from oneof aiserver.v1.ComposerCapabilityContext.data
   */
  data: {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityContext.SlackIntegrationContext slack_integration = 27;
     */
    value: ComposerCapabilityContext_SlackIntegrationContext;
    case: "slackIntegration";
  } | {
    /**
     * @generated from field: aiserver.v1.ComposerCapabilityContext.GithubPRContext github_pr = 28;
     */
    value: ComposerCapabilityContext_GithubPRContext;
    case: "githubPr";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ComposerCapabilityContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 27, name: "slack_integration", kind: "message", T: ComposerCapabilityContext_SlackIntegrationContext, oneof: "data" },
    { no: 28, name: "github_pr", kind: "message", T: ComposerCapabilityContext_GithubPRContext, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityContext {
    return new ComposerCapabilityContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityContext {
    return new ComposerCapabilityContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityContext {
    return new ComposerCapabilityContext().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityContext | PlainMessage<ComposerCapabilityContext> | undefined, b: ComposerCapabilityContext | PlainMessage<ComposerCapabilityContext> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityContext, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityContext.SlackIntegrationContext
 *
 * @generated from message aiserver.v1.ComposerCapabilityContext.SlackIntegrationContext
 */
export class ComposerCapabilityContext_SlackIntegrationContext extends Message<ComposerCapabilityContext_SlackIntegrationContext> {
  /**
   * @generated from field: string thread = 1;
   */
  thread = "";

  constructor(data?: PartialMessage<ComposerCapabilityContext_SlackIntegrationContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityContext.SlackIntegrationContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thread", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityContext_SlackIntegrationContext {
    return new ComposerCapabilityContext_SlackIntegrationContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityContext_SlackIntegrationContext {
    return new ComposerCapabilityContext_SlackIntegrationContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityContext_SlackIntegrationContext {
    return new ComposerCapabilityContext_SlackIntegrationContext().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityContext_SlackIntegrationContext | PlainMessage<ComposerCapabilityContext_SlackIntegrationContext> | undefined, b: ComposerCapabilityContext_SlackIntegrationContext | PlainMessage<ComposerCapabilityContext_SlackIntegrationContext> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityContext_SlackIntegrationContext, a, b);
  }
}

/**
 * aiserver.v1.ComposerCapabilityContext.GithubPRContext
 *
 * @generated from message aiserver.v1.ComposerCapabilityContext.GithubPRContext
 */
export class ComposerCapabilityContext_GithubPRContext extends Message<ComposerCapabilityContext_GithubPRContext> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string comments = 3;
   */
  comments = "";

  constructor(data?: PartialMessage<ComposerCapabilityContext_GithubPRContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerCapabilityContext.GithubPRContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerCapabilityContext_GithubPRContext {
    return new ComposerCapabilityContext_GithubPRContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerCapabilityContext_GithubPRContext {
    return new ComposerCapabilityContext_GithubPRContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerCapabilityContext_GithubPRContext {
    return new ComposerCapabilityContext_GithubPRContext().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerCapabilityContext_GithubPRContext | PlainMessage<ComposerCapabilityContext_GithubPRContext> | undefined, b: ComposerCapabilityContext_GithubPRContext | PlainMessage<ComposerCapabilityContext_GithubPRContext> | undefined): boolean {
    return proto3.util.equals(ComposerCapabilityContext_GithubPRContext, a, b);
  }
}

/**
 * aiserver.v1.ConversationSummary
 *
 * @generated from message aiserver.v1.ConversationSummary
 */
export class ConversationSummary extends Message<ConversationSummary> {
  /**
   * @generated from field: string summary = 1;
   */
  summary = "";

  /**
   * @generated from field: string truncation_last_bubble_id_inclusive = 2;
   */
  truncationLastBubbleIdInclusive = "";

  /**
   * @generated from field: string client_should_start_sending_from_inclusive_bubble_id = 3;
   */
  clientShouldStartSendingFromInclusiveBubbleId = "";

  /**
   * @generated from field: string previous_conversation_summary_bubble_id = 4;
   */
  previousConversationSummaryBubbleId = "";

  /**
   * @generated from field: bool includes_tool_results = 5;
   */
  includesToolResults = false;

  constructor(data?: PartialMessage<ConversationSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "truncation_last_bubble_id_inclusive", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_should_start_sending_from_inclusive_bubble_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "previous_conversation_summary_bubble_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "includes_tool_results", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationSummary {
    return new ConversationSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationSummary {
    return new ConversationSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationSummary {
    return new ConversationSummary().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationSummary | PlainMessage<ConversationSummary> | undefined, b: ConversationSummary | PlainMessage<ConversationSummary> | undefined): boolean {
    return proto3.util.equals(ConversationSummary, a, b);
  }
}

/**
 * aiserver.v1.WebReference
 *
 * @generated from message aiserver.v1.WebReference
 */
export class WebReference extends Message<WebReference> {
  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string chunk = 3;
   */
  chunk = "";

  constructor(data?: PartialMessage<WebReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.WebReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chunk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebReference {
    return new WebReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebReference {
    return new WebReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebReference {
    return new WebReference().fromJsonString(jsonString, options);
  }

  static equals(a: WebReference | PlainMessage<WebReference> | undefined, b: WebReference | PlainMessage<WebReference> | undefined): boolean {
    return proto3.util.equals(WebReference, a, b);
  }
}

/**
 * aiserver.v1.DocsReference
 *
 * @generated from message aiserver.v1.DocsReference
 */
export class DocsReference extends Message<DocsReference> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: string chunk = 3;
   */
  chunk = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  constructor(data?: PartialMessage<DocsReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DocsReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chunk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocsReference {
    return new DocsReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocsReference {
    return new DocsReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocsReference {
    return new DocsReference().fromJsonString(jsonString, options);
  }

  static equals(a: DocsReference | PlainMessage<DocsReference> | undefined, b: DocsReference | PlainMessage<DocsReference> | undefined): boolean {
    return proto3.util.equals(DocsReference, a, b);
  }
}

/**
 * aiserver.v1.ComposerFileDiffHistory
 *
 * @generated from message aiserver.v1.ComposerFileDiffHistory
 */
export class ComposerFileDiffHistory extends Message<ComposerFileDiffHistory> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName = "";

  /**
   * @generated from field: repeated string diff_history = 2;
   */
  diffHistory: string[] = [];

  /**
   * @generated from field: repeated double diff_history_timestamps = 3;
   */
  diffHistoryTimestamps: number[] = [];

  constructor(data?: PartialMessage<ComposerFileDiffHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerFileDiffHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "diff_history", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "diff_history_timestamps", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerFileDiffHistory {
    return new ComposerFileDiffHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerFileDiffHistory {
    return new ComposerFileDiffHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerFileDiffHistory {
    return new ComposerFileDiffHistory().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerFileDiffHistory | PlainMessage<ComposerFileDiffHistory> | undefined, b: ComposerFileDiffHistory | PlainMessage<ComposerFileDiffHistory> | undefined): boolean {
    return proto3.util.equals(ComposerFileDiffHistory, a, b);
  }
}

/**
 * aiserver.v1.ContextPiece
 *
 * @generated from message aiserver.v1.ContextPiece
 */
export class ContextPiece extends Message<ContextPiece> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: float score = 3;
   */
  score = 0;

  constructor(data?: PartialMessage<ContextPiece>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ContextPiece";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContextPiece {
    return new ContextPiece().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContextPiece {
    return new ContextPiece().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContextPiece {
    return new ContextPiece().fromJsonString(jsonString, options);
  }

  static equals(a: ContextPiece | PlainMessage<ContextPiece> | undefined, b: ContextPiece | PlainMessage<ContextPiece> | undefined): boolean {
    return proto3.util.equals(ContextPiece, a, b);
  }
}

/**
 * aiserver.v1.RedDiff
 *
 * @generated from message aiserver.v1.RedDiff
 */
export class RedDiff extends Message<RedDiff> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated aiserver.v1.SimplestRange red_ranges = 2;
   */
  redRanges: SimplestRange[] = [];

  /**
   * @generated from field: repeated aiserver.v1.SimplestRange red_ranges_reversed = 3;
   */
  redRangesReversed: SimplestRange[] = [];

  /**
   * @generated from field: string start_hash = 4;
   */
  startHash = "";

  /**
   * @generated from field: string end_hash = 5;
   */
  endHash = "";

  constructor(data?: PartialMessage<RedDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.RedDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "red_ranges", kind: "message", T: SimplestRange, repeated: true },
    { no: 3, name: "red_ranges_reversed", kind: "message", T: SimplestRange, repeated: true },
    { no: 4, name: "start_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "end_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedDiff {
    return new RedDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedDiff {
    return new RedDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedDiff {
    return new RedDiff().fromJsonString(jsonString, options);
  }

  static equals(a: RedDiff | PlainMessage<RedDiff> | undefined, b: RedDiff | PlainMessage<RedDiff> | undefined): boolean {
    return proto3.util.equals(RedDiff, a, b);
  }
}

/**
 * aiserver.v1.DiffFile
 *
 * @generated from message aiserver.v1.DiffFile
 */
export class DiffFile extends Message<DiffFile> {
  /**
   * @generated from field: string file_details = 1;
   */
  fileDetails = "";

  /**
   * @generated from field: string file_name = 2;
   */
  fileName = "";

  constructor(data?: PartialMessage<DiffFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DiffFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffFile {
    return new DiffFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffFile {
    return new DiffFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffFile {
    return new DiffFile().fromJsonString(jsonString, options);
  }

  static equals(a: DiffFile | PlainMessage<DiffFile> | undefined, b: DiffFile | PlainMessage<DiffFile> | undefined): boolean {
    return proto3.util.equals(DiffFile, a, b);
  }
}

/**
 * aiserver.v1.ViewableCommitProps
 *
 * @generated from message aiserver.v1.ViewableCommitProps
 */
export class ViewableCommitProps extends Message<ViewableCommitProps> {
  /**
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: repeated aiserver.v1.DiffFile files = 3;
   */
  files: DiffFile[] = [];

  constructor(data?: PartialMessage<ViewableCommitProps>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ViewableCommitProps";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "files", kind: "message", T: DiffFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViewableCommitProps {
    return new ViewableCommitProps().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViewableCommitProps {
    return new ViewableCommitProps().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViewableCommitProps {
    return new ViewableCommitProps().fromJsonString(jsonString, options);
  }

  static equals(a: ViewableCommitProps | PlainMessage<ViewableCommitProps> | undefined, b: ViewableCommitProps | PlainMessage<ViewableCommitProps> | undefined): boolean {
    return proto3.util.equals(ViewableCommitProps, a, b);
  }
}

/**
 * aiserver.v1.ViewablePRProps
 *
 * @generated from message aiserver.v1.ViewablePRProps
 */
export class ViewablePRProps extends Message<ViewablePRProps> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * @generated from field: repeated aiserver.v1.DiffFile files = 3;
   */
  files: DiffFile[] = [];

  constructor(data?: PartialMessage<ViewablePRProps>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ViewablePRProps";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "files", kind: "message", T: DiffFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViewablePRProps {
    return new ViewablePRProps().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViewablePRProps {
    return new ViewablePRProps().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViewablePRProps {
    return new ViewablePRProps().fromJsonString(jsonString, options);
  }

  static equals(a: ViewablePRProps | PlainMessage<ViewablePRProps> | undefined, b: ViewablePRProps | PlainMessage<ViewablePRProps> | undefined): boolean {
    return proto3.util.equals(ViewablePRProps, a, b);
  }
}

/**
 * aiserver.v1.ViewableDiffProps
 *
 * @generated from message aiserver.v1.ViewableDiffProps
 */
export class ViewableDiffProps extends Message<ViewableDiffProps> {
  /**
   * @generated from field: repeated aiserver.v1.DiffFile files = 1;
   */
  files: DiffFile[] = [];

  /**
   * @generated from field: string diff_preface = 2;
   */
  diffPreface = "";

  constructor(data?: PartialMessage<ViewableDiffProps>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ViewableDiffProps";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: DiffFile, repeated: true },
    { no: 2, name: "diff_preface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViewableDiffProps {
    return new ViewableDiffProps().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViewableDiffProps {
    return new ViewableDiffProps().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViewableDiffProps {
    return new ViewableDiffProps().fromJsonString(jsonString, options);
  }

  static equals(a: ViewableDiffProps | PlainMessage<ViewableDiffProps> | undefined, b: ViewableDiffProps | PlainMessage<ViewableDiffProps> | undefined): boolean {
    return proto3.util.equals(ViewableDiffProps, a, b);
  }
}

/**
 * aiserver.v1.ViewableGitContext
 *
 * @generated from message aiserver.v1.ViewableGitContext
 */
export class ViewableGitContext extends Message<ViewableGitContext> {
  /**
   * @generated from field: optional aiserver.v1.ViewableCommitProps commit_data = 1;
   */
  commitData?: ViewableCommitProps;

  /**
   * @generated from field: optional aiserver.v1.ViewablePRProps pull_request_data = 2;
   */
  pullRequestData?: ViewablePRProps;

  /**
   * @generated from field: repeated aiserver.v1.ViewableDiffProps diff_data = 3;
   */
  diffData: ViewableDiffProps[] = [];

  constructor(data?: PartialMessage<ViewableGitContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ViewableGitContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit_data", kind: "message", T: ViewableCommitProps, opt: true },
    { no: 2, name: "pull_request_data", kind: "message", T: ViewablePRProps, opt: true },
    { no: 3, name: "diff_data", kind: "message", T: ViewableDiffProps, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViewableGitContext {
    return new ViewableGitContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViewableGitContext {
    return new ViewableGitContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViewableGitContext {
    return new ViewableGitContext().fromJsonString(jsonString, options);
  }

  static equals(a: ViewableGitContext | PlainMessage<ViewableGitContext> | undefined, b: ViewableGitContext | PlainMessage<ViewableGitContext> | undefined): boolean {
    return proto3.util.equals(ViewableGitContext, a, b);
  }
}

/**
 * aiserver.v1.StreamUnifiedChatRequest
 *
 * @generated from message aiserver.v1.StreamUnifiedChatRequest
 */
export class StreamUnifiedChatRequest extends Message<StreamUnifiedChatRequest> {
  constructor(data?: PartialMessage<StreamUnifiedChatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamUnifiedChatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamUnifiedChatRequest {
    return new StreamUnifiedChatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamUnifiedChatRequest {
    return new StreamUnifiedChatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamUnifiedChatRequest {
    return new StreamUnifiedChatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamUnifiedChatRequest | PlainMessage<StreamUnifiedChatRequest> | undefined, b: StreamUnifiedChatRequest | PlainMessage<StreamUnifiedChatRequest> | undefined): boolean {
    return proto3.util.equals(StreamUnifiedChatRequest, a, b);
  }
}

/**
 * aiserver.v1.StreamUnifiedChatRequest.UnifiedMode
 *
 * @generated from enum aiserver.v1.StreamUnifiedChatRequest.UnifiedMode
 */
export enum StreamUnifiedChatRequest_UnifiedMode {
  /**
   * @generated from enum value: UNIFIED_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: UNIFIED_MODE_CHAT = 1;
   */
  CHAT = 1,

  /**
   * @generated from enum value: UNIFIED_MODE_AGENT = 2;
   */
  AGENT = 2,

  /**
   * @generated from enum value: UNIFIED_MODE_EDIT = 3;
   */
  EDIT = 3,

  /**
   * @generated from enum value: UNIFIED_MODE_CUSTOM = 4;
   */
  CUSTOM = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(StreamUnifiedChatRequest_UnifiedMode)
proto3.util.setEnumType(StreamUnifiedChatRequest_UnifiedMode, "aiserver.v1.StreamUnifiedChatRequest.UnifiedMode", [
  { no: 0, name: "UNIFIED_MODE_UNSPECIFIED" },
  { no: 1, name: "UNIFIED_MODE_CHAT" },
  { no: 2, name: "UNIFIED_MODE_AGENT" },
  { no: 3, name: "UNIFIED_MODE_EDIT" },
  { no: 4, name: "UNIFIED_MODE_CUSTOM" },
]);

/**
 * aiserver.v1.ConversationMessage
 *
 * @generated from message aiserver.v1.ConversationMessage
 */
export class ConversationMessage extends Message<ConversationMessage> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: aiserver.v1.ConversationMessage.MessageType type = 2;
   */
  type = ConversationMessage_MessageType.UNSPECIFIED;

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.CodeChunk attached_code_chunks = 3;
   */
  attachedCodeChunks: ConversationMessage_CodeChunk[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CodeBlock codebase_context_chunks = 4;
   */
  codebaseContextChunks: CodeBlock[] = [];

  /**
   * @generated from field: repeated aiserver.v1.Commit commits = 5;
   */
  commits: Commit[] = [];

  /**
   * @generated from field: repeated aiserver.v1.PullRequest pull_requests = 6;
   */
  pullRequests: PullRequest[] = [];

  /**
   * @generated from field: repeated aiserver.v1.GitDiff git_diffs = 7;
   */
  gitDiffs: GitDiff[] = [];

  /**
   * @generated from field: repeated aiserver.v1.SimpleFileDiff assistant_suggested_diffs = 8;
   */
  assistantSuggestedDiffs: SimpleFileDiff[] = [];

  /**
   * @generated from field: repeated aiserver.v1.InterpreterResult interpreter_results = 9;
   */
  interpreterResults: InterpreterResult[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ImageProto images = 10;
   */
  images: ImageProto[] = [];

  /**
   * @generated from field: repeated string attached_folders = 11;
   */
  attachedFolders: string[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.ApproximateLintError approximate_lint_errors = 12;
   */
  approximateLintErrors: ConversationMessage_ApproximateLintError[] = [];

  /**
   * @generated from field: string bubble_id = 13;
   */
  bubbleId = "";

  /**
   * @generated from field: optional string server_bubble_id = 32;
   */
  serverBubbleId?: string;

  /**
   * @generated from field: repeated aiserver.v1.FolderInfo attached_folders_new = 14;
   */
  attachedFoldersNew: FolderInfo[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.Lints lints = 15;
   */
  lints: ConversationMessage_Lints[] = [];

  /**
   * @generated from field: repeated aiserver.v1.UserResponseToSuggestedCodeBlock user_responses_to_suggested_code_blocks = 16;
   */
  userResponsesToSuggestedCodeBlocks: UserResponseToSuggestedCodeBlock[] = [];

  /**
   * @generated from field: repeated string relevant_files = 17;
   */
  relevantFiles: string[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.ToolResult tool_results = 18;
   */
  toolResults: ConversationMessage_ToolResult[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.NotepadContext notepads = 19;
   */
  notepads: ConversationMessage_NotepadContext[] = [];

  /**
   * @generated from field: optional bool is_capability_iteration = 20;
   */
  isCapabilityIteration?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.ComposerCapabilityRequest capabilities = 21;
   */
  capabilities: ComposerCapabilityRequest[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.EditTrailContext edit_trail_contexts = 22;
   */
  editTrailContexts: ConversationMessage_EditTrailContext[] = [];

  /**
   * @generated from field: repeated aiserver.v1.SuggestedCodeBlock suggested_code_blocks = 23;
   */
  suggestedCodeBlocks: SuggestedCodeBlock[] = [];

  /**
   * @generated from field: repeated aiserver.v1.RedDiff diffs_for_compressing_files = 24;
   */
  diffsForCompressingFiles: RedDiff[] = [];

  /**
   * @generated from field: repeated aiserver.v1.LinterErrorsWithoutFileContents multi_file_linter_errors = 25;
   */
  multiFileLinterErrors: LinterErrorsWithoutFileContents[] = [];

  /**
   * @generated from field: repeated aiserver.v1.DiffHistoryData diff_histories = 26;
   */
  diffHistories: DiffHistoryData[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.CodeChunk recently_viewed_files = 27;
   */
  recentlyViewedFiles: ConversationMessage_CodeChunk[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.RecentLocation recent_locations_history = 28;
   */
  recentLocationsHistory: ConversationMessage_RecentLocation[] = [];

  /**
   * @generated from field: bool is_agentic = 29;
   */
  isAgentic = false;

  /**
   * @generated from field: repeated aiserver.v1.ComposerFileDiffHistory file_diff_trajectories = 30;
   */
  fileDiffTrajectories: ComposerFileDiffHistory[] = [];

  /**
   * @generated from field: optional aiserver.v1.ConversationSummary conversation_summary = 31;
   */
  conversationSummary?: ConversationSummary;

  /**
   * @generated from field: bool existed_subsequent_terminal_command = 33;
   */
  existedSubsequentTerminalCommand = false;

  /**
   * @generated from field: bool existed_previous_terminal_command = 34;
   */
  existedPreviousTerminalCommand = false;

  /**
   * @generated from field: repeated aiserver.v1.DocsReference docs_references = 35;
   */
  docsReferences: DocsReference[] = [];

  /**
   * @generated from field: repeated aiserver.v1.WebReference web_references = 36;
   */
  webReferences: WebReference[] = [];

  /**
   * @generated from field: optional aiserver.v1.ViewableGitContext git_context = 37;
   */
  gitContext?: ViewableGitContext;

  /**
   * @generated from field: repeated aiserver.v1.ListDirResult attached_folders_list_dir_results = 38;
   */
  attachedFoldersListDirResults: ListDirResult[] = [];

  /**
   * @generated from field: optional aiserver.v1.ConversationSummary cached_conversation_summary = 39;
   */
  cachedConversationSummary?: ConversationSummary;

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.HumanChange human_changes = 40;
   */
  humanChanges: ConversationMessage_HumanChange[] = [];

  /**
   * @generated from field: bool attached_human_changes = 41;
   */
  attachedHumanChanges = false;

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.ComposerContext summarized_composers = 42;
   */
  summarizedComposers: ConversationMessage_ComposerContext[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CursorRule cursor_rules = 43;
   */
  cursorRules: CursorRule[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ContextPiece context_pieces = 44;
   */
  contextPieces: ContextPiece[] = [];

  /**
   * @generated from field: optional aiserver.v1.ConversationMessage.Thinking thinking = 45;
   */
  thinking?: ConversationMessage_Thinking;

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.Thinking all_thinking_blocks = 46;
   */
  allThinkingBlocks: ConversationMessage_Thinking[] = [];

  /**
   * @generated from field: optional aiserver.v1.StreamUnifiedChatRequest.UnifiedMode unified_mode = 47;
   */
  unifiedMode?: StreamUnifiedChatRequest_UnifiedMode;

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.DiffSinceLastApply diffs_since_last_apply = 48;
   */
  diffsSinceLastApply: ConversationMessage_DiffSinceLastApply[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.DeletedFile deleted_files = 49;
   */
  deletedFiles: ConversationMessage_DeletedFile[] = [];

  /**
   * @generated from field: optional string usage_uuid = 50;
   */
  usageUuid?: string;

  /**
   * @generated from field: repeated aiserver.v1.ClientSideToolV2 supported_tools = 51;
   */
  supportedTools: ClientSideToolV2[] = [];

  /**
   * @generated from field: optional aiserver.v1.CurrentFileLocationData current_file_location_data = 52;
   */
  currentFileLocationData?: CurrentFileLocationData;

  /**
   * @generated from field: optional bool edit_tool_supports_search_and_replace = 53;
   */
  editToolSupportsSearchAndReplace?: boolean;

  /**
   * @generated from field: optional string last_terminal_cwd = 54;
   */
  lastTerminalCwd?: string;

  /**
   * @generated from field: optional bool user_explicitly_asked_to_generate_cursor_rules = 55;
   */
  userExplicitlyAskedToGenerateCursorRules?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.RCPLogEntry console_logs = 56;
   */
  consoleLogs: RCPLogEntry[] = [];

  /**
   * @generated from field: optional string rich_text = 57;
   */
  richText?: string;

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.KnowledgeItem knowledge_items = 58;
   */
  knowledgeItems: ConversationMessage_KnowledgeItem[] = [];

  /**
   * @generated from field: repeated aiserver.v1.RCPUIElementPicked ui_element_picked = 59;
   */
  uiElementPicked: RCPUIElementPicked[] = [];

  /**
   * @generated from field: optional bool user_explicitly_asked_to_add_to_knowledge_base = 60;
   */
  userExplicitlyAskedToAddToKnowledgeBase?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.DocumentationSelection documentation_selections = 61;
   */
  documentationSelections: ConversationMessage_DocumentationSelection[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ComposerExternalLink external_links = 62;
   */
  externalLinks: ComposerExternalLink[] = [];

  /**
   * @generated from field: optional bool use_web = 63;
   */
  useWeb?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.ProjectLayout project_layouts = 64;
   */
  projectLayouts: ProjectLayout[] = [];

  /**
   * @generated from field: optional int32 thinking_duration_ms = 65;
   */
  thinkingDurationMs?: number;

  /**
   * @generated from field: optional aiserver.v1.SubagentReturnCall subagent_return = 66;
   */
  subagentReturn?: SubagentReturnCall;

  /**
   * @generated from field: optional bool is_simple_looping_message = 67;
   */
  isSimpleLoopingMessage?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.ComposerCapabilityContext capability_contexts = 68;
   */
  capabilityContexts: ComposerCapabilityContext[] = [];

  /**
   * @generated from field: optional string checkpoint_commit_hash = 69;
   */
  checkpointCommitHash?: string;

  /**
   * @generated from field: optional string git_status_raw = 70;
   */
  gitStatusRaw?: string;

  /**
   * @generated from field: repeated aiserver.v1.TodoItem todos = 71;
   */
  todos: TodoItem[] = [];

  /**
   * @generated from field: optional bool is_review_edits_followup = 72;
   */
  isReviewEditsFollowup?: boolean;

  /**
   * @generated from field: string request_id = 74;
   */
  requestId = "";

  /**
   * @generated from field: optional aiserver.v1.ConversationMessage.IdeEditorsState ide_editors_state = 73;
   */
  ideEditorsState?: ConversationMessage_IdeEditorsState;

  constructor(data?: PartialMessage<ConversationMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ConversationMessage_MessageType) },
    { no: 3, name: "attached_code_chunks", kind: "message", T: ConversationMessage_CodeChunk, repeated: true },
    { no: 4, name: "codebase_context_chunks", kind: "message", T: CodeBlock, repeated: true },
    { no: 5, name: "commits", kind: "message", T: Commit, repeated: true },
    { no: 6, name: "pull_requests", kind: "message", T: PullRequest, repeated: true },
    { no: 7, name: "git_diffs", kind: "message", T: GitDiff, repeated: true },
    { no: 8, name: "assistant_suggested_diffs", kind: "message", T: SimpleFileDiff, repeated: true },
    { no: 9, name: "interpreter_results", kind: "message", T: InterpreterResult, repeated: true },
    { no: 10, name: "images", kind: "message", T: ImageProto, repeated: true },
    { no: 11, name: "attached_folders", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "approximate_lint_errors", kind: "message", T: ConversationMessage_ApproximateLintError, repeated: true },
    { no: 13, name: "bubble_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 32, name: "server_bubble_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "attached_folders_new", kind: "message", T: FolderInfo, repeated: true },
    { no: 15, name: "lints", kind: "message", T: ConversationMessage_Lints, repeated: true },
    { no: 16, name: "user_responses_to_suggested_code_blocks", kind: "message", T: UserResponseToSuggestedCodeBlock, repeated: true },
    { no: 17, name: "relevant_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 18, name: "tool_results", kind: "message", T: ConversationMessage_ToolResult, repeated: true },
    { no: 19, name: "notepads", kind: "message", T: ConversationMessage_NotepadContext, repeated: true },
    { no: 20, name: "is_capability_iteration", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 21, name: "capabilities", kind: "message", T: ComposerCapabilityRequest, repeated: true },
    { no: 22, name: "edit_trail_contexts", kind: "message", T: ConversationMessage_EditTrailContext, repeated: true },
    { no: 23, name: "suggested_code_blocks", kind: "message", T: SuggestedCodeBlock, repeated: true },
    { no: 24, name: "diffs_for_compressing_files", kind: "message", T: RedDiff, repeated: true },
    { no: 25, name: "multi_file_linter_errors", kind: "message", T: LinterErrorsWithoutFileContents, repeated: true },
    { no: 26, name: "diff_histories", kind: "message", T: DiffHistoryData, repeated: true },
    { no: 27, name: "recently_viewed_files", kind: "message", T: ConversationMessage_CodeChunk, repeated: true },
    { no: 28, name: "recent_locations_history", kind: "message", T: ConversationMessage_RecentLocation, repeated: true },
    { no: 29, name: "is_agentic", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 30, name: "file_diff_trajectories", kind: "message", T: ComposerFileDiffHistory, repeated: true },
    { no: 31, name: "conversation_summary", kind: "message", T: ConversationSummary, opt: true },
    { no: 33, name: "existed_subsequent_terminal_command", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 34, name: "existed_previous_terminal_command", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 35, name: "docs_references", kind: "message", T: DocsReference, repeated: true },
    { no: 36, name: "web_references", kind: "message", T: WebReference, repeated: true },
    { no: 37, name: "git_context", kind: "message", T: ViewableGitContext, opt: true },
    { no: 38, name: "attached_folders_list_dir_results", kind: "message", T: ListDirResult, repeated: true },
    { no: 39, name: "cached_conversation_summary", kind: "message", T: ConversationSummary, opt: true },
    { no: 40, name: "human_changes", kind: "message", T: ConversationMessage_HumanChange, repeated: true },
    { no: 41, name: "attached_human_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 42, name: "summarized_composers", kind: "message", T: ConversationMessage_ComposerContext, repeated: true },
    { no: 43, name: "cursor_rules", kind: "message", T: CursorRule, repeated: true },
    { no: 44, name: "context_pieces", kind: "message", T: ContextPiece, repeated: true },
    { no: 45, name: "thinking", kind: "message", T: ConversationMessage_Thinking, opt: true },
    { no: 46, name: "all_thinking_blocks", kind: "message", T: ConversationMessage_Thinking, repeated: true },
    { no: 47, name: "unified_mode", kind: "enum", T: proto3.getEnumType(StreamUnifiedChatRequest_UnifiedMode), opt: true },
    { no: 48, name: "diffs_since_last_apply", kind: "message", T: ConversationMessage_DiffSinceLastApply, repeated: true },
    { no: 49, name: "deleted_files", kind: "message", T: ConversationMessage_DeletedFile, repeated: true },
    { no: 50, name: "usage_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 51, name: "supported_tools", kind: "enum", T: proto3.getEnumType(ClientSideToolV2), repeated: true },
    { no: 52, name: "current_file_location_data", kind: "message", T: CurrentFileLocationData, opt: true },
    { no: 53, name: "edit_tool_supports_search_and_replace", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 54, name: "last_terminal_cwd", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 55, name: "user_explicitly_asked_to_generate_cursor_rules", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 56, name: "console_logs", kind: "message", T: RCPLogEntry, repeated: true },
    { no: 57, name: "rich_text", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 58, name: "knowledge_items", kind: "message", T: ConversationMessage_KnowledgeItem, repeated: true },
    { no: 59, name: "ui_element_picked", kind: "message", T: RCPUIElementPicked, repeated: true },
    { no: 60, name: "user_explicitly_asked_to_add_to_knowledge_base", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 61, name: "documentation_selections", kind: "message", T: ConversationMessage_DocumentationSelection, repeated: true },
    { no: 62, name: "external_links", kind: "message", T: ComposerExternalLink, repeated: true },
    { no: 63, name: "use_web", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 64, name: "project_layouts", kind: "message", T: ProjectLayout, repeated: true },
    { no: 65, name: "thinking_duration_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 66, name: "subagent_return", kind: "message", T: SubagentReturnCall, opt: true },
    { no: 67, name: "is_simple_looping_message", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 68, name: "capability_contexts", kind: "message", T: ComposerCapabilityContext, repeated: true },
    { no: 69, name: "checkpoint_commit_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 70, name: "git_status_raw", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 71, name: "todos", kind: "message", T: TodoItem, repeated: true },
    { no: 72, name: "is_review_edits_followup", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 74, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 73, name: "ide_editors_state", kind: "message", T: ConversationMessage_IdeEditorsState, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage {
    return new ConversationMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage {
    return new ConversationMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage {
    return new ConversationMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage | PlainMessage<ConversationMessage> | undefined, b: ConversationMessage | PlainMessage<ConversationMessage> | undefined): boolean {
    return proto3.util.equals(ConversationMessage, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.MessageType
 *
 * @generated from enum aiserver.v1.ConversationMessage.MessageType
 */
export enum ConversationMessage_MessageType {
  /**
   * @generated from enum value: MESSAGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MESSAGE_TYPE_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * @generated from enum value: MESSAGE_TYPE_AI = 2;
   */
  AI = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConversationMessage_MessageType)
proto3.util.setEnumType(ConversationMessage_MessageType, "aiserver.v1.ConversationMessage.MessageType", [
  { no: 0, name: "MESSAGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "MESSAGE_TYPE_HUMAN" },
  { no: 2, name: "MESSAGE_TYPE_AI" },
]);

/**
 * aiserver.v1.ConversationMessage.CodeChunk
 *
 * @generated from message aiserver.v1.ConversationMessage.CodeChunk
 */
export class ConversationMessage_CodeChunk extends Message<ConversationMessage_CodeChunk> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: int32 start_line_number = 2;
   */
  startLineNumber = 0;

  /**
   * @generated from field: repeated string lines = 3;
   */
  lines: string[] = [];

  /**
   * @generated from field: optional aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy summarization_strategy = 4;
   */
  summarizationStrategy?: ConversationMessage_CodeChunk_SummarizationStrategy;

  /**
   * @generated from field: string language_identifier = 5;
   */
  languageIdentifier = "";

  /**
   * @generated from field: optional aiserver.v1.ConversationMessage.CodeChunk.Intent intent = 6;
   */
  intent?: ConversationMessage_CodeChunk_Intent;

  /**
   * @generated from field: optional bool is_final_version = 7;
   */
  isFinalVersion?: boolean;

  /**
   * @generated from field: optional bool is_first_version = 8;
   */
  isFirstVersion?: boolean;

  /**
   * @generated from field: optional bool contents_are_missing = 9;
   */
  contentsAreMissing?: boolean;

  /**
   * @generated from field: optional bool is_only_included_from_folder = 10;
   */
  isOnlyIncludedFromFolder?: boolean;

  /**
   * @generated from field: optional aiserver.v1.ConversationMessage.CodeChunk.CodeChunkGitContext code_chunk_git_context = 11;
   */
  codeChunkGitContext?: ConversationMessage_CodeChunk_CodeChunkGitContext;

  constructor(data?: PartialMessage<ConversationMessage_CodeChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.CodeChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "summarization_strategy", kind: "enum", T: proto3.getEnumType(ConversationMessage_CodeChunk_SummarizationStrategy), opt: true },
    { no: 5, name: "language_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "intent", kind: "enum", T: proto3.getEnumType(ConversationMessage_CodeChunk_Intent), opt: true },
    { no: 7, name: "is_final_version", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "is_first_version", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "contents_are_missing", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 10, name: "is_only_included_from_folder", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "code_chunk_git_context", kind: "message", T: ConversationMessage_CodeChunk_CodeChunkGitContext, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_CodeChunk {
    return new ConversationMessage_CodeChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_CodeChunk {
    return new ConversationMessage_CodeChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_CodeChunk {
    return new ConversationMessage_CodeChunk().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_CodeChunk | PlainMessage<ConversationMessage_CodeChunk> | undefined, b: ConversationMessage_CodeChunk | PlainMessage<ConversationMessage_CodeChunk> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_CodeChunk, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.CodeChunk.Intent
 *
 * @generated from enum aiserver.v1.ConversationMessage.CodeChunk.Intent
 */
export enum ConversationMessage_CodeChunk_Intent {
  /**
   * @generated from enum value: INTENT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTENT_COMPOSER_FILE = 1;
   */
  COMPOSER_FILE = 1,

  /**
   * @generated from enum value: INTENT_COMPRESSED_COMPOSER_FILE = 2;
   */
  COMPRESSED_COMPOSER_FILE = 2,

  /**
   * @generated from enum value: INTENT_RECENTLY_VIEWED_FILE = 3;
   */
  RECENTLY_VIEWED_FILE = 3,

  /**
   * @generated from enum value: INTENT_OUTLINE = 4;
   */
  OUTLINE = 4,

  /**
   * @generated from enum value: INTENT_MENTIONED_FILE = 5;
   */
  MENTIONED_FILE = 5,

  /**
   * @generated from enum value: INTENT_CODE_SELECTION = 6;
   */
  CODE_SELECTION = 6,

  /**
   * @generated from enum value: INTENT_AI_EDITED_FILE = 7;
   */
  AI_EDITED_FILE = 7,

  /**
   * @generated from enum value: INTENT_VISIBLE_FILE = 8;
   */
  VISIBLE_FILE = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(ConversationMessage_CodeChunk_Intent)
proto3.util.setEnumType(ConversationMessage_CodeChunk_Intent, "aiserver.v1.ConversationMessage.CodeChunk.Intent", [
  { no: 0, name: "INTENT_UNSPECIFIED" },
  { no: 1, name: "INTENT_COMPOSER_FILE" },
  { no: 2, name: "INTENT_COMPRESSED_COMPOSER_FILE" },
  { no: 3, name: "INTENT_RECENTLY_VIEWED_FILE" },
  { no: 4, name: "INTENT_OUTLINE" },
  { no: 5, name: "INTENT_MENTIONED_FILE" },
  { no: 6, name: "INTENT_CODE_SELECTION" },
  { no: 7, name: "INTENT_AI_EDITED_FILE" },
  { no: 8, name: "INTENT_VISIBLE_FILE" },
]);

/**
 * aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy
 *
 * @generated from enum aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy
 */
export enum ConversationMessage_CodeChunk_SummarizationStrategy {
  /**
   * @generated from enum value: SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED = 0;
   */
  NONE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SUMMARIZATION_STRATEGY_SUMMARIZED = 1;
   */
  SUMMARIZED = 1,

  /**
   * @generated from enum value: SUMMARIZATION_STRATEGY_EMBEDDED = 2;
   */
  EMBEDDED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConversationMessage_CodeChunk_SummarizationStrategy)
proto3.util.setEnumType(ConversationMessage_CodeChunk_SummarizationStrategy, "aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy", [
  { no: 0, name: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED" },
  { no: 1, name: "SUMMARIZATION_STRATEGY_SUMMARIZED" },
  { no: 2, name: "SUMMARIZATION_STRATEGY_EMBEDDED" },
]);

/**
 * aiserver.v1.ConversationMessage.CodeChunk.CodeChunkGitContext
 *
 * @generated from message aiserver.v1.ConversationMessage.CodeChunk.CodeChunkGitContext
 */
export class ConversationMessage_CodeChunk_CodeChunkGitContext extends Message<ConversationMessage_CodeChunk_CodeChunkGitContext> {
  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.CodeChunk.CodeChunkGitContext.CodeChunkGitInfo git_info = 1;
   */
  gitInfo: ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo[] = [];

  constructor(data?: PartialMessage<ConversationMessage_CodeChunk_CodeChunkGitContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.CodeChunk.CodeChunkGitContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git_info", kind: "message", T: ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_CodeChunk_CodeChunkGitContext {
    return new ConversationMessage_CodeChunk_CodeChunkGitContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_CodeChunk_CodeChunkGitContext {
    return new ConversationMessage_CodeChunk_CodeChunkGitContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_CodeChunk_CodeChunkGitContext {
    return new ConversationMessage_CodeChunk_CodeChunkGitContext().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_CodeChunk_CodeChunkGitContext | PlainMessage<ConversationMessage_CodeChunk_CodeChunkGitContext> | undefined, b: ConversationMessage_CodeChunk_CodeChunkGitContext | PlainMessage<ConversationMessage_CodeChunk_CodeChunkGitContext> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_CodeChunk_CodeChunkGitContext, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.CodeChunk.CodeChunkGitContext.CodeChunkGitInfo
 *
 * @generated from message aiserver.v1.ConversationMessage.CodeChunk.CodeChunkGitContext.CodeChunkGitInfo
 */
export class ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo extends Message<ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo> {
  /**
   * @generated from field: string commit = 1;
   */
  commit = "";

  /**
   * @generated from field: string author = 2;
   */
  author = "";

  /**
   * @generated from field: string date = 3;
   */
  date = "";

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.CodeChunk.CodeChunkGitContext.CodeChunkGitInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo {
    return new ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo {
    return new ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo {
    return new ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo | PlainMessage<ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo> | undefined, b: ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo | PlainMessage<ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_CodeChunk_CodeChunkGitContext_CodeChunkGitInfo, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.ToolResult
 *
 * @generated from message aiserver.v1.ConversationMessage.ToolResult
 */
export class ConversationMessage_ToolResult extends Message<ConversationMessage_ToolResult> {
  /**
   * @generated from field: string tool_call_id = 1;
   */
  toolCallId = "";

  /**
   * @generated from field: string tool_name = 2;
   */
  toolName = "";

  /**
   * @generated from field: uint32 tool_index = 3;
   */
  toolIndex = 0;

  /**
   * @generated from field: optional string model_call_id = 12;
   */
  modelCallId?: string;

  /**
   * @generated from field: string args = 4;
   */
  args = "";

  /**
   * @generated from field: string raw_args = 5;
   */
  rawArgs = "";

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.CodeChunk attached_code_chunks = 6;
   */
  attachedCodeChunks: ConversationMessage_CodeChunk[] = [];

  /**
   * @generated from field: optional string content = 7;
   */
  content?: string;

  /**
   * @generated from field: aiserver.v1.ClientSideToolV2Result result = 8;
   */
  result?: ClientSideToolV2Result;

  /**
   * @generated from field: optional aiserver.v1.ToolResultError error = 9;
   */
  error?: ToolResultError;

  /**
   * @generated from field: repeated aiserver.v1.ImageProto images = 10;
   */
  images: ImageProto[] = [];

  /**
   * @generated from field: optional aiserver.v1.ClientSideToolV2Call tool_call = 11;
   */
  toolCall?: ClientSideToolV2Call;

  constructor(data?: PartialMessage<ConversationMessage_ToolResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.ToolResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool_call_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tool_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tool_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "model_call_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "raw_args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "attached_code_chunks", kind: "message", T: ConversationMessage_CodeChunk, repeated: true },
    { no: 7, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "result", kind: "message", T: ClientSideToolV2Result },
    { no: 9, name: "error", kind: "message", T: ToolResultError, opt: true },
    { no: 10, name: "images", kind: "message", T: ImageProto, repeated: true },
    { no: 11, name: "tool_call", kind: "message", T: ClientSideToolV2Call, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_ToolResult {
    return new ConversationMessage_ToolResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_ToolResult {
    return new ConversationMessage_ToolResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_ToolResult {
    return new ConversationMessage_ToolResult().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_ToolResult | PlainMessage<ConversationMessage_ToolResult> | undefined, b: ConversationMessage_ToolResult | PlainMessage<ConversationMessage_ToolResult> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_ToolResult, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.MultiRangeCodeChunk
 *
 * @generated from message aiserver.v1.ConversationMessage.MultiRangeCodeChunk
 */
export class ConversationMessage_MultiRangeCodeChunk extends Message<ConversationMessage_MultiRangeCodeChunk> {
  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.MultiRangeCodeChunk.RangeWithPriority ranges = 1;
   */
  ranges: ConversationMessage_MultiRangeCodeChunk_RangeWithPriority[] = [];

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: string relative_workspace_path = 3;
   */
  relativeWorkspacePath = "";

  constructor(data?: PartialMessage<ConversationMessage_MultiRangeCodeChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.MultiRangeCodeChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ranges", kind: "message", T: ConversationMessage_MultiRangeCodeChunk_RangeWithPriority, repeated: true },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_MultiRangeCodeChunk {
    return new ConversationMessage_MultiRangeCodeChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_MultiRangeCodeChunk {
    return new ConversationMessage_MultiRangeCodeChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_MultiRangeCodeChunk {
    return new ConversationMessage_MultiRangeCodeChunk().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_MultiRangeCodeChunk | PlainMessage<ConversationMessage_MultiRangeCodeChunk> | undefined, b: ConversationMessage_MultiRangeCodeChunk | PlainMessage<ConversationMessage_MultiRangeCodeChunk> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_MultiRangeCodeChunk, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.MultiRangeCodeChunk.RangeWithPriority
 *
 * @generated from message aiserver.v1.ConversationMessage.MultiRangeCodeChunk.RangeWithPriority
 */
export class ConversationMessage_MultiRangeCodeChunk_RangeWithPriority extends Message<ConversationMessage_MultiRangeCodeChunk_RangeWithPriority> {
  /**
   * @generated from field: aiserver.v1.SimplestRange range = 1;
   */
  range?: SimplestRange;

  /**
   * @generated from field: double priority = 2;
   */
  priority = 0;

  constructor(data?: PartialMessage<ConversationMessage_MultiRangeCodeChunk_RangeWithPriority>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.MultiRangeCodeChunk.RangeWithPriority";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "range", kind: "message", T: SimplestRange },
    { no: 2, name: "priority", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_MultiRangeCodeChunk_RangeWithPriority {
    return new ConversationMessage_MultiRangeCodeChunk_RangeWithPriority().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_MultiRangeCodeChunk_RangeWithPriority {
    return new ConversationMessage_MultiRangeCodeChunk_RangeWithPriority().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_MultiRangeCodeChunk_RangeWithPriority {
    return new ConversationMessage_MultiRangeCodeChunk_RangeWithPriority().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_MultiRangeCodeChunk_RangeWithPriority | PlainMessage<ConversationMessage_MultiRangeCodeChunk_RangeWithPriority> | undefined, b: ConversationMessage_MultiRangeCodeChunk_RangeWithPriority | PlainMessage<ConversationMessage_MultiRangeCodeChunk_RangeWithPriority> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_MultiRangeCodeChunk_RangeWithPriority, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.NotepadContext
 *
 * @generated from message aiserver.v1.ConversationMessage.NotepadContext
 */
export class ConversationMessage_NotepadContext extends Message<ConversationMessage_NotepadContext> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.CodeChunk attached_code_chunks = 3;
   */
  attachedCodeChunks: ConversationMessage_CodeChunk[] = [];

  /**
   * @generated from field: repeated string attached_folders = 4;
   */
  attachedFolders: string[] = [];

  /**
   * @generated from field: repeated aiserver.v1.Commit commits = 5;
   */
  commits: Commit[] = [];

  /**
   * @generated from field: repeated aiserver.v1.PullRequest pull_requests = 6;
   */
  pullRequests: PullRequest[] = [];

  /**
   * @generated from field: repeated aiserver.v1.GitDiff git_diffs = 7;
   */
  gitDiffs: GitDiff[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ImageProto images = 8;
   */
  images: ImageProto[] = [];

  constructor(data?: PartialMessage<ConversationMessage_NotepadContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.NotepadContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "attached_code_chunks", kind: "message", T: ConversationMessage_CodeChunk, repeated: true },
    { no: 4, name: "attached_folders", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "commits", kind: "message", T: Commit, repeated: true },
    { no: 6, name: "pull_requests", kind: "message", T: PullRequest, repeated: true },
    { no: 7, name: "git_diffs", kind: "message", T: GitDiff, repeated: true },
    { no: 8, name: "images", kind: "message", T: ImageProto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_NotepadContext {
    return new ConversationMessage_NotepadContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_NotepadContext {
    return new ConversationMessage_NotepadContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_NotepadContext {
    return new ConversationMessage_NotepadContext().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_NotepadContext | PlainMessage<ConversationMessage_NotepadContext> | undefined, b: ConversationMessage_NotepadContext | PlainMessage<ConversationMessage_NotepadContext> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_NotepadContext, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.ComposerContext
 *
 * @generated from message aiserver.v1.ConversationMessage.ComposerContext
 */
export class ConversationMessage_ComposerContext extends Message<ConversationMessage_ComposerContext> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: aiserver.v1.ConversationSummary conversation_summary = 2;
   */
  conversationSummary?: ConversationSummary;

  constructor(data?: PartialMessage<ConversationMessage_ComposerContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.ComposerContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "conversation_summary", kind: "message", T: ConversationSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_ComposerContext {
    return new ConversationMessage_ComposerContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_ComposerContext {
    return new ConversationMessage_ComposerContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_ComposerContext {
    return new ConversationMessage_ComposerContext().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_ComposerContext | PlainMessage<ConversationMessage_ComposerContext> | undefined, b: ConversationMessage_ComposerContext | PlainMessage<ConversationMessage_ComposerContext> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_ComposerContext, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.EditLocation
 *
 * @generated from message aiserver.v1.ConversationMessage.EditLocation
 */
export class ConversationMessage_EditLocation extends Message<ConversationMessage_EditLocation> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: aiserver.v1.SimplestRange range = 3;
   */
  range?: SimplestRange;

  /**
   * @generated from field: aiserver.v1.SimplestRange initial_range = 4;
   */
  initialRange?: SimplestRange;

  /**
   * @generated from field: string context_lines = 5;
   */
  contextLines = "";

  /**
   * @generated from field: string text = 6;
   */
  text = "";

  /**
   * @generated from field: aiserver.v1.SimplestRange text_range = 7;
   */
  textRange?: SimplestRange;

  constructor(data?: PartialMessage<ConversationMessage_EditLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.EditLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "range", kind: "message", T: SimplestRange },
    { no: 4, name: "initial_range", kind: "message", T: SimplestRange },
    { no: 5, name: "context_lines", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "text_range", kind: "message", T: SimplestRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_EditLocation {
    return new ConversationMessage_EditLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_EditLocation {
    return new ConversationMessage_EditLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_EditLocation {
    return new ConversationMessage_EditLocation().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_EditLocation | PlainMessage<ConversationMessage_EditLocation> | undefined, b: ConversationMessage_EditLocation | PlainMessage<ConversationMessage_EditLocation> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_EditLocation, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.EditTrailContext
 *
 * @generated from message aiserver.v1.ConversationMessage.EditTrailContext
 */
export class ConversationMessage_EditTrailContext extends Message<ConversationMessage_EditTrailContext> {
  /**
   * @generated from field: string unique_id = 1;
   */
  uniqueId = "";

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.EditLocation edit_trail_sorted = 2;
   */
  editTrailSorted: ConversationMessage_EditLocation[] = [];

  constructor(data?: PartialMessage<ConversationMessage_EditTrailContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.EditTrailContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "edit_trail_sorted", kind: "message", T: ConversationMessage_EditLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_EditTrailContext {
    return new ConversationMessage_EditTrailContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_EditTrailContext {
    return new ConversationMessage_EditTrailContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_EditTrailContext {
    return new ConversationMessage_EditTrailContext().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_EditTrailContext | PlainMessage<ConversationMessage_EditTrailContext> | undefined, b: ConversationMessage_EditTrailContext | PlainMessage<ConversationMessage_EditTrailContext> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_EditTrailContext, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.ApproximateLintError
 *
 * @generated from message aiserver.v1.ConversationMessage.ApproximateLintError
 */
export class ConversationMessage_ApproximateLintError extends Message<ConversationMessage_ApproximateLintError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: int32 start_line = 3;
   */
  startLine = 0;

  /**
   * @generated from field: int32 end_line = 4;
   */
  endLine = 0;

  /**
   * @generated from field: int32 start_column = 5;
   */
  startColumn = 0;

  /**
   * @generated from field: int32 end_column = 6;
   */
  endColumn = 0;

  constructor(data?: PartialMessage<ConversationMessage_ApproximateLintError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.ApproximateLintError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "end_line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "start_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "end_column", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_ApproximateLintError {
    return new ConversationMessage_ApproximateLintError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_ApproximateLintError {
    return new ConversationMessage_ApproximateLintError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_ApproximateLintError {
    return new ConversationMessage_ApproximateLintError().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_ApproximateLintError | PlainMessage<ConversationMessage_ApproximateLintError> | undefined, b: ConversationMessage_ApproximateLintError | PlainMessage<ConversationMessage_ApproximateLintError> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_ApproximateLintError, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.Lints
 *
 * @generated from message aiserver.v1.ConversationMessage.Lints
 */
export class ConversationMessage_Lints extends Message<ConversationMessage_Lints> {
  /**
   * @generated from field: aiserver.v1.GetLintsForChangeResponse lints = 1;
   */
  lints?: GetLintsForChangeResponse;

  /**
   * @generated from field: string chat_codeblock_model_value = 2;
   */
  chatCodeblockModelValue = "";

  constructor(data?: PartialMessage<ConversationMessage_Lints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.Lints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lints", kind: "message", T: GetLintsForChangeResponse },
    { no: 2, name: "chat_codeblock_model_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_Lints {
    return new ConversationMessage_Lints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_Lints {
    return new ConversationMessage_Lints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_Lints {
    return new ConversationMessage_Lints().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_Lints | PlainMessage<ConversationMessage_Lints> | undefined, b: ConversationMessage_Lints | PlainMessage<ConversationMessage_Lints> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_Lints, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.RecentLocation
 *
 * @generated from message aiserver.v1.ConversationMessage.RecentLocation
 */
export class ConversationMessage_RecentLocation extends Message<ConversationMessage_RecentLocation> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: int32 line_number = 2;
   */
  lineNumber = 0;

  constructor(data?: PartialMessage<ConversationMessage_RecentLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.RecentLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_RecentLocation {
    return new ConversationMessage_RecentLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_RecentLocation {
    return new ConversationMessage_RecentLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_RecentLocation {
    return new ConversationMessage_RecentLocation().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_RecentLocation | PlainMessage<ConversationMessage_RecentLocation> | undefined, b: ConversationMessage_RecentLocation | PlainMessage<ConversationMessage_RecentLocation> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_RecentLocation, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.RenderedDiff
 *
 * @generated from message aiserver.v1.ConversationMessage.RenderedDiff
 */
export class ConversationMessage_RenderedDiff extends Message<ConversationMessage_RenderedDiff> {
  /**
   * @generated from field: int32 start_line_number = 1;
   */
  startLineNumber = 0;

  /**
   * @generated from field: int32 end_line_number_exclusive = 2;
   */
  endLineNumberExclusive = 0;

  /**
   * @generated from field: repeated string before_context_lines = 3;
   */
  beforeContextLines: string[] = [];

  /**
   * @generated from field: repeated string removed_lines = 4;
   */
  removedLines: string[] = [];

  /**
   * @generated from field: repeated string added_lines = 5;
   */
  addedLines: string[] = [];

  /**
   * @generated from field: repeated string after_context_lines = 6;
   */
  afterContextLines: string[] = [];

  constructor(data?: PartialMessage<ConversationMessage_RenderedDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.RenderedDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_line_number_exclusive", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "before_context_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "removed_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "added_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "after_context_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_RenderedDiff {
    return new ConversationMessage_RenderedDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_RenderedDiff {
    return new ConversationMessage_RenderedDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_RenderedDiff {
    return new ConversationMessage_RenderedDiff().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_RenderedDiff | PlainMessage<ConversationMessage_RenderedDiff> | undefined, b: ConversationMessage_RenderedDiff | PlainMessage<ConversationMessage_RenderedDiff> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_RenderedDiff, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.HumanChange
 *
 * @generated from message aiserver.v1.ConversationMessage.HumanChange
 */
export class ConversationMessage_HumanChange extends Message<ConversationMessage_HumanChange> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.RenderedDiff rendered_diffs = 2;
   */
  renderedDiffs: ConversationMessage_RenderedDiff[] = [];

  constructor(data?: PartialMessage<ConversationMessage_HumanChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.HumanChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rendered_diffs", kind: "message", T: ConversationMessage_RenderedDiff, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_HumanChange {
    return new ConversationMessage_HumanChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_HumanChange {
    return new ConversationMessage_HumanChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_HumanChange {
    return new ConversationMessage_HumanChange().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_HumanChange | PlainMessage<ConversationMessage_HumanChange> | undefined, b: ConversationMessage_HumanChange | PlainMessage<ConversationMessage_HumanChange> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_HumanChange, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.Thinking
 *
 * @generated from message aiserver.v1.ConversationMessage.Thinking
 */
export class ConversationMessage_Thinking extends Message<ConversationMessage_Thinking> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: string signature = 2;
   */
  signature = "";

  /**
   * @generated from field: string redacted_thinking = 3;
   */
  redactedThinking = "";

  /**
   * @generated from field: bool is_last_thinking_chunk = 4;
   */
  isLastThinkingChunk = false;

  constructor(data?: PartialMessage<ConversationMessage_Thinking>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.Thinking";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "redacted_thinking", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_last_thinking_chunk", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_Thinking {
    return new ConversationMessage_Thinking().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_Thinking {
    return new ConversationMessage_Thinking().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_Thinking {
    return new ConversationMessage_Thinking().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_Thinking | PlainMessage<ConversationMessage_Thinking> | undefined, b: ConversationMessage_Thinking | PlainMessage<ConversationMessage_Thinking> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_Thinking, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.DiffSinceLastApply
 *
 * @generated from message aiserver.v1.ConversationMessage.DiffSinceLastApply
 */
export class ConversationMessage_DiffSinceLastApply extends Message<ConversationMessage_DiffSinceLastApply> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: optional aiserver.v1.EditFileResult.FileDiff diff = 2;
   */
  diff?: EditFileResult_FileDiff;

  /**
   * @generated from field: optional bool is_accepted = 4;
   */
  isAccepted?: boolean;

  /**
   * @generated from field: optional bool is_rejected = 5;
   */
  isRejected?: boolean;

  /**
   * @generated from field: optional int32 last_apply_chained_from_n_human_messages_ago = 6;
   */
  lastApplyChainedFromNHumanMessagesAgo?: number;

  constructor(data?: PartialMessage<ConversationMessage_DiffSinceLastApply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.DiffSinceLastApply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "diff", kind: "message", T: EditFileResult_FileDiff, opt: true },
    { no: 4, name: "is_accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "is_rejected", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "last_apply_chained_from_n_human_messages_ago", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_DiffSinceLastApply {
    return new ConversationMessage_DiffSinceLastApply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_DiffSinceLastApply {
    return new ConversationMessage_DiffSinceLastApply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_DiffSinceLastApply {
    return new ConversationMessage_DiffSinceLastApply().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_DiffSinceLastApply | PlainMessage<ConversationMessage_DiffSinceLastApply> | undefined, b: ConversationMessage_DiffSinceLastApply | PlainMessage<ConversationMessage_DiffSinceLastApply> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_DiffSinceLastApply, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.DeletedFile
 *
 * @generated from message aiserver.v1.ConversationMessage.DeletedFile
 */
export class ConversationMessage_DeletedFile extends Message<ConversationMessage_DeletedFile> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  constructor(data?: PartialMessage<ConversationMessage_DeletedFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.DeletedFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_DeletedFile {
    return new ConversationMessage_DeletedFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_DeletedFile {
    return new ConversationMessage_DeletedFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_DeletedFile {
    return new ConversationMessage_DeletedFile().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_DeletedFile | PlainMessage<ConversationMessage_DeletedFile> | undefined, b: ConversationMessage_DeletedFile | PlainMessage<ConversationMessage_DeletedFile> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_DeletedFile, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.KnowledgeItem
 *
 * @generated from message aiserver.v1.ConversationMessage.KnowledgeItem
 */
export class ConversationMessage_KnowledgeItem extends Message<ConversationMessage_KnowledgeItem> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string knowledge = 2;
   */
  knowledge = "";

  /**
   * @generated from field: string knowledge_id = 3;
   */
  knowledgeId = "";

  /**
   * @generated from field: bool is_generated = 4;
   */
  isGenerated = false;

  constructor(data?: PartialMessage<ConversationMessage_KnowledgeItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.KnowledgeItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "knowledge", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "knowledge_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_generated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_KnowledgeItem {
    return new ConversationMessage_KnowledgeItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_KnowledgeItem {
    return new ConversationMessage_KnowledgeItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_KnowledgeItem {
    return new ConversationMessage_KnowledgeItem().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_KnowledgeItem | PlainMessage<ConversationMessage_KnowledgeItem> | undefined, b: ConversationMessage_KnowledgeItem | PlainMessage<ConversationMessage_KnowledgeItem> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_KnowledgeItem, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.DocumentationSelection
 *
 * @generated from message aiserver.v1.ConversationMessage.DocumentationSelection
 */
export class ConversationMessage_DocumentationSelection extends Message<ConversationMessage_DocumentationSelection> {
  /**
   * @generated from field: string doc_id = 1;
   */
  docId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ConversationMessage_DocumentationSelection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.DocumentationSelection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_DocumentationSelection {
    return new ConversationMessage_DocumentationSelection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_DocumentationSelection {
    return new ConversationMessage_DocumentationSelection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_DocumentationSelection {
    return new ConversationMessage_DocumentationSelection().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_DocumentationSelection | PlainMessage<ConversationMessage_DocumentationSelection> | undefined, b: ConversationMessage_DocumentationSelection | PlainMessage<ConversationMessage_DocumentationSelection> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_DocumentationSelection, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.IdeEditorsState
 *
 * @generated from message aiserver.v1.ConversationMessage.IdeEditorsState
 */
export class ConversationMessage_IdeEditorsState extends Message<ConversationMessage_IdeEditorsState> {
  /**
   * @generated from field: bool is_pill_displayed = 1;
   */
  isPillDisplayed = false;

  /**
   * @generated from field: repeated string visible_file_paths = 2;
   */
  visibleFilePaths: string[] = [];

  /**
   * @generated from field: repeated string recently_viewed_file_paths = 3;
   */
  recentlyViewedFilePaths: string[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.IdeEditorsState.File visible_files = 4;
   */
  visibleFiles: ConversationMessage_IdeEditorsState_File[] = [];

  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage.IdeEditorsState.File recently_viewed_files = 5;
   */
  recentlyViewedFiles: ConversationMessage_IdeEditorsState_File[] = [];

  constructor(data?: PartialMessage<ConversationMessage_IdeEditorsState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.IdeEditorsState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_pill_displayed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "visible_file_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "recently_viewed_file_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "visible_files", kind: "message", T: ConversationMessage_IdeEditorsState_File, repeated: true },
    { no: 5, name: "recently_viewed_files", kind: "message", T: ConversationMessage_IdeEditorsState_File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_IdeEditorsState {
    return new ConversationMessage_IdeEditorsState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_IdeEditorsState {
    return new ConversationMessage_IdeEditorsState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_IdeEditorsState {
    return new ConversationMessage_IdeEditorsState().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_IdeEditorsState | PlainMessage<ConversationMessage_IdeEditorsState> | undefined, b: ConversationMessage_IdeEditorsState | PlainMessage<ConversationMessage_IdeEditorsState> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_IdeEditorsState, a, b);
  }
}

/**
 * aiserver.v1.ConversationMessage.IdeEditorsState.File
 *
 * @generated from message aiserver.v1.ConversationMessage.IdeEditorsState.File
 */
export class ConversationMessage_IdeEditorsState_File extends Message<ConversationMessage_IdeEditorsState_File> {
  /**
   * @generated from field: string relative_path = 1;
   */
  relativePath = "";

  /**
   * @generated from field: optional bool is_currently_focused = 2;
   */
  isCurrentlyFocused?: boolean;

  /**
   * @generated from field: optional int32 current_line_number = 3;
   */
  currentLineNumber?: number;

  /**
   * @generated from field: optional string current_line_text = 4;
   */
  currentLineText?: string;

  /**
   * @generated from field: optional int32 line_count = 5;
   */
  lineCount?: number;

  constructor(data?: PartialMessage<ConversationMessage_IdeEditorsState_File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ConversationMessage.IdeEditorsState.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_currently_focused", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "current_line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "current_line_text", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "line_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationMessage_IdeEditorsState_File {
    return new ConversationMessage_IdeEditorsState_File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationMessage_IdeEditorsState_File {
    return new ConversationMessage_IdeEditorsState_File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationMessage_IdeEditorsState_File {
    return new ConversationMessage_IdeEditorsState_File().fromJsonString(jsonString, options);
  }

  static equals(a: ConversationMessage_IdeEditorsState_File | PlainMessage<ConversationMessage_IdeEditorsState_File> | undefined, b: ConversationMessage_IdeEditorsState_File | PlainMessage<ConversationMessage_IdeEditorsState_File> | undefined): boolean {
    return proto3.util.equals(ConversationMessage_IdeEditorsState_File, a, b);
  }
}

/**
 * aiserver.v1.CurrentFileLocationData
 *
 * @generated from message aiserver.v1.CurrentFileLocationData
 */
export class CurrentFileLocationData extends Message<CurrentFileLocationData> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: int32 line_number = 2;
   */
  lineNumber = 0;

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  constructor(data?: PartialMessage<CurrentFileLocationData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CurrentFileLocationData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentFileLocationData {
    return new CurrentFileLocationData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentFileLocationData {
    return new CurrentFileLocationData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentFileLocationData {
    return new CurrentFileLocationData().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentFileLocationData | PlainMessage<CurrentFileLocationData> | undefined, b: CurrentFileLocationData | PlainMessage<CurrentFileLocationData> | undefined): boolean {
    return proto3.util.equals(CurrentFileLocationData, a, b);
  }
}

/**
 * aiserver.v1.FolderInfo
 *
 * @generated from message aiserver.v1.FolderInfo
 */
export class FolderInfo extends Message<FolderInfo> {
  /**
   * @generated from field: string relative_path = 1;
   */
  relativePath = "";

  /**
   * @generated from field: repeated aiserver.v1.FolderFileInfo files = 2;
   */
  files: FolderFileInfo[] = [];

  constructor(data?: PartialMessage<FolderInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FolderInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "files", kind: "message", T: FolderFileInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FolderInfo {
    return new FolderInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FolderInfo {
    return new FolderInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FolderInfo {
    return new FolderInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FolderInfo | PlainMessage<FolderInfo> | undefined, b: FolderInfo | PlainMessage<FolderInfo> | undefined): boolean {
    return proto3.util.equals(FolderInfo, a, b);
  }
}

/**
 * aiserver.v1.FolderFileInfo
 *
 * @generated from message aiserver.v1.FolderFileInfo
 */
export class FolderFileInfo extends Message<FolderFileInfo> {
  /**
   * @generated from field: string relative_path = 1;
   */
  relativePath = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: bool truncated = 3;
   */
  truncated = false;

  /**
   * @generated from field: float score = 4;
   */
  score = 0;

  constructor(data?: PartialMessage<FolderFileInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FolderFileInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "truncated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FolderFileInfo {
    return new FolderFileInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FolderFileInfo {
    return new FolderFileInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FolderFileInfo {
    return new FolderFileInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FolderFileInfo | PlainMessage<FolderFileInfo> | undefined, b: FolderFileInfo | PlainMessage<FolderFileInfo> | undefined): boolean {
    return proto3.util.equals(FolderFileInfo, a, b);
  }
}

/**
 * aiserver.v1.InterpreterResult
 *
 * @generated from message aiserver.v1.InterpreterResult
 */
export class InterpreterResult extends Message<InterpreterResult> {
  /**
   * @generated from field: string output = 1;
   */
  output = "";

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  constructor(data?: PartialMessage<InterpreterResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.InterpreterResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterpreterResult {
    return new InterpreterResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterpreterResult {
    return new InterpreterResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterpreterResult {
    return new InterpreterResult().fromJsonString(jsonString, options);
  }

  static equals(a: InterpreterResult | PlainMessage<InterpreterResult> | undefined, b: InterpreterResult | PlainMessage<InterpreterResult> | undefined): boolean {
    return proto3.util.equals(InterpreterResult, a, b);
  }
}

/**
 * aiserver.v1.SimpleFileDiff
 *
 * @generated from message aiserver.v1.SimpleFileDiff
 */
export class SimpleFileDiff extends Message<SimpleFileDiff> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated aiserver.v1.SimpleFileDiff.Chunk chunks = 3;
   */
  chunks: SimpleFileDiff_Chunk[] = [];

  constructor(data?: PartialMessage<SimpleFileDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SimpleFileDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chunks", kind: "message", T: SimpleFileDiff_Chunk, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleFileDiff {
    return new SimpleFileDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleFileDiff {
    return new SimpleFileDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleFileDiff {
    return new SimpleFileDiff().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleFileDiff | PlainMessage<SimpleFileDiff> | undefined, b: SimpleFileDiff | PlainMessage<SimpleFileDiff> | undefined): boolean {
    return proto3.util.equals(SimpleFileDiff, a, b);
  }
}

/**
 * aiserver.v1.SimpleFileDiff.Chunk
 *
 * @generated from message aiserver.v1.SimpleFileDiff.Chunk
 */
export class SimpleFileDiff_Chunk extends Message<SimpleFileDiff_Chunk> {
  /**
   * @generated from field: repeated string old_lines = 1;
   */
  oldLines: string[] = [];

  /**
   * @generated from field: repeated string new_lines = 2;
   */
  newLines: string[] = [];

  /**
   * @generated from field: aiserver.v1.LineRange old_range = 3;
   */
  oldRange?: LineRange;

  /**
   * @generated from field: aiserver.v1.LineRange new_range = 4;
   */
  newRange?: LineRange;

  constructor(data?: PartialMessage<SimpleFileDiff_Chunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SimpleFileDiff.Chunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "old_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "new_lines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "old_range", kind: "message", T: LineRange },
    { no: 4, name: "new_range", kind: "message", T: LineRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleFileDiff_Chunk {
    return new SimpleFileDiff_Chunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleFileDiff_Chunk {
    return new SimpleFileDiff_Chunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleFileDiff_Chunk {
    return new SimpleFileDiff_Chunk().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleFileDiff_Chunk | PlainMessage<SimpleFileDiff_Chunk> | undefined, b: SimpleFileDiff_Chunk | PlainMessage<SimpleFileDiff_Chunk> | undefined): boolean {
    return proto3.util.equals(SimpleFileDiff_Chunk, a, b);
  }
}

/**
 * aiserver.v1.Commit
 *
 * @generated from message aiserver.v1.Commit
 */
export class Commit extends Message<Commit> {
  /**
   * @generated from field: string sha = 1;
   */
  sha = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: repeated aiserver.v1.FileDiff diff = 4;
   */
  diff: FileDiff[] = [];

  /**
   * @generated from field: string author = 5;
   */
  author = "";

  /**
   * @generated from field: string date = 6;
   */
  date = "";

  constructor(data?: PartialMessage<Commit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.Commit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "diff", kind: "message", T: FileDiff, repeated: true },
    { no: 5, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Commit {
    return new Commit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJsonString(jsonString, options);
  }

  static equals(a: Commit | PlainMessage<Commit> | undefined, b: Commit | PlainMessage<Commit> | undefined): boolean {
    return proto3.util.equals(Commit, a, b);
  }
}

/**
 * aiserver.v1.PullRequest
 *
 * @generated from message aiserver.v1.PullRequest
 */
export class PullRequest extends Message<PullRequest> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * @generated from field: repeated aiserver.v1.FileDiff diff = 3;
   */
  diff: FileDiff[] = [];

  /**
   * @generated from field: int64 id = 4;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 number = 5;
   */
  number = protoInt64.zero;

  constructor(data?: PartialMessage<PullRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.PullRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "diff", kind: "message", T: FileDiff, repeated: true },
    { no: 4, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullRequest {
    return new PullRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullRequest {
    return new PullRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullRequest {
    return new PullRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullRequest | PlainMessage<PullRequest> | undefined, b: PullRequest | PlainMessage<PullRequest> | undefined): boolean {
    return proto3.util.equals(PullRequest, a, b);
  }
}

/**
 * aiserver.v1.SuggestedCodeBlock
 *
 * @generated from message aiserver.v1.SuggestedCodeBlock
 */
export class SuggestedCodeBlock extends Message<SuggestedCodeBlock> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  constructor(data?: PartialMessage<SuggestedCodeBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SuggestedCodeBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestedCodeBlock {
    return new SuggestedCodeBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestedCodeBlock {
    return new SuggestedCodeBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestedCodeBlock {
    return new SuggestedCodeBlock().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestedCodeBlock | PlainMessage<SuggestedCodeBlock> | undefined, b: SuggestedCodeBlock | PlainMessage<SuggestedCodeBlock> | undefined): boolean {
    return proto3.util.equals(SuggestedCodeBlock, a, b);
  }
}

/**
 * aiserver.v1.UserResponseToSuggestedCodeBlock
 *
 * @generated from message aiserver.v1.UserResponseToSuggestedCodeBlock
 */
export class UserResponseToSuggestedCodeBlock extends Message<UserResponseToSuggestedCodeBlock> {
  /**
   * @generated from field: aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType user_response_type = 1;
   */
  userResponseType = UserResponseToSuggestedCodeBlock_UserResponseType.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 2;
   */
  filePath = "";

  /**
   * @generated from field: optional aiserver.v1.FileDiff user_modifications_to_suggested_code_blocks = 3;
   */
  userModificationsToSuggestedCodeBlocks?: FileDiff;

  constructor(data?: PartialMessage<UserResponseToSuggestedCodeBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.UserResponseToSuggestedCodeBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_response_type", kind: "enum", T: proto3.getEnumType(UserResponseToSuggestedCodeBlock_UserResponseType) },
    { no: 2, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_modifications_to_suggested_code_blocks", kind: "message", T: FileDiff, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserResponseToSuggestedCodeBlock {
    return new UserResponseToSuggestedCodeBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserResponseToSuggestedCodeBlock {
    return new UserResponseToSuggestedCodeBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserResponseToSuggestedCodeBlock {
    return new UserResponseToSuggestedCodeBlock().fromJsonString(jsonString, options);
  }

  static equals(a: UserResponseToSuggestedCodeBlock | PlainMessage<UserResponseToSuggestedCodeBlock> | undefined, b: UserResponseToSuggestedCodeBlock | PlainMessage<UserResponseToSuggestedCodeBlock> | undefined): boolean {
    return proto3.util.equals(UserResponseToSuggestedCodeBlock, a, b);
  }
}

/**
 * aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType
 *
 * @generated from enum aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType
 */
export enum UserResponseToSuggestedCodeBlock_UserResponseType {
  /**
   * @generated from enum value: USER_RESPONSE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_RESPONSE_TYPE_ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * @generated from enum value: USER_RESPONSE_TYPE_REJECT = 2;
   */
  REJECT = 2,

  /**
   * @generated from enum value: USER_RESPONSE_TYPE_MODIFY = 3;
   */
  MODIFY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UserResponseToSuggestedCodeBlock_UserResponseType)
proto3.util.setEnumType(UserResponseToSuggestedCodeBlock_UserResponseType, "aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType", [
  { no: 0, name: "USER_RESPONSE_TYPE_UNSPECIFIED" },
  { no: 1, name: "USER_RESPONSE_TYPE_ACCEPT" },
  { no: 2, name: "USER_RESPONSE_TYPE_REJECT" },
  { no: 3, name: "USER_RESPONSE_TYPE_MODIFY" },
]);

/**
 * aiserver.v1.ComposerFileDiff
 *
 * @generated from message aiserver.v1.ComposerFileDiff
 */
export class ComposerFileDiff extends Message<ComposerFileDiff> {
  /**
   * @generated from field: repeated aiserver.v1.ComposerFileDiff.ChunkDiff chunks = 1;
   */
  chunks: ComposerFileDiff_ChunkDiff[] = [];

  /**
   * @generated from field: aiserver.v1.ComposerFileDiff.Editor editor = 2;
   */
  editor = ComposerFileDiff_Editor.UNSPECIFIED;

  /**
   * @generated from field: bool hit_timeout = 3;
   */
  hitTimeout = false;

  constructor(data?: PartialMessage<ComposerFileDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerFileDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunks", kind: "message", T: ComposerFileDiff_ChunkDiff, repeated: true },
    { no: 2, name: "editor", kind: "enum", T: proto3.getEnumType(ComposerFileDiff_Editor) },
    { no: 3, name: "hit_timeout", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerFileDiff {
    return new ComposerFileDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerFileDiff {
    return new ComposerFileDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerFileDiff {
    return new ComposerFileDiff().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerFileDiff | PlainMessage<ComposerFileDiff> | undefined, b: ComposerFileDiff | PlainMessage<ComposerFileDiff> | undefined): boolean {
    return proto3.util.equals(ComposerFileDiff, a, b);
  }
}

/**
 * aiserver.v1.ComposerFileDiff.Editor
 *
 * @generated from enum aiserver.v1.ComposerFileDiff.Editor
 */
export enum ComposerFileDiff_Editor {
  /**
   * @generated from enum value: EDITOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EDITOR_AI = 1;
   */
  AI = 1,

  /**
   * @generated from enum value: EDITOR_HUMAN = 2;
   */
  HUMAN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ComposerFileDiff_Editor)
proto3.util.setEnumType(ComposerFileDiff_Editor, "aiserver.v1.ComposerFileDiff.Editor", [
  { no: 0, name: "EDITOR_UNSPECIFIED" },
  { no: 1, name: "EDITOR_AI" },
  { no: 2, name: "EDITOR_HUMAN" },
]);

/**
 * aiserver.v1.ComposerFileDiff.ChunkDiff
 *
 * @generated from message aiserver.v1.ComposerFileDiff.ChunkDiff
 */
export class ComposerFileDiff_ChunkDiff extends Message<ComposerFileDiff_ChunkDiff> {
  /**
   * @generated from field: string diff_string = 1;
   */
  diffString = "";

  /**
   * @generated from field: int32 old_start = 2;
   */
  oldStart = 0;

  /**
   * @generated from field: int32 new_start = 3;
   */
  newStart = 0;

  /**
   * @generated from field: int32 old_lines = 4;
   */
  oldLines = 0;

  /**
   * @generated from field: int32 new_lines = 5;
   */
  newLines = 0;

  /**
   * @generated from field: int32 lines_removed = 6;
   */
  linesRemoved = 0;

  /**
   * @generated from field: int32 lines_added = 7;
   */
  linesAdded = 0;

  constructor(data?: PartialMessage<ComposerFileDiff_ChunkDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ComposerFileDiff.ChunkDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "diff_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "old_start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "new_start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "old_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "new_lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "lines_removed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "lines_added", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComposerFileDiff_ChunkDiff {
    return new ComposerFileDiff_ChunkDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComposerFileDiff_ChunkDiff {
    return new ComposerFileDiff_ChunkDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComposerFileDiff_ChunkDiff {
    return new ComposerFileDiff_ChunkDiff().fromJsonString(jsonString, options);
  }

  static equals(a: ComposerFileDiff_ChunkDiff | PlainMessage<ComposerFileDiff_ChunkDiff> | undefined, b: ComposerFileDiff_ChunkDiff | PlainMessage<ComposerFileDiff_ChunkDiff> | undefined): boolean {
    return proto3.util.equals(ComposerFileDiff_ChunkDiff, a, b);
  }
}

/**
 * aiserver.v1.DiffHistoryData
 *
 * @generated from message aiserver.v1.DiffHistoryData
 */
export class DiffHistoryData extends Message<DiffHistoryData> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: repeated aiserver.v1.ComposerFileDiff diffs = 2;
   */
  diffs: ComposerFileDiff[] = [];

  /**
   * @generated from field: double timestamp = 3;
   */
  timestamp = 0;

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: aiserver.v1.ComposerFileDiff start_to_end_diff = 5;
   */
  startToEndDiff?: ComposerFileDiff;

  constructor(data?: PartialMessage<DiffHistoryData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DiffHistoryData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "diffs", kind: "message", T: ComposerFileDiff, repeated: true },
    { no: 3, name: "timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "start_to_end_diff", kind: "message", T: ComposerFileDiff },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffHistoryData {
    return new DiffHistoryData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffHistoryData {
    return new DiffHistoryData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffHistoryData {
    return new DiffHistoryData().fromJsonString(jsonString, options);
  }

  static equals(a: DiffHistoryData | PlainMessage<DiffHistoryData> | undefined, b: DiffHistoryData | PlainMessage<DiffHistoryData> | undefined): boolean {
    return proto3.util.equals(DiffHistoryData, a, b);
  }
}

/**
 * aiserver.v1.SubagentReturnCall
 *
 * @generated from message aiserver.v1.SubagentReturnCall
 */
export class SubagentReturnCall extends Message<SubagentReturnCall> {
  /**
   * @generated from field: aiserver.v1.SubagentType subagent_type = 1;
   */
  subagentType = SubagentType.UNSPECIFIED;

  /**
   * @generated from oneof aiserver.v1.SubagentReturnCall.return_value
   */
  returnValue: {
    /**
     * @generated from field: aiserver.v1.DeepSearchSubagentReturnValue deep_search_return_value = 2;
     */
    value: DeepSearchSubagentReturnValue;
    case: "deepSearchReturnValue";
  } | {
    /**
     * @generated from field: aiserver.v1.FixLintsSubagentReturnValue fix_lints_return_value = 3;
     */
    value: FixLintsSubagentReturnValue;
    case: "fixLintsReturnValue";
  } | {
    /**
     * @generated from field: aiserver.v1.TaskSubagentReturnValue task_return_value = 4;
     */
    value: TaskSubagentReturnValue;
    case: "taskReturnValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubagentReturnCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SubagentReturnCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subagent_type", kind: "enum", T: proto3.getEnumType(SubagentType) },
    { no: 2, name: "deep_search_return_value", kind: "message", T: DeepSearchSubagentReturnValue, oneof: "return_value" },
    { no: 3, name: "fix_lints_return_value", kind: "message", T: FixLintsSubagentReturnValue, oneof: "return_value" },
    { no: 4, name: "task_return_value", kind: "message", T: TaskSubagentReturnValue, oneof: "return_value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubagentReturnCall {
    return new SubagentReturnCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubagentReturnCall {
    return new SubagentReturnCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubagentReturnCall {
    return new SubagentReturnCall().fromJsonString(jsonString, options);
  }

  static equals(a: SubagentReturnCall | PlainMessage<SubagentReturnCall> | undefined, b: SubagentReturnCall | PlainMessage<SubagentReturnCall> | undefined): boolean {
    return proto3.util.equals(SubagentReturnCall, a, b);
  }
}

/**
 * aiserver.v1.DeepSearchSubagentReturnValue
 *
 * @generated from message aiserver.v1.DeepSearchSubagentReturnValue
 */
export class DeepSearchSubagentReturnValue extends Message<DeepSearchSubagentReturnValue> {
  /**
   * @generated from field: repeated aiserver.v1.DeepSearchSubagentReturnValue.ContextItem context_items = 1;
   */
  contextItems: DeepSearchSubagentReturnValue_ContextItem[] = [];

  constructor(data?: PartialMessage<DeepSearchSubagentReturnValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DeepSearchSubagentReturnValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context_items", kind: "message", T: DeepSearchSubagentReturnValue_ContextItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepSearchSubagentReturnValue {
    return new DeepSearchSubagentReturnValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepSearchSubagentReturnValue {
    return new DeepSearchSubagentReturnValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepSearchSubagentReturnValue {
    return new DeepSearchSubagentReturnValue().fromJsonString(jsonString, options);
  }

  static equals(a: DeepSearchSubagentReturnValue | PlainMessage<DeepSearchSubagentReturnValue> | undefined, b: DeepSearchSubagentReturnValue | PlainMessage<DeepSearchSubagentReturnValue> | undefined): boolean {
    return proto3.util.equals(DeepSearchSubagentReturnValue, a, b);
  }
}

/**
 * aiserver.v1.DeepSearchSubagentReturnValue.ContextItem
 *
 * @generated from message aiserver.v1.DeepSearchSubagentReturnValue.ContextItem
 */
export class DeepSearchSubagentReturnValue_ContextItem extends Message<DeepSearchSubagentReturnValue_ContextItem> {
  /**
   * @generated from field: string file = 1;
   */
  file = "";

  /**
   * @generated from field: optional aiserver.v1.LineRange line_range = 2;
   */
  lineRange?: LineRange;

  /**
   * @generated from field: string explanation = 3;
   */
  explanation = "";

  constructor(data?: PartialMessage<DeepSearchSubagentReturnValue_ContextItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.DeepSearchSubagentReturnValue.ContextItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line_range", kind: "message", T: LineRange, opt: true },
    { no: 3, name: "explanation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepSearchSubagentReturnValue_ContextItem {
    return new DeepSearchSubagentReturnValue_ContextItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepSearchSubagentReturnValue_ContextItem {
    return new DeepSearchSubagentReturnValue_ContextItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepSearchSubagentReturnValue_ContextItem {
    return new DeepSearchSubagentReturnValue_ContextItem().fromJsonString(jsonString, options);
  }

  static equals(a: DeepSearchSubagentReturnValue_ContextItem | PlainMessage<DeepSearchSubagentReturnValue_ContextItem> | undefined, b: DeepSearchSubagentReturnValue_ContextItem | PlainMessage<DeepSearchSubagentReturnValue_ContextItem> | undefined): boolean {
    return proto3.util.equals(DeepSearchSubagentReturnValue_ContextItem, a, b);
  }
}

/**
 * aiserver.v1.FixLintsSubagentReturnValue
 *
 * @generated from message aiserver.v1.FixLintsSubagentReturnValue
 */
export class FixLintsSubagentReturnValue extends Message<FixLintsSubagentReturnValue> {
  constructor(data?: PartialMessage<FixLintsSubagentReturnValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.FixLintsSubagentReturnValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixLintsSubagentReturnValue {
    return new FixLintsSubagentReturnValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixLintsSubagentReturnValue {
    return new FixLintsSubagentReturnValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixLintsSubagentReturnValue {
    return new FixLintsSubagentReturnValue().fromJsonString(jsonString, options);
  }

  static equals(a: FixLintsSubagentReturnValue | PlainMessage<FixLintsSubagentReturnValue> | undefined, b: FixLintsSubagentReturnValue | PlainMessage<FixLintsSubagentReturnValue> | undefined): boolean {
    return proto3.util.equals(FixLintsSubagentReturnValue, a, b);
  }
}

/**
 * aiserver.v1.TaskSubagentReturnValue
 *
 * @generated from message aiserver.v1.TaskSubagentReturnValue
 */
export class TaskSubagentReturnValue extends Message<TaskSubagentReturnValue> {
  /**
   * @generated from field: string summary = 1;
   */
  summary = "";

  constructor(data?: PartialMessage<TaskSubagentReturnValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.TaskSubagentReturnValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskSubagentReturnValue {
    return new TaskSubagentReturnValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskSubagentReturnValue {
    return new TaskSubagentReturnValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskSubagentReturnValue {
    return new TaskSubagentReturnValue().fromJsonString(jsonString, options);
  }

  static equals(a: TaskSubagentReturnValue | PlainMessage<TaskSubagentReturnValue> | undefined, b: TaskSubagentReturnValue | PlainMessage<TaskSubagentReturnValue> | undefined): boolean {
    return proto3.util.equals(TaskSubagentReturnValue, a, b);
  }
}

/**
 * aiserver.v1.IsCursorPredictionEnabledRequest
 *
 * @generated from message aiserver.v1.IsCursorPredictionEnabledRequest
 */
export class IsCursorPredictionEnabledRequest extends Message<IsCursorPredictionEnabledRequest> {
  constructor(data?: PartialMessage<IsCursorPredictionEnabledRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IsCursorPredictionEnabledRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsCursorPredictionEnabledRequest {
    return new IsCursorPredictionEnabledRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsCursorPredictionEnabledRequest {
    return new IsCursorPredictionEnabledRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsCursorPredictionEnabledRequest {
    return new IsCursorPredictionEnabledRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsCursorPredictionEnabledRequest | PlainMessage<IsCursorPredictionEnabledRequest> | undefined, b: IsCursorPredictionEnabledRequest | PlainMessage<IsCursorPredictionEnabledRequest> | undefined): boolean {
    return proto3.util.equals(IsCursorPredictionEnabledRequest, a, b);
  }
}

/**
 * aiserver.v1.IsCursorPredictionEnabledResponse
 *
 * @generated from message aiserver.v1.IsCursorPredictionEnabledResponse
 */
export class IsCursorPredictionEnabledResponse extends Message<IsCursorPredictionEnabledResponse> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  constructor(data?: PartialMessage<IsCursorPredictionEnabledResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IsCursorPredictionEnabledResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsCursorPredictionEnabledResponse {
    return new IsCursorPredictionEnabledResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsCursorPredictionEnabledResponse {
    return new IsCursorPredictionEnabledResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsCursorPredictionEnabledResponse {
    return new IsCursorPredictionEnabledResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsCursorPredictionEnabledResponse | PlainMessage<IsCursorPredictionEnabledResponse> | undefined, b: IsCursorPredictionEnabledResponse | PlainMessage<IsCursorPredictionEnabledResponse> | undefined): boolean {
    return proto3.util.equals(IsCursorPredictionEnabledResponse, a, b);
  }
}

/**
 * aiserver.v1.StreamNextCursorPredictionRequest
 *
 * @generated from message aiserver.v1.StreamNextCursorPredictionRequest
 */
export class StreamNextCursorPredictionRequest extends Message<StreamNextCursorPredictionRequest> {
  /**
   * @generated from field: aiserver.v1.CurrentFileInfo current_file = 1;
   */
  currentFile?: CurrentFileInfo;

  /**
   * @generated from field: repeated string diff_history = 2;
   */
  diffHistory: string[] = [];

  /**
   * @generated from field: optional string model_name = 3;
   */
  modelName?: string;

  /**
   * @generated from field: optional aiserver.v1.LinterErrors linter_errors = 4;
   */
  linterErrors?: LinterErrors;

  /**
   * @generated from field: repeated aiserver.v1.CppContextItem context_items = 13;
   */
  contextItems: CppContextItem[] = [];

  /**
   * @generated from field: repeated string diff_history_keys = 5;
   */
  diffHistoryKeys: string[] = [];

  /**
   * @generated from field: optional bool give_debug_output = 6;
   */
  giveDebugOutput?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.CppFileDiffHistory file_diff_histories = 7;
   */
  fileDiffHistories: CppFileDiffHistory[] = [];

  /**
   * @generated from field: repeated aiserver.v1.CppFileDiffHistory merged_diff_histories = 8;
   */
  mergedDiffHistories: CppFileDiffHistory[] = [];

  /**
   * @generated from field: repeated aiserver.v1.BlockDiffPatch block_diff_patches = 9;
   */
  blockDiffPatches: BlockDiffPatch[] = [];

  /**
   * @generated from field: optional bool is_nightly = 10;
   */
  isNightly?: boolean;

  /**
   * @generated from field: optional bool is_debug = 11;
   */
  isDebug?: boolean;

  /**
   * @generated from field: optional bool immediately_ack = 12;
   */
  immediatelyAck?: boolean;

  /**
   * @generated from field: optional bool enable_more_context = 17;
   */
  enableMoreContext?: boolean;

  /**
   * @generated from field: repeated aiserver.v1.CppParameterHint parameter_hints = 14;
   */
  parameterHints: CppParameterHint[] = [];

  /**
   * @generated from field: repeated aiserver.v1.LspSubgraphFullContext lsp_contexts = 15;
   */
  lspContexts: LspSubgraphFullContext[] = [];

  /**
   * @generated from field: optional aiserver.v1.CppIntentInfo cpp_intent_info = 16;
   */
  cppIntentInfo?: CppIntentInfo;

  /**
   * @generated from field: optional string workspace_id = 18;
   */
  workspaceId?: string;

  /**
   * @generated from field: repeated aiserver.v1.FilesyncUpdateWithModelVersion file_sync_updates = 19;
   */
  fileSyncUpdates: FilesyncUpdateWithModelVersion[] = [];

  /**
   * @generated from field: repeated aiserver.v1.StreamNextCursorPredictionRequest.FileVisibleRange file_visible_ranges = 20;
   */
  fileVisibleRanges: StreamNextCursorPredictionRequest_FileVisibleRange[] = [];

  constructor(data?: PartialMessage<StreamNextCursorPredictionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamNextCursorPredictionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_file", kind: "message", T: CurrentFileInfo },
    { no: 2, name: "diff_history", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "linter_errors", kind: "message", T: LinterErrors, opt: true },
    { no: 13, name: "context_items", kind: "message", T: CppContextItem, repeated: true },
    { no: 5, name: "diff_history_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "give_debug_output", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "file_diff_histories", kind: "message", T: CppFileDiffHistory, repeated: true },
    { no: 8, name: "merged_diff_histories", kind: "message", T: CppFileDiffHistory, repeated: true },
    { no: 9, name: "block_diff_patches", kind: "message", T: BlockDiffPatch, repeated: true },
    { no: 10, name: "is_nightly", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "is_debug", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "immediately_ack", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 17, name: "enable_more_context", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 14, name: "parameter_hints", kind: "message", T: CppParameterHint, repeated: true },
    { no: 15, name: "lsp_contexts", kind: "message", T: LspSubgraphFullContext, repeated: true },
    { no: 16, name: "cpp_intent_info", kind: "message", T: CppIntentInfo, opt: true },
    { no: 18, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 19, name: "file_sync_updates", kind: "message", T: FilesyncUpdateWithModelVersion, repeated: true },
    { no: 20, name: "file_visible_ranges", kind: "message", T: StreamNextCursorPredictionRequest_FileVisibleRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamNextCursorPredictionRequest {
    return new StreamNextCursorPredictionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamNextCursorPredictionRequest {
    return new StreamNextCursorPredictionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamNextCursorPredictionRequest {
    return new StreamNextCursorPredictionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamNextCursorPredictionRequest | PlainMessage<StreamNextCursorPredictionRequest> | undefined, b: StreamNextCursorPredictionRequest | PlainMessage<StreamNextCursorPredictionRequest> | undefined): boolean {
    return proto3.util.equals(StreamNextCursorPredictionRequest, a, b);
  }
}

/**
 * aiserver.v1.StreamNextCursorPredictionRequest.VisibleRange
 *
 * @generated from message aiserver.v1.StreamNextCursorPredictionRequest.VisibleRange
 */
export class StreamNextCursorPredictionRequest_VisibleRange extends Message<StreamNextCursorPredictionRequest_VisibleRange> {
  /**
   * @generated from field: int32 start_line_number_inclusive = 1;
   */
  startLineNumberInclusive = 0;

  /**
   * @generated from field: int32 end_line_number_exclusive = 2;
   */
  endLineNumberExclusive = 0;

  constructor(data?: PartialMessage<StreamNextCursorPredictionRequest_VisibleRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamNextCursorPredictionRequest.VisibleRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_line_number_inclusive", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_line_number_exclusive", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamNextCursorPredictionRequest_VisibleRange {
    return new StreamNextCursorPredictionRequest_VisibleRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamNextCursorPredictionRequest_VisibleRange {
    return new StreamNextCursorPredictionRequest_VisibleRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamNextCursorPredictionRequest_VisibleRange {
    return new StreamNextCursorPredictionRequest_VisibleRange().fromJsonString(jsonString, options);
  }

  static equals(a: StreamNextCursorPredictionRequest_VisibleRange | PlainMessage<StreamNextCursorPredictionRequest_VisibleRange> | undefined, b: StreamNextCursorPredictionRequest_VisibleRange | PlainMessage<StreamNextCursorPredictionRequest_VisibleRange> | undefined): boolean {
    return proto3.util.equals(StreamNextCursorPredictionRequest_VisibleRange, a, b);
  }
}

/**
 * aiserver.v1.StreamNextCursorPredictionRequest.FileVisibleRange
 *
 * @generated from message aiserver.v1.StreamNextCursorPredictionRequest.FileVisibleRange
 */
export class StreamNextCursorPredictionRequest_FileVisibleRange extends Message<StreamNextCursorPredictionRequest_FileVisibleRange> {
  /**
   * @generated from field: string filename = 1;
   */
  filename = "";

  /**
   * @generated from field: repeated aiserver.v1.StreamNextCursorPredictionRequest.VisibleRange visible_ranges = 2;
   */
  visibleRanges: StreamNextCursorPredictionRequest_VisibleRange[] = [];

  constructor(data?: PartialMessage<StreamNextCursorPredictionRequest_FileVisibleRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamNextCursorPredictionRequest.FileVisibleRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "visible_ranges", kind: "message", T: StreamNextCursorPredictionRequest_VisibleRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamNextCursorPredictionRequest_FileVisibleRange {
    return new StreamNextCursorPredictionRequest_FileVisibleRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamNextCursorPredictionRequest_FileVisibleRange {
    return new StreamNextCursorPredictionRequest_FileVisibleRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamNextCursorPredictionRequest_FileVisibleRange {
    return new StreamNextCursorPredictionRequest_FileVisibleRange().fromJsonString(jsonString, options);
  }

  static equals(a: StreamNextCursorPredictionRequest_FileVisibleRange | PlainMessage<StreamNextCursorPredictionRequest_FileVisibleRange> | undefined, b: StreamNextCursorPredictionRequest_FileVisibleRange | PlainMessage<StreamNextCursorPredictionRequest_FileVisibleRange> | undefined): boolean {
    return proto3.util.equals(StreamNextCursorPredictionRequest_FileVisibleRange, a, b);
  }
}

/**
 * aiserver.v1.StreamNextCursorPredictionResponse
 *
 * @generated from message aiserver.v1.StreamNextCursorPredictionResponse
 */
export class StreamNextCursorPredictionResponse extends Message<StreamNextCursorPredictionResponse> {
  /**
   * @generated from oneof aiserver.v1.StreamNextCursorPredictionResponse.response
   */
  response: {
    /**
     * @generated from field: string text = 1;
     */
    value: string;
    case: "text";
  } | {
    /**
     * @generated from field: int32 line_number = 2;
     */
    value: number;
    case: "lineNumber";
  } | {
    /**
     * @generated from field: bool is_not_in_range = 3;
     */
    value: boolean;
    case: "isNotInRange";
  } | {
    /**
     * @generated from field: string file_name = 4;
     */
    value: string;
    case: "fileName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamNextCursorPredictionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.StreamNextCursorPredictionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 2, name: "line_number", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "response" },
    { no: 3, name: "is_not_in_range", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "response" },
    { no: 4, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamNextCursorPredictionResponse {
    return new StreamNextCursorPredictionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamNextCursorPredictionResponse {
    return new StreamNextCursorPredictionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamNextCursorPredictionResponse {
    return new StreamNextCursorPredictionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamNextCursorPredictionResponse | PlainMessage<StreamNextCursorPredictionResponse> | undefined, b: StreamNextCursorPredictionResponse | PlainMessage<StreamNextCursorPredictionResponse> | undefined): boolean {
    return proto3.util.equals(StreamNextCursorPredictionResponse, a, b);
  }
}

/**
 * aiserver.v1.IntentPredictionRequest
 *
 * @generated from message aiserver.v1.IntentPredictionRequest
 */
export class IntentPredictionRequest extends Message<IntentPredictionRequest> {
  /**
   * @generated from field: repeated aiserver.v1.ConversationMessage messages = 1;
   */
  messages: ConversationMessage[] = [];

  /**
   * @generated from field: aiserver.v1.ContextOptions context_options = 2;
   */
  contextOptions?: ContextOptions;

  /**
   * @generated from field: aiserver.v1.ModelDetails model_details = 3;
   */
  modelDetails?: ModelDetails;

  constructor(data?: PartialMessage<IntentPredictionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IntentPredictionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: ConversationMessage, repeated: true },
    { no: 2, name: "context_options", kind: "message", T: ContextOptions },
    { no: 3, name: "model_details", kind: "message", T: ModelDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentPredictionRequest {
    return new IntentPredictionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentPredictionRequest {
    return new IntentPredictionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentPredictionRequest {
    return new IntentPredictionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IntentPredictionRequest | PlainMessage<IntentPredictionRequest> | undefined, b: IntentPredictionRequest | PlainMessage<IntentPredictionRequest> | undefined): boolean {
    return proto3.util.equals(IntentPredictionRequest, a, b);
  }
}

/**
 * aiserver.v1.IntentPredictionResponse
 *
 * @generated from message aiserver.v1.IntentPredictionResponse
 */
export class IntentPredictionResponse extends Message<IntentPredictionResponse> {
  /**
   * @generated from field: aiserver.v1.IntentPredictionResponse.ChosenDocumentation chosen_documentation = 1;
   */
  chosenDocumentation?: IntentPredictionResponse_ChosenDocumentation;

  /**
   * @generated from field: aiserver.v1.IntentPredictionResponse.ChosenFileContents chosen_file_contents = 2;
   */
  chosenFileContents?: IntentPredictionResponse_ChosenFileContents;

  /**
   * @generated from field: aiserver.v1.IntentPredictionResponse.ChosenLinterDiagnostics chosen_linter_diagnostics = 3;
   */
  chosenLinterDiagnostics?: IntentPredictionResponse_ChosenLinterDiagnostics;

  /**
   * @generated from field: bool use_global_context = 4;
   */
  useGlobalContext = false;

  /**
   * @generated from field: bool use_with_folder_context = 5;
   */
  useWithFolderContext = false;

  constructor(data?: PartialMessage<IntentPredictionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IntentPredictionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chosen_documentation", kind: "message", T: IntentPredictionResponse_ChosenDocumentation },
    { no: 2, name: "chosen_file_contents", kind: "message", T: IntentPredictionResponse_ChosenFileContents },
    { no: 3, name: "chosen_linter_diagnostics", kind: "message", T: IntentPredictionResponse_ChosenLinterDiagnostics },
    { no: 4, name: "use_global_context", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "use_with_folder_context", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentPredictionResponse {
    return new IntentPredictionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentPredictionResponse {
    return new IntentPredictionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentPredictionResponse {
    return new IntentPredictionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IntentPredictionResponse | PlainMessage<IntentPredictionResponse> | undefined, b: IntentPredictionResponse | PlainMessage<IntentPredictionResponse> | undefined): boolean {
    return proto3.util.equals(IntentPredictionResponse, a, b);
  }
}

/**
 * aiserver.v1.IntentPredictionResponse.ChosenDocumentation
 *
 * @generated from message aiserver.v1.IntentPredictionResponse.ChosenDocumentation
 */
export class IntentPredictionResponse_ChosenDocumentation extends Message<IntentPredictionResponse_ChosenDocumentation> {
  /**
   * @generated from field: repeated int32 doc_indices = 1;
   */
  docIndices: number[] = [];

  /**
   * @generated from field: repeated string doc_identifiers = 2;
   */
  docIdentifiers: string[] = [];

  /**
   * @generated from field: repeated string doc_names = 3;
   */
  docNames: string[] = [];

  constructor(data?: PartialMessage<IntentPredictionResponse_ChosenDocumentation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IntentPredictionResponse.ChosenDocumentation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc_indices", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 2, name: "doc_identifiers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "doc_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentPredictionResponse_ChosenDocumentation {
    return new IntentPredictionResponse_ChosenDocumentation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentPredictionResponse_ChosenDocumentation {
    return new IntentPredictionResponse_ChosenDocumentation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentPredictionResponse_ChosenDocumentation {
    return new IntentPredictionResponse_ChosenDocumentation().fromJsonString(jsonString, options);
  }

  static equals(a: IntentPredictionResponse_ChosenDocumentation | PlainMessage<IntentPredictionResponse_ChosenDocumentation> | undefined, b: IntentPredictionResponse_ChosenDocumentation | PlainMessage<IntentPredictionResponse_ChosenDocumentation> | undefined): boolean {
    return proto3.util.equals(IntentPredictionResponse_ChosenDocumentation, a, b);
  }
}

/**
 * aiserver.v1.IntentPredictionResponse.ChosenFileContents
 *
 * @generated from message aiserver.v1.IntentPredictionResponse.ChosenFileContents
 */
export class IntentPredictionResponse_ChosenFileContents extends Message<IntentPredictionResponse_ChosenFileContents> {
  constructor(data?: PartialMessage<IntentPredictionResponse_ChosenFileContents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IntentPredictionResponse.ChosenFileContents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentPredictionResponse_ChosenFileContents {
    return new IntentPredictionResponse_ChosenFileContents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentPredictionResponse_ChosenFileContents {
    return new IntentPredictionResponse_ChosenFileContents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentPredictionResponse_ChosenFileContents {
    return new IntentPredictionResponse_ChosenFileContents().fromJsonString(jsonString, options);
  }

  static equals(a: IntentPredictionResponse_ChosenFileContents | PlainMessage<IntentPredictionResponse_ChosenFileContents> | undefined, b: IntentPredictionResponse_ChosenFileContents | PlainMessage<IntentPredictionResponse_ChosenFileContents> | undefined): boolean {
    return proto3.util.equals(IntentPredictionResponse_ChosenFileContents, a, b);
  }
}

/**
 * aiserver.v1.IntentPredictionResponse.ChosenLinterDiagnostics
 *
 * @generated from message aiserver.v1.IntentPredictionResponse.ChosenLinterDiagnostics
 */
export class IntentPredictionResponse_ChosenLinterDiagnostics extends Message<IntentPredictionResponse_ChosenLinterDiagnostics> {
  /**
   * @generated from field: repeated int32 diagnostic_indices = 1;
   */
  diagnosticIndices: number[] = [];

  constructor(data?: PartialMessage<IntentPredictionResponse_ChosenLinterDiagnostics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.IntentPredictionResponse.ChosenLinterDiagnostics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "diagnostic_indices", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentPredictionResponse_ChosenLinterDiagnostics {
    return new IntentPredictionResponse_ChosenLinterDiagnostics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentPredictionResponse_ChosenLinterDiagnostics {
    return new IntentPredictionResponse_ChosenLinterDiagnostics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentPredictionResponse_ChosenLinterDiagnostics {
    return new IntentPredictionResponse_ChosenLinterDiagnostics().fromJsonString(jsonString, options);
  }

  static equals(a: IntentPredictionResponse_ChosenLinterDiagnostics | PlainMessage<IntentPredictionResponse_ChosenLinterDiagnostics> | undefined, b: IntentPredictionResponse_ChosenLinterDiagnostics | PlainMessage<IntentPredictionResponse_ChosenLinterDiagnostics> | undefined): boolean {
    return proto3.util.equals(IntentPredictionResponse_ChosenLinterDiagnostics, a, b);
  }
}

/**
 * aiserver.v1.ContextOptions
 *
 * @generated from message aiserver.v1.ContextOptions
 */
export class ContextOptions extends Message<ContextOptions> {
  /**
   * @generated from field: aiserver.v1.ContextOptions.AllDocumentation all_documentation = 1;
   */
  allDocumentation?: ContextOptions_AllDocumentation;

  /**
   * @generated from field: aiserver.v1.ContextOptions.CurrentFileContents current_file_contents = 2;
   */
  currentFileContents?: ContextOptions_CurrentFileContents;

  /**
   * @generated from field: aiserver.v1.ContextOptions.LinterDiagnostics linter_diagnostics = 3;
   */
  linterDiagnostics?: ContextOptions_LinterDiagnostics;

  /**
   * @generated from field: aiserver.v1.ContextOptions.GlobalContext global_context = 4;
   */
  globalContext?: ContextOptions_GlobalContext;

  constructor(data?: PartialMessage<ContextOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ContextOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "all_documentation", kind: "message", T: ContextOptions_AllDocumentation },
    { no: 2, name: "current_file_contents", kind: "message", T: ContextOptions_CurrentFileContents },
    { no: 3, name: "linter_diagnostics", kind: "message", T: ContextOptions_LinterDiagnostics },
    { no: 4, name: "global_context", kind: "message", T: ContextOptions_GlobalContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContextOptions {
    return new ContextOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContextOptions {
    return new ContextOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContextOptions {
    return new ContextOptions().fromJsonString(jsonString, options);
  }

  static equals(a: ContextOptions | PlainMessage<ContextOptions> | undefined, b: ContextOptions | PlainMessage<ContextOptions> | undefined): boolean {
    return proto3.util.equals(ContextOptions, a, b);
  }
}

/**
 * aiserver.v1.ContextOptions.AllDocumentation
 *
 * @generated from message aiserver.v1.ContextOptions.AllDocumentation
 */
export class ContextOptions_AllDocumentation extends Message<ContextOptions_AllDocumentation> {
  /**
   * @generated from field: repeated aiserver.v1.ContextOptions.AllDocumentation.Documentation available_docs = 1;
   */
  availableDocs: ContextOptions_AllDocumentation_Documentation[] = [];

  constructor(data?: PartialMessage<ContextOptions_AllDocumentation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ContextOptions.AllDocumentation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "available_docs", kind: "message", T: ContextOptions_AllDocumentation_Documentation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContextOptions_AllDocumentation {
    return new ContextOptions_AllDocumentation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContextOptions_AllDocumentation {
    return new ContextOptions_AllDocumentation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContextOptions_AllDocumentation {
    return new ContextOptions_AllDocumentation().fromJsonString(jsonString, options);
  }

  static equals(a: ContextOptions_AllDocumentation | PlainMessage<ContextOptions_AllDocumentation> | undefined, b: ContextOptions_AllDocumentation | PlainMessage<ContextOptions_AllDocumentation> | undefined): boolean {
    return proto3.util.equals(ContextOptions_AllDocumentation, a, b);
  }
}

/**
 * aiserver.v1.ContextOptions.AllDocumentation.Documentation
 *
 * @generated from message aiserver.v1.ContextOptions.AllDocumentation.Documentation
 */
export class ContextOptions_AllDocumentation_Documentation extends Message<ContextOptions_AllDocumentation_Documentation> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: string identifier = 3;
   */
  identifier = "";

  constructor(data?: PartialMessage<ContextOptions_AllDocumentation_Documentation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ContextOptions.AllDocumentation.Documentation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContextOptions_AllDocumentation_Documentation {
    return new ContextOptions_AllDocumentation_Documentation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContextOptions_AllDocumentation_Documentation {
    return new ContextOptions_AllDocumentation_Documentation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContextOptions_AllDocumentation_Documentation {
    return new ContextOptions_AllDocumentation_Documentation().fromJsonString(jsonString, options);
  }

  static equals(a: ContextOptions_AllDocumentation_Documentation | PlainMessage<ContextOptions_AllDocumentation_Documentation> | undefined, b: ContextOptions_AllDocumentation_Documentation | PlainMessage<ContextOptions_AllDocumentation_Documentation> | undefined): boolean {
    return proto3.util.equals(ContextOptions_AllDocumentation_Documentation, a, b);
  }
}

/**
 * aiserver.v1.ContextOptions.CurrentFileContents
 *
 * @generated from message aiserver.v1.ContextOptions.CurrentFileContents
 */
export class ContextOptions_CurrentFileContents extends Message<ContextOptions_CurrentFileContents> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string contents = 2;
   */
  contents = "";

  /**
   * @generated from field: aiserver.v1.CursorPosition cursor_position = 3;
   */
  cursorPosition?: CursorPosition;

  /**
   * @generated from field: repeated aiserver.v1.DataframeInfo dataframes = 4;
   */
  dataframes: DataframeInfo[] = [];

  /**
   * @generated from field: string language_id = 5;
   */
  languageId = "";

  /**
   * @generated from field: aiserver.v1.CursorRange selection = 6;
   */
  selection?: CursorRange;

  constructor(data?: PartialMessage<ContextOptions_CurrentFileContents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ContextOptions.CurrentFileContents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cursor_position", kind: "message", T: CursorPosition },
    { no: 4, name: "dataframes", kind: "message", T: DataframeInfo, repeated: true },
    { no: 5, name: "language_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "selection", kind: "message", T: CursorRange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContextOptions_CurrentFileContents {
    return new ContextOptions_CurrentFileContents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContextOptions_CurrentFileContents {
    return new ContextOptions_CurrentFileContents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContextOptions_CurrentFileContents {
    return new ContextOptions_CurrentFileContents().fromJsonString(jsonString, options);
  }

  static equals(a: ContextOptions_CurrentFileContents | PlainMessage<ContextOptions_CurrentFileContents> | undefined, b: ContextOptions_CurrentFileContents | PlainMessage<ContextOptions_CurrentFileContents> | undefined): boolean {
    return proto3.util.equals(ContextOptions_CurrentFileContents, a, b);
  }
}

/**
 * aiserver.v1.ContextOptions.LinterDiagnostics
 *
 * @generated from message aiserver.v1.ContextOptions.LinterDiagnostics
 */
export class ContextOptions_LinterDiagnostics extends Message<ContextOptions_LinterDiagnostics> {
  /**
   * @generated from field: string relative_workspace_path = 1;
   */
  relativeWorkspacePath = "";

  /**
   * @generated from field: string contents = 2;
   */
  contents = "";

  /**
   * @generated from field: repeated aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic diagnostics = 3;
   */
  diagnostics: ContextOptions_LinterDiagnostics_Diagnostic[] = [];

  constructor(data?: PartialMessage<ContextOptions_LinterDiagnostics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ContextOptions.LinterDiagnostics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "diagnostics", kind: "message", T: ContextOptions_LinterDiagnostics_Diagnostic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContextOptions_LinterDiagnostics {
    return new ContextOptions_LinterDiagnostics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContextOptions_LinterDiagnostics {
    return new ContextOptions_LinterDiagnostics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContextOptions_LinterDiagnostics {
    return new ContextOptions_LinterDiagnostics().fromJsonString(jsonString, options);
  }

  static equals(a: ContextOptions_LinterDiagnostics | PlainMessage<ContextOptions_LinterDiagnostics> | undefined, b: ContextOptions_LinterDiagnostics | PlainMessage<ContextOptions_LinterDiagnostics> | undefined): boolean {
    return proto3.util.equals(ContextOptions_LinterDiagnostics, a, b);
  }
}

/**
 * aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic
 *
 * @generated from message aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic
 */
export class ContextOptions_LinterDiagnostics_Diagnostic extends Message<ContextOptions_LinterDiagnostics_Diagnostic> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string source = 2;
   */
  source = "";

  /**
   * @generated from field: aiserver.v1.CursorRange range = 3;
   */
  range?: CursorRange;

  /**
   * @generated from field: string relative_workspace_path = 4;
   */
  relativeWorkspacePath = "";

  constructor(data?: PartialMessage<ContextOptions_LinterDiagnostics_Diagnostic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "range", kind: "message", T: CursorRange },
    { no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContextOptions_LinterDiagnostics_Diagnostic {
    return new ContextOptions_LinterDiagnostics_Diagnostic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContextOptions_LinterDiagnostics_Diagnostic {
    return new ContextOptions_LinterDiagnostics_Diagnostic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContextOptions_LinterDiagnostics_Diagnostic {
    return new ContextOptions_LinterDiagnostics_Diagnostic().fromJsonString(jsonString, options);
  }

  static equals(a: ContextOptions_LinterDiagnostics_Diagnostic | PlainMessage<ContextOptions_LinterDiagnostics_Diagnostic> | undefined, b: ContextOptions_LinterDiagnostics_Diagnostic | PlainMessage<ContextOptions_LinterDiagnostics_Diagnostic> | undefined): boolean {
    return proto3.util.equals(ContextOptions_LinterDiagnostics_Diagnostic, a, b);
  }
}

/**
 * aiserver.v1.ContextOptions.GlobalContext
 *
 * @generated from message aiserver.v1.ContextOptions.GlobalContext
 */
export class ContextOptions_GlobalContext extends Message<ContextOptions_GlobalContext> {
  constructor(data?: PartialMessage<ContextOptions_GlobalContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.ContextOptions.GlobalContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContextOptions_GlobalContext {
    return new ContextOptions_GlobalContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContextOptions_GlobalContext {
    return new ContextOptions_GlobalContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContextOptions_GlobalContext {
    return new ContextOptions_GlobalContext().fromJsonString(jsonString, options);
  }

  static equals(a: ContextOptions_GlobalContext | PlainMessage<ContextOptions_GlobalContext> | undefined, b: ContextOptions_GlobalContext | PlainMessage<ContextOptions_GlobalContext> | undefined): boolean {
    return proto3.util.equals(ContextOptions_GlobalContext, a, b);
  }
}

/**
 * aiserver.v1.CursorPredictionConfigRequest
 *
 * @generated from message aiserver.v1.CursorPredictionConfigRequest
 */
export class CursorPredictionConfigRequest extends Message<CursorPredictionConfigRequest> {
  constructor(data?: PartialMessage<CursorPredictionConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CursorPredictionConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CursorPredictionConfigRequest {
    return new CursorPredictionConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CursorPredictionConfigRequest {
    return new CursorPredictionConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CursorPredictionConfigRequest {
    return new CursorPredictionConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CursorPredictionConfigRequest | PlainMessage<CursorPredictionConfigRequest> | undefined, b: CursorPredictionConfigRequest | PlainMessage<CursorPredictionConfigRequest> | undefined): boolean {
    return proto3.util.equals(CursorPredictionConfigRequest, a, b);
  }
}

/**
 * aiserver.v1.CursorPredictionModel
 *
 * @generated from message aiserver.v1.CursorPredictionModel
 */
export class CursorPredictionModel extends Message<CursorPredictionModel> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 radius = 2;
   */
  radius = 0;

  constructor(data?: PartialMessage<CursorPredictionModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CursorPredictionModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "radius", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CursorPredictionModel {
    return new CursorPredictionModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CursorPredictionModel {
    return new CursorPredictionModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CursorPredictionModel {
    return new CursorPredictionModel().fromJsonString(jsonString, options);
  }

  static equals(a: CursorPredictionModel | PlainMessage<CursorPredictionModel> | undefined, b: CursorPredictionModel | PlainMessage<CursorPredictionModel> | undefined): boolean {
    return proto3.util.equals(CursorPredictionModel, a, b);
  }
}

/**
 * aiserver.v1.CursorPredictionConfigResponse
 *
 * @generated from message aiserver.v1.CursorPredictionConfigResponse
 */
export class CursorPredictionConfigResponse extends Message<CursorPredictionConfigResponse> {
  /**
   * @generated from field: repeated aiserver.v1.CursorPredictionModel models = 1;
   */
  models: CursorPredictionModel[] = [];

  /**
   * @generated from field: string default_model = 2;
   */
  defaultModel = "";

  /**
   * @generated from field: repeated aiserver.v1.CursorPredictionConfigResponse.Heuristic heuristics = 3;
   */
  heuristics: CursorPredictionConfigResponse_Heuristic[] = [];

  constructor(data?: PartialMessage<CursorPredictionConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.CursorPredictionConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "models", kind: "message", T: CursorPredictionModel, repeated: true },
    { no: 2, name: "default_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "heuristics", kind: "enum", T: proto3.getEnumType(CursorPredictionConfigResponse_Heuristic), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CursorPredictionConfigResponse {
    return new CursorPredictionConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CursorPredictionConfigResponse {
    return new CursorPredictionConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CursorPredictionConfigResponse {
    return new CursorPredictionConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CursorPredictionConfigResponse | PlainMessage<CursorPredictionConfigResponse> | undefined, b: CursorPredictionConfigResponse | PlainMessage<CursorPredictionConfigResponse> | undefined): boolean {
    return proto3.util.equals(CursorPredictionConfigResponse, a, b);
  }
}

/**
 * aiserver.v1.CursorPredictionConfigResponse.Heuristic
 *
 * @generated from enum aiserver.v1.CursorPredictionConfigResponse.Heuristic
 */
export enum CursorPredictionConfigResponse_Heuristic {
  /**
   * @generated from enum value: HEURISTIC_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: HEURISTIC_DISABLE_IN_LAST_CPP_SUGGESTION = 1;
   */
  DISABLE_IN_LAST_CPP_SUGGESTION = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(CursorPredictionConfigResponse_Heuristic)
proto3.util.setEnumType(CursorPredictionConfigResponse_Heuristic, "aiserver.v1.CursorPredictionConfigResponse.Heuristic", [
  { no: 0, name: "HEURISTIC_UNSPECIFIED" },
  { no: 1, name: "HEURISTIC_DISABLE_IN_LAST_CPP_SUGGESTION" },
]);

